{"version":3,"sources":["webpack:///files_readmemd/node_modules/markdown-it/index.js","webpack:///files_readmemd/node_modules/markdown-it/lib/index.js","webpack:///files_readmemd/node_modules/markdown-it/lib/common/utils.js","webpack:///files_readmemd/node_modules/markdown-it/lib/common/entities.js","webpack:///files_readmemd/node_modules/uc.micro/categories/P/regex.js","webpack:///files_readmemd/node_modules/mdurl/index.js","webpack:///files_readmemd/node_modules/mdurl/encode.js","webpack:///files_readmemd/node_modules/mdurl/decode.js","webpack:///files_readmemd/node_modules/mdurl/format.js","webpack:///files_readmemd/node_modules/mdurl/parse.js","webpack:///files_readmemd/node_modules/uc.micro/index.js","webpack:///files_readmemd/node_modules/uc.micro/properties/Any/regex.js","webpack:///files_readmemd/node_modules/uc.micro/categories/Cc/regex.js","webpack:///files_readmemd/node_modules/uc.micro/categories/Cf/regex.js","webpack:///files_readmemd/node_modules/uc.micro/categories/Z/regex.js","webpack:///files_readmemd/node_modules/markdown-it/lib/helpers/index.js","webpack:///files_readmemd/node_modules/markdown-it/lib/helpers/parse_link_label.js","webpack:///files_readmemd/node_modules/markdown-it/lib/helpers/parse_link_destination.js","webpack:///files_readmemd/node_modules/markdown-it/lib/helpers/parse_link_title.js","webpack:///files_readmemd/node_modules/markdown-it/lib/renderer.js","webpack:///files_readmemd/node_modules/markdown-it/lib/parser_core.js","webpack:///files_readmemd/node_modules/markdown-it/lib/ruler.js","webpack:///files_readmemd/node_modules/markdown-it/lib/rules_core/normalize.js","webpack:///files_readmemd/node_modules/markdown-it/lib/rules_core/block.js","webpack:///files_readmemd/node_modules/markdown-it/lib/rules_core/inline.js","webpack:///files_readmemd/node_modules/markdown-it/lib/rules_core/linkify.js","webpack:///files_readmemd/node_modules/markdown-it/lib/rules_core/replacements.js","webpack:///files_readmemd/node_modules/markdown-it/lib/rules_core/smartquotes.js","webpack:///files_readmemd/node_modules/markdown-it/lib/rules_core/state_core.js","webpack:///files_readmemd/node_modules/markdown-it/lib/token.js","webpack:///files_readmemd/node_modules/markdown-it/lib/parser_block.js","webpack:///files_readmemd/node_modules/markdown-it/lib/rules_block/table.js","webpack:///files_readmemd/node_modules/markdown-it/lib/rules_block/code.js","webpack:///files_readmemd/node_modules/markdown-it/lib/rules_block/fence.js","webpack:///files_readmemd/node_modules/markdown-it/lib/rules_block/blockquote.js","webpack:///files_readmemd/node_modules/markdown-it/lib/rules_block/hr.js","webpack:///files_readmemd/node_modules/markdown-it/lib/rules_block/list.js","webpack:///files_readmemd/node_modules/markdown-it/lib/rules_block/reference.js","webpack:///files_readmemd/node_modules/markdown-it/lib/rules_block/html_block.js","webpack:///files_readmemd/node_modules/markdown-it/lib/common/html_blocks.js","webpack:///files_readmemd/node_modules/markdown-it/lib/common/html_re.js","webpack:///files_readmemd/node_modules/markdown-it/lib/rules_block/heading.js","webpack:///files_readmemd/node_modules/markdown-it/lib/rules_block/lheading.js","webpack:///files_readmemd/node_modules/markdown-it/lib/rules_block/paragraph.js","webpack:///files_readmemd/node_modules/markdown-it/lib/rules_block/state_block.js","webpack:///files_readmemd/node_modules/markdown-it/lib/parser_inline.js","webpack:///files_readmemd/node_modules/markdown-it/lib/rules_inline/text.js","webpack:///files_readmemd/node_modules/markdown-it/lib/rules_inline/newline.js","webpack:///files_readmemd/node_modules/markdown-it/lib/rules_inline/escape.js","webpack:///files_readmemd/node_modules/markdown-it/lib/rules_inline/backticks.js","webpack:///files_readmemd/node_modules/markdown-it/lib/rules_inline/strikethrough.js","webpack:///files_readmemd/node_modules/markdown-it/lib/rules_inline/emphasis.js","webpack:///files_readmemd/node_modules/markdown-it/lib/rules_inline/link.js","webpack:///files_readmemd/node_modules/markdown-it/lib/rules_inline/image.js","webpack:///files_readmemd/node_modules/markdown-it/lib/rules_inline/autolink.js","webpack:///files_readmemd/node_modules/markdown-it/lib/rules_inline/html_inline.js","webpack:///files_readmemd/node_modules/markdown-it/lib/rules_inline/entity.js","webpack:///files_readmemd/node_modules/markdown-it/lib/rules_inline/balance_pairs.js","webpack:///files_readmemd/node_modules/markdown-it/lib/rules_inline/text_collapse.js","webpack:///files_readmemd/node_modules/markdown-it/lib/rules_inline/state_inline.js","webpack:///files_readmemd/node_modules/linkify-it/index.js","webpack:///files_readmemd/node_modules/linkify-it/lib/re.js","webpack:///files_readmemd/node_modules/punycode/punycode.es6.js","webpack:///files_readmemd/node_modules/markdown-it/lib/presets/default.js","webpack:///files_readmemd/node_modules/markdown-it/lib/presets/zero.js","webpack:///files_readmemd/node_modules/markdown-it/lib/presets/commonmark.js"],"names":["module","exports","utils","helpers","Renderer","ParserCore","ParserBlock","ParserInline","LinkifyIt","mdurl","punycode","config","default","zero","commonmark","BAD_PROTO_RE","GOOD_DATA_RE","validateLink","url","str","trim","toLowerCase","test","RECODE_HOSTNAME_FOR","normalizeLink","parsed","parse","hostname","protocol","indexOf","toASCII","er","encode","format","normalizeLinkText","toUnicode","decode","defaultChars","MarkdownIt","presetName","options","this","isString","inline","block","core","renderer","linkify","assign","configure","set","prototype","presets","self","Error","components","Object","keys","forEach","name","rules","ruler","enableOnly","rules2","ruler2","enable","list","ignoreInvalid","result","Array","isArray","chain","concat","missed","filter","length","disable","use","plugin","args","slice","call","arguments","apply","src","env","state","State","process","tokens","render","parseInline","inlineMode","renderInline","_hasOwnProperty","hasOwnProperty","has","object","key","isValidEntityCode","c","fromCodePoint","surrogate1","surrogate2","String","fromCharCode","UNESCAPE_MD_RE","UNESCAPE_ALL_RE","RegExp","source","DIGITAL_ENTITY_TEST_RE","entities","HTML_ESCAPE_TEST_RE","HTML_ESCAPE_REPLACE_RE","HTML_REPLACEMENTS","replaceUnsafeChar","ch","REGEXP_ESCAPE_RE","UNICODE_PUNCT_RE","lib","ucmicro","obj","sources","TypeError","toString","_class","unescapeMd","replace","unescapeAll","match","escaped","entity","code","charCodeAt","parseInt","replaceEntityPattern","escapeHtml","arrayReplaceAt","pos","newElements","isSpace","isWhiteSpace","isMdAsciiPunct","isPunctChar","escapeRE","normalizeReference","toUpperCase","encodeCache","string","exclude","keepEscaped","i","l","nextCode","cache","push","getEncodeCache","encodeURIComponent","componentChars","decodeCache","getDecodeCache","seq","b1","b2","b3","b4","chr","slashes","auth","port","pathname","search","hash","Url","protocolPattern","portPattern","simplePathPattern","unwise","autoEscape","nonHostChars","hostEndingChars","hostnamePartPattern","hostnamePartStart","hostlessProtocol","slashedProtocol","slashesDenoteHost","lowerProto","hec","rest","split","simplePath","exec","proto","substr","atSign","hostEnd","lastIndexOf","host","parseHost","ipv6Hostname","hostparts","part","newpart","j","k","validParts","notHost","bit","unshift","join","qm","u","Any","Cc","Cf","P","Z","parseLinkLabel","parseLinkDestination","parseLinkTitle","start","disableNested","level","found","marker","prevPos","labelEnd","max","posMax","oldPos","md","skipToken","ok","lines","default_rules","code_inline","idx","slf","token","renderAttrs","content","code_block","fence","highlighted","arr","tmpAttrs","tmpToken","info","langName","langAttrs","highlight","attrIndex","attrs","langPrefix","image","renderInlineAsText","children","renderToken","hardbreak","xhtmlOut","softbreak","breaks","text","html_block","html_inline","nextToken","needLf","hidden","nesting","tag","type","len","Ruler","_rules","Core","getRules","__rules__","__cache__","__find__","__compile__","chains","rule","enabled","alt","altName","fn","at","index","opt","before","beforeName","ruleName","splice","after","afterName","chainName","NEWLINES_RE","NULL_RE","Token","map","tok","isLinkClose","currentToken","nodes","ln","lastPos","htmlLinkLevel","fullUrl","urlText","links","blockTokens","pretest","schema","markup","lastIndex","RARE_RE","SCOPED_ABBR_TEST_RE","SCOPED_ABBR_RE","SCOPED_ABBR","r","p","tm","replaceFn","replace_scoped","inlineTokens","inside_autolink","replace_rare","blkIdx","typographer","QUOTE_TEST_RE","QUOTE_RE","replaceAt","process_inlines","t","thisLevel","item","lastChar","nextChar","isLastPunctChar","isNextPunctChar","isLastWhiteSpace","isNextWhiteSpace","canOpen","canClose","isSingle","stack","openQuote","closeQuote","OUTER","single","quotes","StateCore","meta","attrPush","attrData","attrSet","value","attrGet","attrJoin","tokenize","startLine","endLine","line","hasEmptyLines","maxNesting","skipEmptyLines","sCount","blkIndent","tight","isEmpty","outTokens","lineMax","getLine","bMarks","tShift","eMarks","escapedSplit","isEscaped","current","substring","silent","lineText","nextLine","columns","columnCount","aligns","tableLines","tbodyLines","oldParentType","terminate","terminatorRules","firstCh","secondCh","shift","pop","parentType","last","getLines","params","mem","haveEndMarker","skipChars","skipSpaces","adjustTab","initial","lastLineEmpty","offset","oldBMarks","oldBSCount","oldIndent","oldSCount","oldTShift","spaceAfterMarker","isOutdented","oldLineMax","bsCount","cnt","skipBulletListMarker","skipOrderedListMarker","contentStart","indent","indentAfterMarker","isOrdered","itemLines","listLines","listTokIdx","markerCharCode","markerValue","oldListIndent","oldTight","posAfterMarker","prevEmptyEnd","isTerminatingParagraph","listIndent","Number","Math","min","markTightParagraphs","_endLine","destEndPos","destEndLineNo","href","label","res","title","references","block_names","HTML_OPEN_CLOSE_TAG_RE","HTML_SEQUENCES","html","open_tag","close_tag","HTML_TAG_RE","tmp","skipSpacesBack","skipCharsBack","StateBlock","s","indent_found","ddIndent","from","begin","end","keepLastLF","lineIndent","first","queue","lineStart","_rules2","pending","pushPending","isTerminatorChar","pmax","ESCAPED","matchStart","matchEnd","openerLength","closerLength","backticksScanned","backticks","postProcess","delimiters","startDelim","endDelim","loneMarkers","scanned","scanDelims","jump","open","can_open","close","can_close","curr","tokens_meta","isStrong","labelStart","ref","parseReference","EMAIL_RE","AUTOLINK_RE","lc","isLetter","DIGITAL_RE","NAMED_RE","processDelimiters","closerIdx","openerIdx","closer","opener","minOpenerIdx","newMinOpenerIdx","isOddMatch","lastJump","openersBottom","StateInline","pendingLevel","_prev_delimiters","token_meta","canSplitWord","count","left_flanking","right_flanking","isFunction","defaultOptions","fuzzyLink","fuzzyEmail","fuzzyIP","defaultSchemas","validate","tail","re","http","src_auth","src_host_port_strict","src_path","no_http","src_domain","src_domain_root","src_port","src_host_terminator","mailto","src_email_name","src_host_strict","tlds_default","compile","__opts__","tlds","__tlds__","untpl","tpl","src_tlds","onCompile","__tlds_replaced__","src_xn","email_fuzzy","tpl_email_fuzzy","link_fuzzy","tpl_link_fuzzy","link_no_ip_fuzzy","tpl_link_no_ip_fuzzy","host_fuzzy_test","tpl_host_fuzzy_test","aliases","schemaError","val","__compiled__","__schemas__","compiled","link","isRegExp","createValidator","normalize","alias","slist","schema_test","src_ZPCc","schema_search","__index__","__text_cache__","resetScanCache","Match","__last_index__","__schema__","raw","createMatch","schemas","reduce","acc","add","definition","m","ml","me","next","tld_pos","testSchemaAt","keepOld","sort","el","reverse","opts","src_Any","src_Cc","src_Z","src_P","src_ZCc","src_pseudo_letter","src_ip4","src_host","tpl_host_fuzzy","tpl_host_no_ip_fuzzy","tpl_host_fuzzy_strict","tpl_host_port_fuzzy_strict","tpl_host_port_no_ip_fuzzy_strict","maxInt","base","regexPunycode","regexNonASCII","regexSeparators","errors","floor","stringFromCharCode","error","RangeError","mapDomain","parts","encoded","array","ucs2decode","output","counter","extra","ucs2encode","digitToBasic","digit","flag","adapt","delta","numPoints","firstTime","baseMinusTMin","input","inputLength","n","bias","basic","oldi","w","codePoint","baseMinusT","out","currentValue","basicLength","handledCPCount","handledCPCountPlusOne","q","qMinusT"],"mappings":"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","file":"files_readmemd-markdown-it.js?v=280d7579d7392f4ef80a","sourcesContent":["'use strict';\n\n\nmodule.exports = require('./lib/');\n","// Main parser class\n\n'use strict';\n\n\nvar utils        = require('./common/utils');\nvar helpers      = require('./helpers');\nvar Renderer     = require('./renderer');\nvar ParserCore   = require('./parser_core');\nvar ParserBlock  = require('./parser_block');\nvar ParserInline = require('./parser_inline');\nvar LinkifyIt    = require('linkify-it');\nvar mdurl        = require('mdurl');\nvar punycode     = require('punycode');\n\n\nvar config = {\n  default: require('./presets/default'),\n  zero: require('./presets/zero'),\n  commonmark: require('./presets/commonmark')\n};\n\n////////////////////////////////////////////////////////////////////////////////\n//\n// This validator can prohibit more than really needed to prevent XSS. It's a\n// tradeoff to keep code simple and to be secure by default.\n//\n// If you need different setup - override validator method as you wish. Or\n// replace it with dummy function and use external sanitizer.\n//\n\nvar BAD_PROTO_RE = /^(vbscript|javascript|file|data):/;\nvar GOOD_DATA_RE = /^data:image\\/(gif|png|jpeg|webp);/;\n\nfunction validateLink(url) {\n  // url should be normalized at this point, and existing entities are decoded\n  var str = url.trim().toLowerCase();\n\n  return BAD_PROTO_RE.test(str) ? (GOOD_DATA_RE.test(str) ? true : false) : true;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n\nvar RECODE_HOSTNAME_FOR = [ 'http:', 'https:', 'mailto:' ];\n\nfunction normalizeLink(url) {\n  var parsed = mdurl.parse(url, true);\n\n  if (parsed.hostname) {\n    // Encode hostnames in urls like:\n    // `http://host/`, `https://host/`, `mailto:user@host`, `//host/`\n    //\n    // We don't encode unknown schemas, because it's likely that we encode\n    // something we shouldn't (e.g. `skype:name` treated as `skype:host`)\n    //\n    if (!parsed.protocol || RECODE_HOSTNAME_FOR.indexOf(parsed.protocol) >= 0) {\n      try {\n        parsed.hostname = punycode.toASCII(parsed.hostname);\n      } catch (er) { /**/ }\n    }\n  }\n\n  return mdurl.encode(mdurl.format(parsed));\n}\n\nfunction normalizeLinkText(url) {\n  var parsed = mdurl.parse(url, true);\n\n  if (parsed.hostname) {\n    // Encode hostnames in urls like:\n    // `http://host/`, `https://host/`, `mailto:user@host`, `//host/`\n    //\n    // We don't encode unknown schemas, because it's likely that we encode\n    // something we shouldn't (e.g. `skype:name` treated as `skype:host`)\n    //\n    if (!parsed.protocol || RECODE_HOSTNAME_FOR.indexOf(parsed.protocol) >= 0) {\n      try {\n        parsed.hostname = punycode.toUnicode(parsed.hostname);\n      } catch (er) { /**/ }\n    }\n  }\n\n  // add '%' to exclude list because of https://github.com/markdown-it/markdown-it/issues/720\n  return mdurl.decode(mdurl.format(parsed), mdurl.decode.defaultChars + '%');\n}\n\n\n/**\n * class MarkdownIt\n *\n * Main parser/renderer class.\n *\n * ##### Usage\n *\n * ```javascript\n * // node.js, \"classic\" way:\n * var MarkdownIt = require('markdown-it'),\n *     md = new MarkdownIt();\n * var result = md.render('# markdown-it rulezz!');\n *\n * // node.js, the same, but with sugar:\n * var md = require('markdown-it')();\n * var result = md.render('# markdown-it rulezz!');\n *\n * // browser without AMD, added to \"window\" on script load\n * // Note, there are no dash.\n * var md = window.markdownit();\n * var result = md.render('# markdown-it rulezz!');\n * ```\n *\n * Single line rendering, without paragraph wrap:\n *\n * ```javascript\n * var md = require('markdown-it')();\n * var result = md.renderInline('__markdown-it__ rulezz!');\n * ```\n **/\n\n/**\n * new MarkdownIt([presetName, options])\n * - presetName (String): optional, `commonmark` / `zero`\n * - options (Object)\n *\n * Creates parser instanse with given config. Can be called without `new`.\n *\n * ##### presetName\n *\n * MarkdownIt provides named presets as a convenience to quickly\n * enable/disable active syntax rules and options for common use cases.\n *\n * - [\"commonmark\"](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/commonmark.js) -\n *   configures parser to strict [CommonMark](http://commonmark.org/) mode.\n * - [default](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/default.js) -\n *   similar to GFM, used when no preset name given. Enables all available rules,\n *   but still without html, typographer & autolinker.\n * - [\"zero\"](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/zero.js) -\n *   all rules disabled. Useful to quickly setup your config via `.enable()`.\n *   For example, when you need only `bold` and `italic` markup and nothing else.\n *\n * ##### options:\n *\n * - __html__ - `false`. Set `true` to enable HTML tags in source. Be careful!\n *   That's not safe! You may need external sanitizer to protect output from XSS.\n *   It's better to extend features via plugins, instead of enabling HTML.\n * - __xhtmlOut__ - `false`. Set `true` to add '/' when closing single tags\n *   (`<br />`). This is needed only for full CommonMark compatibility. In real\n *   world you will need HTML output.\n * - __breaks__ - `false`. Set `true` to convert `\\n` in paragraphs into `<br>`.\n * - __langPrefix__ - `language-`. CSS language class prefix for fenced blocks.\n *   Can be useful for external highlighters.\n * - __linkify__ - `false`. Set `true` to autoconvert URL-like text to links.\n * - __typographer__  - `false`. Set `true` to enable [some language-neutral\n *   replacement](https://github.com/markdown-it/markdown-it/blob/master/lib/rules_core/replacements.js) +\n *   quotes beautification (smartquotes).\n * - __quotes__ - `“”‘’`, String or Array. Double + single quotes replacement\n *   pairs, when typographer enabled and smartquotes on. For example, you can\n *   use `'«»„“'` for Russian, `'„“‚‘'` for German, and\n *   `['«\\xA0', '\\xA0»', '‹\\xA0', '\\xA0›']` for French (including nbsp).\n * - __highlight__ - `null`. Highlighter function for fenced code blocks.\n *   Highlighter `function (str, lang)` should return escaped HTML. It can also\n *   return empty string if the source was not changed and should be escaped\n *   externaly. If result starts with <pre... internal wrapper is skipped.\n *\n * ##### Example\n *\n * ```javascript\n * // commonmark mode\n * var md = require('markdown-it')('commonmark');\n *\n * // default mode\n * var md = require('markdown-it')();\n *\n * // enable everything\n * var md = require('markdown-it')({\n *   html: true,\n *   linkify: true,\n *   typographer: true\n * });\n * ```\n *\n * ##### Syntax highlighting\n *\n * ```js\n * var hljs = require('highlight.js') // https://highlightjs.org/\n *\n * var md = require('markdown-it')({\n *   highlight: function (str, lang) {\n *     if (lang && hljs.getLanguage(lang)) {\n *       try {\n *         return hljs.highlight(str, { language: lang, ignoreIllegals: true }).value;\n *       } catch (__) {}\n *     }\n *\n *     return ''; // use external default escaping\n *   }\n * });\n * ```\n *\n * Or with full wrapper override (if you need assign class to `<pre>`):\n *\n * ```javascript\n * var hljs = require('highlight.js') // https://highlightjs.org/\n *\n * // Actual default values\n * var md = require('markdown-it')({\n *   highlight: function (str, lang) {\n *     if (lang && hljs.getLanguage(lang)) {\n *       try {\n *         return '<pre class=\"hljs\"><code>' +\n *                hljs.highlight(str, { language: lang, ignoreIllegals: true }).value +\n *                '</code></pre>';\n *       } catch (__) {}\n *     }\n *\n *     return '<pre class=\"hljs\"><code>' + md.utils.escapeHtml(str) + '</code></pre>';\n *   }\n * });\n * ```\n *\n **/\nfunction MarkdownIt(presetName, options) {\n  if (!(this instanceof MarkdownIt)) {\n    return new MarkdownIt(presetName, options);\n  }\n\n  if (!options) {\n    if (!utils.isString(presetName)) {\n      options = presetName || {};\n      presetName = 'default';\n    }\n  }\n\n  /**\n   * MarkdownIt#inline -> ParserInline\n   *\n   * Instance of [[ParserInline]]. You may need it to add new rules when\n   * writing plugins. For simple rules control use [[MarkdownIt.disable]] and\n   * [[MarkdownIt.enable]].\n   **/\n  this.inline = new ParserInline();\n\n  /**\n   * MarkdownIt#block -> ParserBlock\n   *\n   * Instance of [[ParserBlock]]. You may need it to add new rules when\n   * writing plugins. For simple rules control use [[MarkdownIt.disable]] and\n   * [[MarkdownIt.enable]].\n   **/\n  this.block = new ParserBlock();\n\n  /**\n   * MarkdownIt#core -> Core\n   *\n   * Instance of [[Core]] chain executor. You may need it to add new rules when\n   * writing plugins. For simple rules control use [[MarkdownIt.disable]] and\n   * [[MarkdownIt.enable]].\n   **/\n  this.core = new ParserCore();\n\n  /**\n   * MarkdownIt#renderer -> Renderer\n   *\n   * Instance of [[Renderer]]. Use it to modify output look. Or to add rendering\n   * rules for new token types, generated by plugins.\n   *\n   * ##### Example\n   *\n   * ```javascript\n   * var md = require('markdown-it')();\n   *\n   * function myToken(tokens, idx, options, env, self) {\n   *   //...\n   *   return result;\n   * };\n   *\n   * md.renderer.rules['my_token'] = myToken\n   * ```\n   *\n   * See [[Renderer]] docs and [source code](https://github.com/markdown-it/markdown-it/blob/master/lib/renderer.js).\n   **/\n  this.renderer = new Renderer();\n\n  /**\n   * MarkdownIt#linkify -> LinkifyIt\n   *\n   * [linkify-it](https://github.com/markdown-it/linkify-it) instance.\n   * Used by [linkify](https://github.com/markdown-it/markdown-it/blob/master/lib/rules_core/linkify.js)\n   * rule.\n   **/\n  this.linkify = new LinkifyIt();\n\n  /**\n   * MarkdownIt#validateLink(url) -> Boolean\n   *\n   * Link validation function. CommonMark allows too much in links. By default\n   * we disable `javascript:`, `vbscript:`, `file:` schemas, and almost all `data:...` schemas\n   * except some embedded image types.\n   *\n   * You can change this behaviour:\n   *\n   * ```javascript\n   * var md = require('markdown-it')();\n   * // enable everything\n   * md.validateLink = function () { return true; }\n   * ```\n   **/\n  this.validateLink = validateLink;\n\n  /**\n   * MarkdownIt#normalizeLink(url) -> String\n   *\n   * Function used to encode link url to a machine-readable format,\n   * which includes url-encoding, punycode, etc.\n   **/\n  this.normalizeLink = normalizeLink;\n\n  /**\n   * MarkdownIt#normalizeLinkText(url) -> String\n   *\n   * Function used to decode link url to a human-readable format`\n   **/\n  this.normalizeLinkText = normalizeLinkText;\n\n\n  // Expose utils & helpers for easy acces from plugins\n\n  /**\n   * MarkdownIt#utils -> utils\n   *\n   * Assorted utility functions, useful to write plugins. See details\n   * [here](https://github.com/markdown-it/markdown-it/blob/master/lib/common/utils.js).\n   **/\n  this.utils = utils;\n\n  /**\n   * MarkdownIt#helpers -> helpers\n   *\n   * Link components parser functions, useful to write plugins. See details\n   * [here](https://github.com/markdown-it/markdown-it/blob/master/lib/helpers).\n   **/\n  this.helpers = utils.assign({}, helpers);\n\n\n  this.options = {};\n  this.configure(presetName);\n\n  if (options) { this.set(options); }\n}\n\n\n/** chainable\n * MarkdownIt.set(options)\n *\n * Set parser options (in the same format as in constructor). Probably, you\n * will never need it, but you can change options after constructor call.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')()\n *             .set({ html: true, breaks: true })\n *             .set({ typographer, true });\n * ```\n *\n * __Note:__ To achieve the best possible performance, don't modify a\n * `markdown-it` instance options on the fly. If you need multiple configurations\n * it's best to create multiple instances and initialize each with separate\n * config.\n **/\nMarkdownIt.prototype.set = function (options) {\n  utils.assign(this.options, options);\n  return this;\n};\n\n\n/** chainable, internal\n * MarkdownIt.configure(presets)\n *\n * Batch load of all options and compenent settings. This is internal method,\n * and you probably will not need it. But if you will - see available presets\n * and data structure [here](https://github.com/markdown-it/markdown-it/tree/master/lib/presets)\n *\n * We strongly recommend to use presets instead of direct config loads. That\n * will give better compatibility with next versions.\n **/\nMarkdownIt.prototype.configure = function (presets) {\n  var self = this, presetName;\n\n  if (utils.isString(presets)) {\n    presetName = presets;\n    presets = config[presetName];\n    if (!presets) { throw new Error('Wrong `markdown-it` preset \"' + presetName + '\", check name'); }\n  }\n\n  if (!presets) { throw new Error('Wrong `markdown-it` preset, can\\'t be empty'); }\n\n  if (presets.options) { self.set(presets.options); }\n\n  if (presets.components) {\n    Object.keys(presets.components).forEach(function (name) {\n      if (presets.components[name].rules) {\n        self[name].ruler.enableOnly(presets.components[name].rules);\n      }\n      if (presets.components[name].rules2) {\n        self[name].ruler2.enableOnly(presets.components[name].rules2);\n      }\n    });\n  }\n  return this;\n};\n\n\n/** chainable\n * MarkdownIt.enable(list, ignoreInvalid)\n * - list (String|Array): rule name or list of rule names to enable\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * Enable list or rules. It will automatically find appropriate components,\n * containing rules with given names. If rule not found, and `ignoreInvalid`\n * not set - throws exception.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')()\n *             .enable(['sub', 'sup'])\n *             .disable('smartquotes');\n * ```\n **/\nMarkdownIt.prototype.enable = function (list, ignoreInvalid) {\n  var result = [];\n\n  if (!Array.isArray(list)) { list = [ list ]; }\n\n  [ 'core', 'block', 'inline' ].forEach(function (chain) {\n    result = result.concat(this[chain].ruler.enable(list, true));\n  }, this);\n\n  result = result.concat(this.inline.ruler2.enable(list, true));\n\n  var missed = list.filter(function (name) { return result.indexOf(name) < 0; });\n\n  if (missed.length && !ignoreInvalid) {\n    throw new Error('MarkdownIt. Failed to enable unknown rule(s): ' + missed);\n  }\n\n  return this;\n};\n\n\n/** chainable\n * MarkdownIt.disable(list, ignoreInvalid)\n * - list (String|Array): rule name or list of rule names to disable.\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * The same as [[MarkdownIt.enable]], but turn specified rules off.\n **/\nMarkdownIt.prototype.disable = function (list, ignoreInvalid) {\n  var result = [];\n\n  if (!Array.isArray(list)) { list = [ list ]; }\n\n  [ 'core', 'block', 'inline' ].forEach(function (chain) {\n    result = result.concat(this[chain].ruler.disable(list, true));\n  }, this);\n\n  result = result.concat(this.inline.ruler2.disable(list, true));\n\n  var missed = list.filter(function (name) { return result.indexOf(name) < 0; });\n\n  if (missed.length && !ignoreInvalid) {\n    throw new Error('MarkdownIt. Failed to disable unknown rule(s): ' + missed);\n  }\n  return this;\n};\n\n\n/** chainable\n * MarkdownIt.use(plugin, params)\n *\n * Load specified plugin with given params into current parser instance.\n * It's just a sugar to call `plugin(md, params)` with curring.\n *\n * ##### Example\n *\n * ```javascript\n * var iterator = require('markdown-it-for-inline');\n * var md = require('markdown-it')()\n *             .use(iterator, 'foo_replace', 'text', function (tokens, idx) {\n *               tokens[idx].content = tokens[idx].content.replace(/foo/g, 'bar');\n *             });\n * ```\n **/\nMarkdownIt.prototype.use = function (plugin /*, params, ... */) {\n  var args = [ this ].concat(Array.prototype.slice.call(arguments, 1));\n  plugin.apply(plugin, args);\n  return this;\n};\n\n\n/** internal\n * MarkdownIt.parse(src, env) -> Array\n * - src (String): source string\n * - env (Object): environment sandbox\n *\n * Parse input string and return list of block tokens (special token type\n * \"inline\" will contain list of inline tokens). You should not call this\n * method directly, until you write custom renderer (for example, to produce\n * AST).\n *\n * `env` is used to pass data between \"distributed\" rules and return additional\n * metadata like reference info, needed for the renderer. It also can be used to\n * inject data in specific cases. Usually, you will be ok to pass `{}`,\n * and then pass updated object to renderer.\n **/\nMarkdownIt.prototype.parse = function (src, env) {\n  if (typeof src !== 'string') {\n    throw new Error('Input data should be a String');\n  }\n\n  var state = new this.core.State(src, this, env);\n\n  this.core.process(state);\n\n  return state.tokens;\n};\n\n\n/**\n * MarkdownIt.render(src [, env]) -> String\n * - src (String): source string\n * - env (Object): environment sandbox\n *\n * Render markdown string into html. It does all magic for you :).\n *\n * `env` can be used to inject additional metadata (`{}` by default).\n * But you will not need it with high probability. See also comment\n * in [[MarkdownIt.parse]].\n **/\nMarkdownIt.prototype.render = function (src, env) {\n  env = env || {};\n\n  return this.renderer.render(this.parse(src, env), this.options, env);\n};\n\n\n/** internal\n * MarkdownIt.parseInline(src, env) -> Array\n * - src (String): source string\n * - env (Object): environment sandbox\n *\n * The same as [[MarkdownIt.parse]] but skip all block rules. It returns the\n * block tokens list with the single `inline` element, containing parsed inline\n * tokens in `children` property. Also updates `env` object.\n **/\nMarkdownIt.prototype.parseInline = function (src, env) {\n  var state = new this.core.State(src, this, env);\n\n  state.inlineMode = true;\n  this.core.process(state);\n\n  return state.tokens;\n};\n\n\n/**\n * MarkdownIt.renderInline(src [, env]) -> String\n * - src (String): source string\n * - env (Object): environment sandbox\n *\n * Similar to [[MarkdownIt.render]] but for single paragraph content. Result\n * will NOT be wrapped into `<p>` tags.\n **/\nMarkdownIt.prototype.renderInline = function (src, env) {\n  env = env || {};\n\n  return this.renderer.render(this.parseInline(src, env), this.options, env);\n};\n\n\nmodule.exports = MarkdownIt;\n","// Utilities\n//\n'use strict';\n\n\nfunction _class(obj) { return Object.prototype.toString.call(obj); }\n\nfunction isString(obj) { return _class(obj) === '[object String]'; }\n\nvar _hasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction has(object, key) {\n  return _hasOwnProperty.call(object, key);\n}\n\n// Merge objects\n//\nfunction assign(obj /*from1, from2, from3, ...*/) {\n  var sources = Array.prototype.slice.call(arguments, 1);\n\n  sources.forEach(function (source) {\n    if (!source) { return; }\n\n    if (typeof source !== 'object') {\n      throw new TypeError(source + 'must be object');\n    }\n\n    Object.keys(source).forEach(function (key) {\n      obj[key] = source[key];\n    });\n  });\n\n  return obj;\n}\n\n// Remove element from array and put another array at those position.\n// Useful for some operations with tokens\nfunction arrayReplaceAt(src, pos, newElements) {\n  return [].concat(src.slice(0, pos), newElements, src.slice(pos + 1));\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\nfunction isValidEntityCode(c) {\n  /*eslint no-bitwise:0*/\n  // broken sequence\n  if (c >= 0xD800 && c <= 0xDFFF) { return false; }\n  // never used\n  if (c >= 0xFDD0 && c <= 0xFDEF) { return false; }\n  if ((c & 0xFFFF) === 0xFFFF || (c & 0xFFFF) === 0xFFFE) { return false; }\n  // control codes\n  if (c >= 0x00 && c <= 0x08) { return false; }\n  if (c === 0x0B) { return false; }\n  if (c >= 0x0E && c <= 0x1F) { return false; }\n  if (c >= 0x7F && c <= 0x9F) { return false; }\n  // out of range\n  if (c > 0x10FFFF) { return false; }\n  return true;\n}\n\nfunction fromCodePoint(c) {\n  /*eslint no-bitwise:0*/\n  if (c > 0xffff) {\n    c -= 0x10000;\n    var surrogate1 = 0xd800 + (c >> 10),\n        surrogate2 = 0xdc00 + (c & 0x3ff);\n\n    return String.fromCharCode(surrogate1, surrogate2);\n  }\n  return String.fromCharCode(c);\n}\n\n\nvar UNESCAPE_MD_RE  = /\\\\([!\"#$%&'()*+,\\-.\\/:;<=>?@[\\\\\\]^_`{|}~])/g;\nvar ENTITY_RE       = /&([a-z#][a-z0-9]{1,31});/gi;\nvar UNESCAPE_ALL_RE = new RegExp(UNESCAPE_MD_RE.source + '|' + ENTITY_RE.source, 'gi');\n\nvar DIGITAL_ENTITY_TEST_RE = /^#((?:x[a-f0-9]{1,8}|[0-9]{1,8}))/i;\n\nvar entities = require('./entities');\n\nfunction replaceEntityPattern(match, name) {\n  var code = 0;\n\n  if (has(entities, name)) {\n    return entities[name];\n  }\n\n  if (name.charCodeAt(0) === 0x23/* # */ && DIGITAL_ENTITY_TEST_RE.test(name)) {\n    code = name[1].toLowerCase() === 'x' ?\n      parseInt(name.slice(2), 16) : parseInt(name.slice(1), 10);\n\n    if (isValidEntityCode(code)) {\n      return fromCodePoint(code);\n    }\n  }\n\n  return match;\n}\n\n/*function replaceEntities(str) {\n  if (str.indexOf('&') < 0) { return str; }\n\n  return str.replace(ENTITY_RE, replaceEntityPattern);\n}*/\n\nfunction unescapeMd(str) {\n  if (str.indexOf('\\\\') < 0) { return str; }\n  return str.replace(UNESCAPE_MD_RE, '$1');\n}\n\nfunction unescapeAll(str) {\n  if (str.indexOf('\\\\') < 0 && str.indexOf('&') < 0) { return str; }\n\n  return str.replace(UNESCAPE_ALL_RE, function (match, escaped, entity) {\n    if (escaped) { return escaped; }\n    return replaceEntityPattern(match, entity);\n  });\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\nvar HTML_ESCAPE_TEST_RE = /[&<>\"]/;\nvar HTML_ESCAPE_REPLACE_RE = /[&<>\"]/g;\nvar HTML_REPLACEMENTS = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;'\n};\n\nfunction replaceUnsafeChar(ch) {\n  return HTML_REPLACEMENTS[ch];\n}\n\nfunction escapeHtml(str) {\n  if (HTML_ESCAPE_TEST_RE.test(str)) {\n    return str.replace(HTML_ESCAPE_REPLACE_RE, replaceUnsafeChar);\n  }\n  return str;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\nvar REGEXP_ESCAPE_RE = /[.?*+^$[\\]\\\\(){}|-]/g;\n\nfunction escapeRE(str) {\n  return str.replace(REGEXP_ESCAPE_RE, '\\\\$&');\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\nfunction isSpace(code) {\n  switch (code) {\n    case 0x09:\n    case 0x20:\n      return true;\n  }\n  return false;\n}\n\n// Zs (unicode class) || [\\t\\f\\v\\r\\n]\nfunction isWhiteSpace(code) {\n  if (code >= 0x2000 && code <= 0x200A) { return true; }\n  switch (code) {\n    case 0x09: // \\t\n    case 0x0A: // \\n\n    case 0x0B: // \\v\n    case 0x0C: // \\f\n    case 0x0D: // \\r\n    case 0x20:\n    case 0xA0:\n    case 0x1680:\n    case 0x202F:\n    case 0x205F:\n    case 0x3000:\n      return true;\n  }\n  return false;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n/*eslint-disable max-len*/\nvar UNICODE_PUNCT_RE = require('uc.micro/categories/P/regex');\n\n// Currently without astral characters support.\nfunction isPunctChar(ch) {\n  return UNICODE_PUNCT_RE.test(ch);\n}\n\n\n// Markdown ASCII punctuation characters.\n//\n// !, \", #, $, %, &, ', (, ), *, +, ,, -, ., /, :, ;, <, =, >, ?, @, [, \\, ], ^, _, `, {, |, }, or ~\n// http://spec.commonmark.org/0.15/#ascii-punctuation-character\n//\n// Don't confuse with unicode punctuation !!! It lacks some chars in ascii range.\n//\nfunction isMdAsciiPunct(ch) {\n  switch (ch) {\n    case 0x21/* ! */:\n    case 0x22/* \" */:\n    case 0x23/* # */:\n    case 0x24/* $ */:\n    case 0x25/* % */:\n    case 0x26/* & */:\n    case 0x27/* ' */:\n    case 0x28/* ( */:\n    case 0x29/* ) */:\n    case 0x2A/* * */:\n    case 0x2B/* + */:\n    case 0x2C/* , */:\n    case 0x2D/* - */:\n    case 0x2E/* . */:\n    case 0x2F/* / */:\n    case 0x3A/* : */:\n    case 0x3B/* ; */:\n    case 0x3C/* < */:\n    case 0x3D/* = */:\n    case 0x3E/* > */:\n    case 0x3F/* ? */:\n    case 0x40/* @ */:\n    case 0x5B/* [ */:\n    case 0x5C/* \\ */:\n    case 0x5D/* ] */:\n    case 0x5E/* ^ */:\n    case 0x5F/* _ */:\n    case 0x60/* ` */:\n    case 0x7B/* { */:\n    case 0x7C/* | */:\n    case 0x7D/* } */:\n    case 0x7E/* ~ */:\n      return true;\n    default:\n      return false;\n  }\n}\n\n// Hepler to unify [reference labels].\n//\nfunction normalizeReference(str) {\n  // Trim and collapse whitespace\n  //\n  str = str.trim().replace(/\\s+/g, ' ');\n\n  // In node v10 'ẞ'.toLowerCase() === 'Ṿ', which is presumed to be a bug\n  // fixed in v12 (couldn't find any details).\n  //\n  // So treat this one as a special case\n  // (remove this when node v10 is no longer supported).\n  //\n  if ('ẞ'.toLowerCase() === 'Ṿ') {\n    str = str.replace(/ẞ/g, 'ß');\n  }\n\n  // .toLowerCase().toUpperCase() should get rid of all differences\n  // between letter variants.\n  //\n  // Simple .toLowerCase() doesn't normalize 125 code points correctly,\n  // and .toUpperCase doesn't normalize 6 of them (list of exceptions:\n  // İ, ϴ, ẞ, Ω, K, Å - those are already uppercased, but have differently\n  // uppercased versions).\n  //\n  // Here's an example showing how it happens. Lets take greek letter omega:\n  // uppercase U+0398 (Θ), U+03f4 (ϴ) and lowercase U+03b8 (θ), U+03d1 (ϑ)\n  //\n  // Unicode entries:\n  // 0398;GREEK CAPITAL LETTER THETA;Lu;0;L;;;;;N;;;;03B8;\n  // 03B8;GREEK SMALL LETTER THETA;Ll;0;L;;;;;N;;;0398;;0398\n  // 03D1;GREEK THETA SYMBOL;Ll;0;L;<compat> 03B8;;;;N;GREEK SMALL LETTER SCRIPT THETA;;0398;;0398\n  // 03F4;GREEK CAPITAL THETA SYMBOL;Lu;0;L;<compat> 0398;;;;N;;;;03B8;\n  //\n  // Case-insensitive comparison should treat all of them as equivalent.\n  //\n  // But .toLowerCase() doesn't change ϑ (it's already lowercase),\n  // and .toUpperCase() doesn't change ϴ (already uppercase).\n  //\n  // Applying first lower then upper case normalizes any character:\n  // '\\u0398\\u03f4\\u03b8\\u03d1'.toLowerCase().toUpperCase() === '\\u0398\\u0398\\u0398\\u0398'\n  //\n  // Note: this is equivalent to unicode case folding; unicode normalization\n  // is a different step that is not required here.\n  //\n  // Final result should be uppercased, because it's later stored in an object\n  // (this avoid a conflict with Object.prototype members,\n  // most notably, `__proto__`)\n  //\n  return str.toLowerCase().toUpperCase();\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n// Re-export libraries commonly used in both markdown-it and its plugins,\n// so plugins won't have to depend on them explicitly, which reduces their\n// bundled size (e.g. a browser build).\n//\nexports.lib                 = {};\nexports.lib.mdurl           = require('mdurl');\nexports.lib.ucmicro         = require('uc.micro');\n\nexports.assign              = assign;\nexports.isString            = isString;\nexports.has                 = has;\nexports.unescapeMd          = unescapeMd;\nexports.unescapeAll         = unescapeAll;\nexports.isValidEntityCode   = isValidEntityCode;\nexports.fromCodePoint       = fromCodePoint;\n// exports.replaceEntities     = replaceEntities;\nexports.escapeHtml          = escapeHtml;\nexports.arrayReplaceAt      = arrayReplaceAt;\nexports.isSpace             = isSpace;\nexports.isWhiteSpace        = isWhiteSpace;\nexports.isMdAsciiPunct      = isMdAsciiPunct;\nexports.isPunctChar         = isPunctChar;\nexports.escapeRE            = escapeRE;\nexports.normalizeReference  = normalizeReference;\n","// HTML5 entities map: { name -> utf16string }\n//\n'use strict';\n\n/*eslint quotes:0*/\nmodule.exports = require('entities/lib/maps/entities.json');\n","module.exports=/[!-#%-\\*,-\\/:;\\?@\\[-\\]_\\{\\}\\xA1\\xA7\\xAB\\xB6\\xB7\\xBB\\xBF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061E\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u09FD\\u0A76\\u0AF0\\u0C84\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166D\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E4E\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]|\\uD800[\\uDD00-\\uDD02\\uDF9F\\uDFD0]|\\uD801\\uDD6F|\\uD802[\\uDC57\\uDD1F\\uDD3F\\uDE50-\\uDE58\\uDE7F\\uDEF0-\\uDEF6\\uDF39-\\uDF3F\\uDF99-\\uDF9C]|\\uD803[\\uDF55-\\uDF59]|\\uD804[\\uDC47-\\uDC4D\\uDCBB\\uDCBC\\uDCBE-\\uDCC1\\uDD40-\\uDD43\\uDD74\\uDD75\\uDDC5-\\uDDC8\\uDDCD\\uDDDB\\uDDDD-\\uDDDF\\uDE38-\\uDE3D\\uDEA9]|\\uD805[\\uDC4B-\\uDC4F\\uDC5B\\uDC5D\\uDCC6\\uDDC1-\\uDDD7\\uDE41-\\uDE43\\uDE60-\\uDE6C\\uDF3C-\\uDF3E]|\\uD806[\\uDC3B\\uDE3F-\\uDE46\\uDE9A-\\uDE9C\\uDE9E-\\uDEA2]|\\uD807[\\uDC41-\\uDC45\\uDC70\\uDC71\\uDEF7\\uDEF8]|\\uD809[\\uDC70-\\uDC74]|\\uD81A[\\uDE6E\\uDE6F\\uDEF5\\uDF37-\\uDF3B\\uDF44]|\\uD81B[\\uDE97-\\uDE9A]|\\uD82F\\uDC9F|\\uD836[\\uDE87-\\uDE8B]|\\uD83A[\\uDD5E\\uDD5F]/","'use strict';\n\n\nmodule.exports.encode = require('./encode');\nmodule.exports.decode = require('./decode');\nmodule.exports.format = require('./format');\nmodule.exports.parse  = require('./parse');\n","\n'use strict';\n\n\nvar encodeCache = {};\n\n\n// Create a lookup array where anything but characters in `chars` string\n// and alphanumeric chars is percent-encoded.\n//\nfunction getEncodeCache(exclude) {\n  var i, ch, cache = encodeCache[exclude];\n  if (cache) { return cache; }\n\n  cache = encodeCache[exclude] = [];\n\n  for (i = 0; i < 128; i++) {\n    ch = String.fromCharCode(i);\n\n    if (/^[0-9a-z]$/i.test(ch)) {\n      // always allow unencoded alphanumeric characters\n      cache.push(ch);\n    } else {\n      cache.push('%' + ('0' + i.toString(16).toUpperCase()).slice(-2));\n    }\n  }\n\n  for (i = 0; i < exclude.length; i++) {\n    cache[exclude.charCodeAt(i)] = exclude[i];\n  }\n\n  return cache;\n}\n\n\n// Encode unsafe characters with percent-encoding, skipping already\n// encoded sequences.\n//\n//  - string       - string to encode\n//  - exclude      - list of characters to ignore (in addition to a-zA-Z0-9)\n//  - keepEscaped  - don't encode '%' in a correct escape sequence (default: true)\n//\nfunction encode(string, exclude, keepEscaped) {\n  var i, l, code, nextCode, cache,\n      result = '';\n\n  if (typeof exclude !== 'string') {\n    // encode(string, keepEscaped)\n    keepEscaped  = exclude;\n    exclude = encode.defaultChars;\n  }\n\n  if (typeof keepEscaped === 'undefined') {\n    keepEscaped = true;\n  }\n\n  cache = getEncodeCache(exclude);\n\n  for (i = 0, l = string.length; i < l; i++) {\n    code = string.charCodeAt(i);\n\n    if (keepEscaped && code === 0x25 /* % */ && i + 2 < l) {\n      if (/^[0-9a-f]{2}$/i.test(string.slice(i + 1, i + 3))) {\n        result += string.slice(i, i + 3);\n        i += 2;\n        continue;\n      }\n    }\n\n    if (code < 128) {\n      result += cache[code];\n      continue;\n    }\n\n    if (code >= 0xD800 && code <= 0xDFFF) {\n      if (code >= 0xD800 && code <= 0xDBFF && i + 1 < l) {\n        nextCode = string.charCodeAt(i + 1);\n        if (nextCode >= 0xDC00 && nextCode <= 0xDFFF) {\n          result += encodeURIComponent(string[i] + string[i + 1]);\n          i++;\n          continue;\n        }\n      }\n      result += '%EF%BF%BD';\n      continue;\n    }\n\n    result += encodeURIComponent(string[i]);\n  }\n\n  return result;\n}\n\nencode.defaultChars   = \";/?:@&=+$,-_.!~*'()#\";\nencode.componentChars = \"-_.!~*'()\";\n\n\nmodule.exports = encode;\n","\n'use strict';\n\n\n/* eslint-disable no-bitwise */\n\nvar decodeCache = {};\n\nfunction getDecodeCache(exclude) {\n  var i, ch, cache = decodeCache[exclude];\n  if (cache) { return cache; }\n\n  cache = decodeCache[exclude] = [];\n\n  for (i = 0; i < 128; i++) {\n    ch = String.fromCharCode(i);\n    cache.push(ch);\n  }\n\n  for (i = 0; i < exclude.length; i++) {\n    ch = exclude.charCodeAt(i);\n    cache[ch] = '%' + ('0' + ch.toString(16).toUpperCase()).slice(-2);\n  }\n\n  return cache;\n}\n\n\n// Decode percent-encoded string.\n//\nfunction decode(string, exclude) {\n  var cache;\n\n  if (typeof exclude !== 'string') {\n    exclude = decode.defaultChars;\n  }\n\n  cache = getDecodeCache(exclude);\n\n  return string.replace(/(%[a-f0-9]{2})+/gi, function(seq) {\n    var i, l, b1, b2, b3, b4, chr,\n        result = '';\n\n    for (i = 0, l = seq.length; i < l; i += 3) {\n      b1 = parseInt(seq.slice(i + 1, i + 3), 16);\n\n      if (b1 < 0x80) {\n        result += cache[b1];\n        continue;\n      }\n\n      if ((b1 & 0xE0) === 0xC0 && (i + 3 < l)) {\n        // 110xxxxx 10xxxxxx\n        b2 = parseInt(seq.slice(i + 4, i + 6), 16);\n\n        if ((b2 & 0xC0) === 0x80) {\n          chr = ((b1 << 6) & 0x7C0) | (b2 & 0x3F);\n\n          if (chr < 0x80) {\n            result += '\\ufffd\\ufffd';\n          } else {\n            result += String.fromCharCode(chr);\n          }\n\n          i += 3;\n          continue;\n        }\n      }\n\n      if ((b1 & 0xF0) === 0xE0 && (i + 6 < l)) {\n        // 1110xxxx 10xxxxxx 10xxxxxx\n        b2 = parseInt(seq.slice(i + 4, i + 6), 16);\n        b3 = parseInt(seq.slice(i + 7, i + 9), 16);\n\n        if ((b2 & 0xC0) === 0x80 && (b3 & 0xC0) === 0x80) {\n          chr = ((b1 << 12) & 0xF000) | ((b2 << 6) & 0xFC0) | (b3 & 0x3F);\n\n          if (chr < 0x800 || (chr >= 0xD800 && chr <= 0xDFFF)) {\n            result += '\\ufffd\\ufffd\\ufffd';\n          } else {\n            result += String.fromCharCode(chr);\n          }\n\n          i += 6;\n          continue;\n        }\n      }\n\n      if ((b1 & 0xF8) === 0xF0 && (i + 9 < l)) {\n        // 111110xx 10xxxxxx 10xxxxxx 10xxxxxx\n        b2 = parseInt(seq.slice(i + 4, i + 6), 16);\n        b3 = parseInt(seq.slice(i + 7, i + 9), 16);\n        b4 = parseInt(seq.slice(i + 10, i + 12), 16);\n\n        if ((b2 & 0xC0) === 0x80 && (b3 & 0xC0) === 0x80 && (b4 & 0xC0) === 0x80) {\n          chr = ((b1 << 18) & 0x1C0000) | ((b2 << 12) & 0x3F000) | ((b3 << 6) & 0xFC0) | (b4 & 0x3F);\n\n          if (chr < 0x10000 || chr > 0x10FFFF) {\n            result += '\\ufffd\\ufffd\\ufffd\\ufffd';\n          } else {\n            chr -= 0x10000;\n            result += String.fromCharCode(0xD800 + (chr >> 10), 0xDC00 + (chr & 0x3FF));\n          }\n\n          i += 9;\n          continue;\n        }\n      }\n\n      result += '\\ufffd';\n    }\n\n    return result;\n  });\n}\n\n\ndecode.defaultChars   = ';/?:@&=+$,#';\ndecode.componentChars = '';\n\n\nmodule.exports = decode;\n","\n'use strict';\n\n\nmodule.exports = function format(url) {\n  var result = '';\n\n  result += url.protocol || '';\n  result += url.slashes ? '//' : '';\n  result += url.auth ? url.auth + '@' : '';\n\n  if (url.hostname && url.hostname.indexOf(':') !== -1) {\n    // ipv6 address\n    result += '[' + url.hostname + ']';\n  } else {\n    result += url.hostname || '';\n  }\n\n  result += url.port ? ':' + url.port : '';\n  result += url.pathname || '';\n  result += url.search || '';\n  result += url.hash || '';\n\n  return result;\n};\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\n//\n// Changes from joyent/node:\n//\n// 1. No leading slash in paths,\n//    e.g. in `url.parse('http://foo?bar')` pathname is ``, not `/`\n//\n// 2. Backslashes are not replaced with slashes,\n//    so `http:\\\\example.org\\` is treated like a relative path\n//\n// 3. Trailing colon is treated like a part of the path,\n//    i.e. in `http://example.org:foo` pathname is `:foo`\n//\n// 4. Nothing is URL-encoded in the resulting object,\n//    (in joyent/node some chars in auth and paths are encoded)\n//\n// 5. `url.parse()` does not have `parseQueryString` argument\n//\n// 6. Removed extraneous result properties: `host`, `path`, `query`, etc.,\n//    which can be constructed using other parts of the url.\n//\n\n\nfunction Url() {\n  this.protocol = null;\n  this.slashes = null;\n  this.auth = null;\n  this.port = null;\n  this.hostname = null;\n  this.hash = null;\n  this.search = null;\n  this.pathname = null;\n}\n\n// Reference: RFC 3986, RFC 1808, RFC 2396\n\n// define these here so at least they only have to be\n// compiled once on the first module load.\nvar protocolPattern = /^([a-z0-9.+-]+:)/i,\n    portPattern = /:[0-9]*$/,\n\n    // Special case for a simple path URL\n    simplePathPattern = /^(\\/\\/?(?!\\/)[^\\?\\s]*)(\\?[^\\s]*)?$/,\n\n    // RFC 2396: characters reserved for delimiting URLs.\n    // We actually just auto-escape these.\n    delims = [ '<', '>', '\"', '`', ' ', '\\r', '\\n', '\\t' ],\n\n    // RFC 2396: characters not allowed for various reasons.\n    unwise = [ '{', '}', '|', '\\\\', '^', '`' ].concat(delims),\n\n    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.\n    autoEscape = [ '\\'' ].concat(unwise),\n    // Characters that are never ever allowed in a hostname.\n    // Note that any invalid chars are also handled, but these\n    // are the ones that are *expected* to be seen, so we fast-path\n    // them.\n    nonHostChars = [ '%', '/', '?', ';', '#' ].concat(autoEscape),\n    hostEndingChars = [ '/', '?', '#' ],\n    hostnameMaxLen = 255,\n    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,\n    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,\n    // protocols that can allow \"unsafe\" and \"unwise\" chars.\n    /* eslint-disable no-script-url */\n    // protocols that never have a hostname.\n    hostlessProtocol = {\n      'javascript': true,\n      'javascript:': true\n    },\n    // protocols that always contain a // bit.\n    slashedProtocol = {\n      'http': true,\n      'https': true,\n      'ftp': true,\n      'gopher': true,\n      'file': true,\n      'http:': true,\n      'https:': true,\n      'ftp:': true,\n      'gopher:': true,\n      'file:': true\n    };\n    /* eslint-enable no-script-url */\n\nfunction urlParse(url, slashesDenoteHost) {\n  if (url && url instanceof Url) { return url; }\n\n  var u = new Url();\n  u.parse(url, slashesDenoteHost);\n  return u;\n}\n\nUrl.prototype.parse = function(url, slashesDenoteHost) {\n  var i, l, lowerProto, hec, slashes,\n      rest = url;\n\n  // trim before proceeding.\n  // This is to support parse stuff like \"  http://foo.com  \\n\"\n  rest = rest.trim();\n\n  if (!slashesDenoteHost && url.split('#').length === 1) {\n    // Try fast path regexp\n    var simplePath = simplePathPattern.exec(rest);\n    if (simplePath) {\n      this.pathname = simplePath[1];\n      if (simplePath[2]) {\n        this.search = simplePath[2];\n      }\n      return this;\n    }\n  }\n\n  var proto = protocolPattern.exec(rest);\n  if (proto) {\n    proto = proto[0];\n    lowerProto = proto.toLowerCase();\n    this.protocol = proto;\n    rest = rest.substr(proto.length);\n  }\n\n  // figure out if it's got a host\n  // user@server is *always* interpreted as a hostname, and url\n  // resolution will treat //foo/bar as host=foo,path=bar because that's\n  // how the browser resolves relative URLs.\n  if (slashesDenoteHost || proto || rest.match(/^\\/\\/[^@\\/]+@[^@\\/]+/)) {\n    slashes = rest.substr(0, 2) === '//';\n    if (slashes && !(proto && hostlessProtocol[proto])) {\n      rest = rest.substr(2);\n      this.slashes = true;\n    }\n  }\n\n  if (!hostlessProtocol[proto] &&\n      (slashes || (proto && !slashedProtocol[proto]))) {\n\n    // there's a hostname.\n    // the first instance of /, ?, ;, or # ends the host.\n    //\n    // If there is an @ in the hostname, then non-host chars *are* allowed\n    // to the left of the last @ sign, unless some host-ending character\n    // comes *before* the @-sign.\n    // URLs are obnoxious.\n    //\n    // ex:\n    // http://a@b@c/ => user:a@b host:c\n    // http://a@b?@c => user:a host:c path:/?@c\n\n    // v0.12 TODO(isaacs): This is not quite how Chrome does things.\n    // Review our test case against browsers more comprehensively.\n\n    // find the first instance of any hostEndingChars\n    var hostEnd = -1;\n    for (i = 0; i < hostEndingChars.length; i++) {\n      hec = rest.indexOf(hostEndingChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) {\n        hostEnd = hec;\n      }\n    }\n\n    // at this point, either we have an explicit point where the\n    // auth portion cannot go past, or the last @ char is the decider.\n    var auth, atSign;\n    if (hostEnd === -1) {\n      // atSign can be anywhere.\n      atSign = rest.lastIndexOf('@');\n    } else {\n      // atSign must be in auth portion.\n      // http://a@b/c@d => host:b auth:a path:/c@d\n      atSign = rest.lastIndexOf('@', hostEnd);\n    }\n\n    // Now we have a portion which is definitely the auth.\n    // Pull that off.\n    if (atSign !== -1) {\n      auth = rest.slice(0, atSign);\n      rest = rest.slice(atSign + 1);\n      this.auth = auth;\n    }\n\n    // the host is the remaining to the left of the first non-host char\n    hostEnd = -1;\n    for (i = 0; i < nonHostChars.length; i++) {\n      hec = rest.indexOf(nonHostChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) {\n        hostEnd = hec;\n      }\n    }\n    // if we still have not hit it, then the entire thing is a host.\n    if (hostEnd === -1) {\n      hostEnd = rest.length;\n    }\n\n    if (rest[hostEnd - 1] === ':') { hostEnd--; }\n    var host = rest.slice(0, hostEnd);\n    rest = rest.slice(hostEnd);\n\n    // pull out port.\n    this.parseHost(host);\n\n    // we've indicated that there is a hostname,\n    // so even if it's empty, it has to be present.\n    this.hostname = this.hostname || '';\n\n    // if hostname begins with [ and ends with ]\n    // assume that it's an IPv6 address.\n    var ipv6Hostname = this.hostname[0] === '[' &&\n        this.hostname[this.hostname.length - 1] === ']';\n\n    // validate a little.\n    if (!ipv6Hostname) {\n      var hostparts = this.hostname.split(/\\./);\n      for (i = 0, l = hostparts.length; i < l; i++) {\n        var part = hostparts[i];\n        if (!part) { continue; }\n        if (!part.match(hostnamePartPattern)) {\n          var newpart = '';\n          for (var j = 0, k = part.length; j < k; j++) {\n            if (part.charCodeAt(j) > 127) {\n              // we replace non-ASCII char with a temporary placeholder\n              // we need this to make sure size of hostname is not\n              // broken by replacing non-ASCII by nothing\n              newpart += 'x';\n            } else {\n              newpart += part[j];\n            }\n          }\n          // we test again with ASCII char only\n          if (!newpart.match(hostnamePartPattern)) {\n            var validParts = hostparts.slice(0, i);\n            var notHost = hostparts.slice(i + 1);\n            var bit = part.match(hostnamePartStart);\n            if (bit) {\n              validParts.push(bit[1]);\n              notHost.unshift(bit[2]);\n            }\n            if (notHost.length) {\n              rest = notHost.join('.') + rest;\n            }\n            this.hostname = validParts.join('.');\n            break;\n          }\n        }\n      }\n    }\n\n    if (this.hostname.length > hostnameMaxLen) {\n      this.hostname = '';\n    }\n\n    // strip [ and ] from the hostname\n    // the host field still retains them, though\n    if (ipv6Hostname) {\n      this.hostname = this.hostname.substr(1, this.hostname.length - 2);\n    }\n  }\n\n  // chop off from the tail first.\n  var hash = rest.indexOf('#');\n  if (hash !== -1) {\n    // got a fragment string.\n    this.hash = rest.substr(hash);\n    rest = rest.slice(0, hash);\n  }\n  var qm = rest.indexOf('?');\n  if (qm !== -1) {\n    this.search = rest.substr(qm);\n    rest = rest.slice(0, qm);\n  }\n  if (rest) { this.pathname = rest; }\n  if (slashedProtocol[lowerProto] &&\n      this.hostname && !this.pathname) {\n    this.pathname = '';\n  }\n\n  return this;\n};\n\nUrl.prototype.parseHost = function(host) {\n  var port = portPattern.exec(host);\n  if (port) {\n    port = port[0];\n    if (port !== ':') {\n      this.port = port.substr(1);\n    }\n    host = host.substr(0, host.length - port.length);\n  }\n  if (host) { this.hostname = host; }\n};\n\nmodule.exports = urlParse;\n","'use strict';\n\nexports.Any = require('./properties/Any/regex');\nexports.Cc  = require('./categories/Cc/regex');\nexports.Cf  = require('./categories/Cf/regex');\nexports.P   = require('./categories/P/regex');\nexports.Z   = require('./categories/Z/regex');\n","module.exports=/[\\0-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/","module.exports=/[\\0-\\x1F\\x7F-\\x9F]/","module.exports=/[\\xAD\\u0600-\\u0605\\u061C\\u06DD\\u070F\\u08E2\\u180E\\u200B-\\u200F\\u202A-\\u202E\\u2060-\\u2064\\u2066-\\u206F\\uFEFF\\uFFF9-\\uFFFB]|\\uD804[\\uDCBD\\uDCCD]|\\uD82F[\\uDCA0-\\uDCA3]|\\uD834[\\uDD73-\\uDD7A]|\\uDB40[\\uDC01\\uDC20-\\uDC7F]/","module.exports=/[ \\xA0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000]/","// Just a shortcut for bulk export\n'use strict';\n\n\nexports.parseLinkLabel       = require('./parse_link_label');\nexports.parseLinkDestination = require('./parse_link_destination');\nexports.parseLinkTitle       = require('./parse_link_title');\n","// Parse link label\n//\n// this function assumes that first character (\"[\") already matches;\n// returns the end of the label\n//\n'use strict';\n\nmodule.exports = function parseLinkLabel(state, start, disableNested) {\n  var level, found, marker, prevPos,\n      labelEnd = -1,\n      max = state.posMax,\n      oldPos = state.pos;\n\n  state.pos = start + 1;\n  level = 1;\n\n  while (state.pos < max) {\n    marker = state.src.charCodeAt(state.pos);\n    if (marker === 0x5D /* ] */) {\n      level--;\n      if (level === 0) {\n        found = true;\n        break;\n      }\n    }\n\n    prevPos = state.pos;\n    state.md.inline.skipToken(state);\n    if (marker === 0x5B /* [ */) {\n      if (prevPos === state.pos - 1) {\n        // increase level if we find text `[`, which is not a part of any token\n        level++;\n      } else if (disableNested) {\n        state.pos = oldPos;\n        return -1;\n      }\n    }\n  }\n\n  if (found) {\n    labelEnd = state.pos;\n  }\n\n  // restore old state\n  state.pos = oldPos;\n\n  return labelEnd;\n};\n","// Parse link destination\n//\n'use strict';\n\n\nvar unescapeAll = require('../common/utils').unescapeAll;\n\n\nmodule.exports = function parseLinkDestination(str, pos, max) {\n  var code, level,\n      lines = 0,\n      start = pos,\n      result = {\n        ok: false,\n        pos: 0,\n        lines: 0,\n        str: ''\n      };\n\n  if (str.charCodeAt(pos) === 0x3C /* < */) {\n    pos++;\n    while (pos < max) {\n      code = str.charCodeAt(pos);\n      if (code === 0x0A /* \\n */) { return result; }\n      if (code === 0x3C /* < */) { return result; }\n      if (code === 0x3E /* > */) {\n        result.pos = pos + 1;\n        result.str = unescapeAll(str.slice(start + 1, pos));\n        result.ok = true;\n        return result;\n      }\n      if (code === 0x5C /* \\ */ && pos + 1 < max) {\n        pos += 2;\n        continue;\n      }\n\n      pos++;\n    }\n\n    // no closing '>'\n    return result;\n  }\n\n  // this should be ... } else { ... branch\n\n  level = 0;\n  while (pos < max) {\n    code = str.charCodeAt(pos);\n\n    if (code === 0x20) { break; }\n\n    // ascii control characters\n    if (code < 0x20 || code === 0x7F) { break; }\n\n    if (code === 0x5C /* \\ */ && pos + 1 < max) {\n      if (str.charCodeAt(pos + 1) === 0x20) { break; }\n      pos += 2;\n      continue;\n    }\n\n    if (code === 0x28 /* ( */) {\n      level++;\n      if (level > 32) { return result; }\n    }\n\n    if (code === 0x29 /* ) */) {\n      if (level === 0) { break; }\n      level--;\n    }\n\n    pos++;\n  }\n\n  if (start === pos) { return result; }\n  if (level !== 0) { return result; }\n\n  result.str = unescapeAll(str.slice(start, pos));\n  result.lines = lines;\n  result.pos = pos;\n  result.ok = true;\n  return result;\n};\n","// Parse link title\n//\n'use strict';\n\n\nvar unescapeAll = require('../common/utils').unescapeAll;\n\n\nmodule.exports = function parseLinkTitle(str, pos, max) {\n  var code,\n      marker,\n      lines = 0,\n      start = pos,\n      result = {\n        ok: false,\n        pos: 0,\n        lines: 0,\n        str: ''\n      };\n\n  if (pos >= max) { return result; }\n\n  marker = str.charCodeAt(pos);\n\n  if (marker !== 0x22 /* \" */ && marker !== 0x27 /* ' */ && marker !== 0x28 /* ( */) { return result; }\n\n  pos++;\n\n  // if opening marker is \"(\", switch it to closing marker \")\"\n  if (marker === 0x28) { marker = 0x29; }\n\n  while (pos < max) {\n    code = str.charCodeAt(pos);\n    if (code === marker) {\n      result.pos = pos + 1;\n      result.lines = lines;\n      result.str = unescapeAll(str.slice(start + 1, pos));\n      result.ok = true;\n      return result;\n    } else if (code === 0x28 /* ( */ && marker === 0x29 /* ) */) {\n      return result;\n    } else if (code === 0x0A) {\n      lines++;\n    } else if (code === 0x5C /* \\ */ && pos + 1 < max) {\n      pos++;\n      if (str.charCodeAt(pos) === 0x0A) {\n        lines++;\n      }\n    }\n\n    pos++;\n  }\n\n  return result;\n};\n","/**\n * class Renderer\n *\n * Generates HTML from parsed token stream. Each instance has independent\n * copy of rules. Those can be rewritten with ease. Also, you can add new\n * rules if you create plugin and adds new token types.\n **/\n'use strict';\n\n\nvar assign          = require('./common/utils').assign;\nvar unescapeAll     = require('./common/utils').unescapeAll;\nvar escapeHtml      = require('./common/utils').escapeHtml;\n\n\n////////////////////////////////////////////////////////////////////////////////\n\nvar default_rules = {};\n\n\ndefault_rules.code_inline = function (tokens, idx, options, env, slf) {\n  var token = tokens[idx];\n\n  return  '<code' + slf.renderAttrs(token) + '>' +\n          escapeHtml(tokens[idx].content) +\n          '</code>';\n};\n\n\ndefault_rules.code_block = function (tokens, idx, options, env, slf) {\n  var token = tokens[idx];\n\n  return  '<pre' + slf.renderAttrs(token) + '><code>' +\n          escapeHtml(tokens[idx].content) +\n          '</code></pre>\\n';\n};\n\n\ndefault_rules.fence = function (tokens, idx, options, env, slf) {\n  var token = tokens[idx],\n      info = token.info ? unescapeAll(token.info).trim() : '',\n      langName = '',\n      langAttrs = '',\n      highlighted, i, arr, tmpAttrs, tmpToken;\n\n  if (info) {\n    arr = info.split(/(\\s+)/g);\n    langName = arr[0];\n    langAttrs = arr.slice(2).join('');\n  }\n\n  if (options.highlight) {\n    highlighted = options.highlight(token.content, langName, langAttrs) || escapeHtml(token.content);\n  } else {\n    highlighted = escapeHtml(token.content);\n  }\n\n  if (highlighted.indexOf('<pre') === 0) {\n    return highlighted + '\\n';\n  }\n\n  // If language exists, inject class gently, without modifying original token.\n  // May be, one day we will add .deepClone() for token and simplify this part, but\n  // now we prefer to keep things local.\n  if (info) {\n    i        = token.attrIndex('class');\n    tmpAttrs = token.attrs ? token.attrs.slice() : [];\n\n    if (i < 0) {\n      tmpAttrs.push([ 'class', options.langPrefix + langName ]);\n    } else {\n      tmpAttrs[i] = tmpAttrs[i].slice();\n      tmpAttrs[i][1] += ' ' + options.langPrefix + langName;\n    }\n\n    // Fake token just to render attributes\n    tmpToken = {\n      attrs: tmpAttrs\n    };\n\n    return  '<pre><code' + slf.renderAttrs(tmpToken) + '>'\n          + highlighted\n          + '</code></pre>\\n';\n  }\n\n\n  return  '<pre><code' + slf.renderAttrs(token) + '>'\n        + highlighted\n        + '</code></pre>\\n';\n};\n\n\ndefault_rules.image = function (tokens, idx, options, env, slf) {\n  var token = tokens[idx];\n\n  // \"alt\" attr MUST be set, even if empty. Because it's mandatory and\n  // should be placed on proper position for tests.\n  //\n  // Replace content with actual value\n\n  token.attrs[token.attrIndex('alt')][1] =\n    slf.renderInlineAsText(token.children, options, env);\n\n  return slf.renderToken(tokens, idx, options);\n};\n\n\ndefault_rules.hardbreak = function (tokens, idx, options /*, env */) {\n  return options.xhtmlOut ? '<br />\\n' : '<br>\\n';\n};\ndefault_rules.softbreak = function (tokens, idx, options /*, env */) {\n  return options.breaks ? (options.xhtmlOut ? '<br />\\n' : '<br>\\n') : '\\n';\n};\n\n\ndefault_rules.text = function (tokens, idx /*, options, env */) {\n  return escapeHtml(tokens[idx].content);\n};\n\n\ndefault_rules.html_block = function (tokens, idx /*, options, env */) {\n  return tokens[idx].content;\n};\ndefault_rules.html_inline = function (tokens, idx /*, options, env */) {\n  return tokens[idx].content;\n};\n\n\n/**\n * new Renderer()\n *\n * Creates new [[Renderer]] instance and fill [[Renderer#rules]] with defaults.\n **/\nfunction Renderer() {\n\n  /**\n   * Renderer#rules -> Object\n   *\n   * Contains render rules for tokens. Can be updated and extended.\n   *\n   * ##### Example\n   *\n   * ```javascript\n   * var md = require('markdown-it')();\n   *\n   * md.renderer.rules.strong_open  = function () { return '<b>'; };\n   * md.renderer.rules.strong_close = function () { return '</b>'; };\n   *\n   * var result = md.renderInline(...);\n   * ```\n   *\n   * Each rule is called as independent static function with fixed signature:\n   *\n   * ```javascript\n   * function my_token_render(tokens, idx, options, env, renderer) {\n   *   // ...\n   *   return renderedHTML;\n   * }\n   * ```\n   *\n   * See [source code](https://github.com/markdown-it/markdown-it/blob/master/lib/renderer.js)\n   * for more details and examples.\n   **/\n  this.rules = assign({}, default_rules);\n}\n\n\n/**\n * Renderer.renderAttrs(token) -> String\n *\n * Render token attributes to string.\n **/\nRenderer.prototype.renderAttrs = function renderAttrs(token) {\n  var i, l, result;\n\n  if (!token.attrs) { return ''; }\n\n  result = '';\n\n  for (i = 0, l = token.attrs.length; i < l; i++) {\n    result += ' ' + escapeHtml(token.attrs[i][0]) + '=\"' + escapeHtml(token.attrs[i][1]) + '\"';\n  }\n\n  return result;\n};\n\n\n/**\n * Renderer.renderToken(tokens, idx, options) -> String\n * - tokens (Array): list of tokens\n * - idx (Numbed): token index to render\n * - options (Object): params of parser instance\n *\n * Default token renderer. Can be overriden by custom function\n * in [[Renderer#rules]].\n **/\nRenderer.prototype.renderToken = function renderToken(tokens, idx, options) {\n  var nextToken,\n      result = '',\n      needLf = false,\n      token = tokens[idx];\n\n  // Tight list paragraphs\n  if (token.hidden) {\n    return '';\n  }\n\n  // Insert a newline between hidden paragraph and subsequent opening\n  // block-level tag.\n  //\n  // For example, here we should insert a newline before blockquote:\n  //  - a\n  //    >\n  //\n  if (token.block && token.nesting !== -1 && idx && tokens[idx - 1].hidden) {\n    result += '\\n';\n  }\n\n  // Add token name, e.g. `<img`\n  result += (token.nesting === -1 ? '</' : '<') + token.tag;\n\n  // Encode attributes, e.g. `<img src=\"foo\"`\n  result += this.renderAttrs(token);\n\n  // Add a slash for self-closing tags, e.g. `<img src=\"foo\" /`\n  if (token.nesting === 0 && options.xhtmlOut) {\n    result += ' /';\n  }\n\n  // Check if we need to add a newline after this tag\n  if (token.block) {\n    needLf = true;\n\n    if (token.nesting === 1) {\n      if (idx + 1 < tokens.length) {\n        nextToken = tokens[idx + 1];\n\n        if (nextToken.type === 'inline' || nextToken.hidden) {\n          // Block-level tag containing an inline tag.\n          //\n          needLf = false;\n\n        } else if (nextToken.nesting === -1 && nextToken.tag === token.tag) {\n          // Opening tag + closing tag of the same type. E.g. `<li></li>`.\n          //\n          needLf = false;\n        }\n      }\n    }\n  }\n\n  result += needLf ? '>\\n' : '>';\n\n  return result;\n};\n\n\n/**\n * Renderer.renderInline(tokens, options, env) -> String\n * - tokens (Array): list on block tokens to renter\n * - options (Object): params of parser instance\n * - env (Object): additional data from parsed input (references, for example)\n *\n * The same as [[Renderer.render]], but for single token of `inline` type.\n **/\nRenderer.prototype.renderInline = function (tokens, options, env) {\n  var type,\n      result = '',\n      rules = this.rules;\n\n  for (var i = 0, len = tokens.length; i < len; i++) {\n    type = tokens[i].type;\n\n    if (typeof rules[type] !== 'undefined') {\n      result += rules[type](tokens, i, options, env, this);\n    } else {\n      result += this.renderToken(tokens, i, options);\n    }\n  }\n\n  return result;\n};\n\n\n/** internal\n * Renderer.renderInlineAsText(tokens, options, env) -> String\n * - tokens (Array): list on block tokens to renter\n * - options (Object): params of parser instance\n * - env (Object): additional data from parsed input (references, for example)\n *\n * Special kludge for image `alt` attributes to conform CommonMark spec.\n * Don't try to use it! Spec requires to show `alt` content with stripped markup,\n * instead of simple escaping.\n **/\nRenderer.prototype.renderInlineAsText = function (tokens, options, env) {\n  var result = '';\n\n  for (var i = 0, len = tokens.length; i < len; i++) {\n    if (tokens[i].type === 'text') {\n      result += tokens[i].content;\n    } else if (tokens[i].type === 'image') {\n      result += this.renderInlineAsText(tokens[i].children, options, env);\n    } else if (tokens[i].type === 'softbreak') {\n      result += '\\n';\n    }\n  }\n\n  return result;\n};\n\n\n/**\n * Renderer.render(tokens, options, env) -> String\n * - tokens (Array): list on block tokens to renter\n * - options (Object): params of parser instance\n * - env (Object): additional data from parsed input (references, for example)\n *\n * Takes token stream and generates HTML. Probably, you will never need to call\n * this method directly.\n **/\nRenderer.prototype.render = function (tokens, options, env) {\n  var i, len, type,\n      result = '',\n      rules = this.rules;\n\n  for (i = 0, len = tokens.length; i < len; i++) {\n    type = tokens[i].type;\n\n    if (type === 'inline') {\n      result += this.renderInline(tokens[i].children, options, env);\n    } else if (typeof rules[type] !== 'undefined') {\n      result += rules[tokens[i].type](tokens, i, options, env, this);\n    } else {\n      result += this.renderToken(tokens, i, options, env);\n    }\n  }\n\n  return result;\n};\n\nmodule.exports = Renderer;\n","/** internal\n * class Core\n *\n * Top-level rules executor. Glues block/inline parsers and does intermediate\n * transformations.\n **/\n'use strict';\n\n\nvar Ruler  = require('./ruler');\n\n\nvar _rules = [\n  [ 'normalize',      require('./rules_core/normalize')      ],\n  [ 'block',          require('./rules_core/block')          ],\n  [ 'inline',         require('./rules_core/inline')         ],\n  [ 'linkify',        require('./rules_core/linkify')        ],\n  [ 'replacements',   require('./rules_core/replacements')   ],\n  [ 'smartquotes',    require('./rules_core/smartquotes')    ]\n];\n\n\n/**\n * new Core()\n **/\nfunction Core() {\n  /**\n   * Core#ruler -> Ruler\n   *\n   * [[Ruler]] instance. Keep configuration of core rules.\n   **/\n  this.ruler = new Ruler();\n\n  for (var i = 0; i < _rules.length; i++) {\n    this.ruler.push(_rules[i][0], _rules[i][1]);\n  }\n}\n\n\n/**\n * Core.process(state)\n *\n * Executes core chain rules.\n **/\nCore.prototype.process = function (state) {\n  var i, l, rules;\n\n  rules = this.ruler.getRules('');\n\n  for (i = 0, l = rules.length; i < l; i++) {\n    rules[i](state);\n  }\n};\n\nCore.prototype.State = require('./rules_core/state_core');\n\n\nmodule.exports = Core;\n","/**\n * class Ruler\n *\n * Helper class, used by [[MarkdownIt#core]], [[MarkdownIt#block]] and\n * [[MarkdownIt#inline]] to manage sequences of functions (rules):\n *\n * - keep rules in defined order\n * - assign the name to each rule\n * - enable/disable rules\n * - add/replace rules\n * - allow assign rules to additional named chains (in the same)\n * - cacheing lists of active rules\n *\n * You will not need use this class directly until write plugins. For simple\n * rules control use [[MarkdownIt.disable]], [[MarkdownIt.enable]] and\n * [[MarkdownIt.use]].\n **/\n'use strict';\n\n\n/**\n * new Ruler()\n **/\nfunction Ruler() {\n  // List of added rules. Each element is:\n  //\n  // {\n  //   name: XXX,\n  //   enabled: Boolean,\n  //   fn: Function(),\n  //   alt: [ name2, name3 ]\n  // }\n  //\n  this.__rules__ = [];\n\n  // Cached rule chains.\n  //\n  // First level - chain name, '' for default.\n  // Second level - diginal anchor for fast filtering by charcodes.\n  //\n  this.__cache__ = null;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// Helper methods, should not be used directly\n\n\n// Find rule index by name\n//\nRuler.prototype.__find__ = function (name) {\n  for (var i = 0; i < this.__rules__.length; i++) {\n    if (this.__rules__[i].name === name) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n\n// Build rules lookup cache\n//\nRuler.prototype.__compile__ = function () {\n  var self = this;\n  var chains = [ '' ];\n\n  // collect unique names\n  self.__rules__.forEach(function (rule) {\n    if (!rule.enabled) { return; }\n\n    rule.alt.forEach(function (altName) {\n      if (chains.indexOf(altName) < 0) {\n        chains.push(altName);\n      }\n    });\n  });\n\n  self.__cache__ = {};\n\n  chains.forEach(function (chain) {\n    self.__cache__[chain] = [];\n    self.__rules__.forEach(function (rule) {\n      if (!rule.enabled) { return; }\n\n      if (chain && rule.alt.indexOf(chain) < 0) { return; }\n\n      self.__cache__[chain].push(rule.fn);\n    });\n  });\n};\n\n\n/**\n * Ruler.at(name, fn [, options])\n * - name (String): rule name to replace.\n * - fn (Function): new rule function.\n * - options (Object): new rule options (not mandatory).\n *\n * Replace rule by name with new function & options. Throws error if name not\n * found.\n *\n * ##### Options:\n *\n * - __alt__ - array with names of \"alternate\" chains.\n *\n * ##### Example\n *\n * Replace existing typographer replacement rule with new one:\n *\n * ```javascript\n * var md = require('markdown-it')();\n *\n * md.core.ruler.at('replacements', function replace(state) {\n *   //...\n * });\n * ```\n **/\nRuler.prototype.at = function (name, fn, options) {\n  var index = this.__find__(name);\n  var opt = options || {};\n\n  if (index === -1) { throw new Error('Parser rule not found: ' + name); }\n\n  this.__rules__[index].fn = fn;\n  this.__rules__[index].alt = opt.alt || [];\n  this.__cache__ = null;\n};\n\n\n/**\n * Ruler.before(beforeName, ruleName, fn [, options])\n * - beforeName (String): new rule will be added before this one.\n * - ruleName (String): name of added rule.\n * - fn (Function): rule function.\n * - options (Object): rule options (not mandatory).\n *\n * Add new rule to chain before one with given name. See also\n * [[Ruler.after]], [[Ruler.push]].\n *\n * ##### Options:\n *\n * - __alt__ - array with names of \"alternate\" chains.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')();\n *\n * md.block.ruler.before('paragraph', 'my_rule', function replace(state) {\n *   //...\n * });\n * ```\n **/\nRuler.prototype.before = function (beforeName, ruleName, fn, options) {\n  var index = this.__find__(beforeName);\n  var opt = options || {};\n\n  if (index === -1) { throw new Error('Parser rule not found: ' + beforeName); }\n\n  this.__rules__.splice(index, 0, {\n    name: ruleName,\n    enabled: true,\n    fn: fn,\n    alt: opt.alt || []\n  });\n\n  this.__cache__ = null;\n};\n\n\n/**\n * Ruler.after(afterName, ruleName, fn [, options])\n * - afterName (String): new rule will be added after this one.\n * - ruleName (String): name of added rule.\n * - fn (Function): rule function.\n * - options (Object): rule options (not mandatory).\n *\n * Add new rule to chain after one with given name. See also\n * [[Ruler.before]], [[Ruler.push]].\n *\n * ##### Options:\n *\n * - __alt__ - array with names of \"alternate\" chains.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')();\n *\n * md.inline.ruler.after('text', 'my_rule', function replace(state) {\n *   //...\n * });\n * ```\n **/\nRuler.prototype.after = function (afterName, ruleName, fn, options) {\n  var index = this.__find__(afterName);\n  var opt = options || {};\n\n  if (index === -1) { throw new Error('Parser rule not found: ' + afterName); }\n\n  this.__rules__.splice(index + 1, 0, {\n    name: ruleName,\n    enabled: true,\n    fn: fn,\n    alt: opt.alt || []\n  });\n\n  this.__cache__ = null;\n};\n\n/**\n * Ruler.push(ruleName, fn [, options])\n * - ruleName (String): name of added rule.\n * - fn (Function): rule function.\n * - options (Object): rule options (not mandatory).\n *\n * Push new rule to the end of chain. See also\n * [[Ruler.before]], [[Ruler.after]].\n *\n * ##### Options:\n *\n * - __alt__ - array with names of \"alternate\" chains.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')();\n *\n * md.core.ruler.push('my_rule', function replace(state) {\n *   //...\n * });\n * ```\n **/\nRuler.prototype.push = function (ruleName, fn, options) {\n  var opt = options || {};\n\n  this.__rules__.push({\n    name: ruleName,\n    enabled: true,\n    fn: fn,\n    alt: opt.alt || []\n  });\n\n  this.__cache__ = null;\n};\n\n\n/**\n * Ruler.enable(list [, ignoreInvalid]) -> Array\n * - list (String|Array): list of rule names to enable.\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * Enable rules with given names. If any rule name not found - throw Error.\n * Errors can be disabled by second param.\n *\n * Returns list of found rule names (if no exception happened).\n *\n * See also [[Ruler.disable]], [[Ruler.enableOnly]].\n **/\nRuler.prototype.enable = function (list, ignoreInvalid) {\n  if (!Array.isArray(list)) { list = [ list ]; }\n\n  var result = [];\n\n  // Search by name and enable\n  list.forEach(function (name) {\n    var idx = this.__find__(name);\n\n    if (idx < 0) {\n      if (ignoreInvalid) { return; }\n      throw new Error('Rules manager: invalid rule name ' + name);\n    }\n    this.__rules__[idx].enabled = true;\n    result.push(name);\n  }, this);\n\n  this.__cache__ = null;\n  return result;\n};\n\n\n/**\n * Ruler.enableOnly(list [, ignoreInvalid])\n * - list (String|Array): list of rule names to enable (whitelist).\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * Enable rules with given names, and disable everything else. If any rule name\n * not found - throw Error. Errors can be disabled by second param.\n *\n * See also [[Ruler.disable]], [[Ruler.enable]].\n **/\nRuler.prototype.enableOnly = function (list, ignoreInvalid) {\n  if (!Array.isArray(list)) { list = [ list ]; }\n\n  this.__rules__.forEach(function (rule) { rule.enabled = false; });\n\n  this.enable(list, ignoreInvalid);\n};\n\n\n/**\n * Ruler.disable(list [, ignoreInvalid]) -> Array\n * - list (String|Array): list of rule names to disable.\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * Disable rules with given names. If any rule name not found - throw Error.\n * Errors can be disabled by second param.\n *\n * Returns list of found rule names (if no exception happened).\n *\n * See also [[Ruler.enable]], [[Ruler.enableOnly]].\n **/\nRuler.prototype.disable = function (list, ignoreInvalid) {\n  if (!Array.isArray(list)) { list = [ list ]; }\n\n  var result = [];\n\n  // Search by name and disable\n  list.forEach(function (name) {\n    var idx = this.__find__(name);\n\n    if (idx < 0) {\n      if (ignoreInvalid) { return; }\n      throw new Error('Rules manager: invalid rule name ' + name);\n    }\n    this.__rules__[idx].enabled = false;\n    result.push(name);\n  }, this);\n\n  this.__cache__ = null;\n  return result;\n};\n\n\n/**\n * Ruler.getRules(chainName) -> Array\n *\n * Return array of active functions (rules) for given chain name. It analyzes\n * rules configuration, compiles caches if not exists and returns result.\n *\n * Default chain name is `''` (empty string). It can't be skipped. That's\n * done intentionally, to keep signature monomorphic for high speed.\n **/\nRuler.prototype.getRules = function (chainName) {\n  if (this.__cache__ === null) {\n    this.__compile__();\n  }\n\n  // Chain can be empty, if rules disabled. But we still have to return Array.\n  return this.__cache__[chainName] || [];\n};\n\nmodule.exports = Ruler;\n","// Normalize input string\n\n'use strict';\n\n\n// https://spec.commonmark.org/0.29/#line-ending\nvar NEWLINES_RE  = /\\r\\n?|\\n/g;\nvar NULL_RE      = /\\0/g;\n\n\nmodule.exports = function normalize(state) {\n  var str;\n\n  // Normalize newlines\n  str = state.src.replace(NEWLINES_RE, '\\n');\n\n  // Replace NULL characters\n  str = str.replace(NULL_RE, '\\uFFFD');\n\n  state.src = str;\n};\n","'use strict';\n\n\nmodule.exports = function block(state) {\n  var token;\n\n  if (state.inlineMode) {\n    token          = new state.Token('inline', '', 0);\n    token.content  = state.src;\n    token.map      = [ 0, 1 ];\n    token.children = [];\n    state.tokens.push(token);\n  } else {\n    state.md.block.parse(state.src, state.md, state.env, state.tokens);\n  }\n};\n","'use strict';\n\nmodule.exports = function inline(state) {\n  var tokens = state.tokens, tok, i, l;\n\n  // Parse inlines\n  for (i = 0, l = tokens.length; i < l; i++) {\n    tok = tokens[i];\n    if (tok.type === 'inline') {\n      state.md.inline.parse(tok.content, state.md, state.env, tok.children);\n    }\n  }\n};\n","// Replace link-like texts with link nodes.\n//\n// Currently restricted by `md.validateLink()` to http/https/ftp\n//\n'use strict';\n\n\nvar arrayReplaceAt = require('../common/utils').arrayReplaceAt;\n\n\nfunction isLinkOpen(str) {\n  return /^<a[>\\s]/i.test(str);\n}\nfunction isLinkClose(str) {\n  return /^<\\/a\\s*>/i.test(str);\n}\n\n\nmodule.exports = function linkify(state) {\n  var i, j, l, tokens, token, currentToken, nodes, ln, text, pos, lastPos,\n      level, htmlLinkLevel, url, fullUrl, urlText,\n      blockTokens = state.tokens,\n      links;\n\n  if (!state.md.options.linkify) { return; }\n\n  for (j = 0, l = blockTokens.length; j < l; j++) {\n    if (blockTokens[j].type !== 'inline' ||\n        !state.md.linkify.pretest(blockTokens[j].content)) {\n      continue;\n    }\n\n    tokens = blockTokens[j].children;\n\n    htmlLinkLevel = 0;\n\n    // We scan from the end, to keep position when new tags added.\n    // Use reversed logic in links start/end match\n    for (i = tokens.length - 1; i >= 0; i--) {\n      currentToken = tokens[i];\n\n      // Skip content of markdown links\n      if (currentToken.type === 'link_close') {\n        i--;\n        while (tokens[i].level !== currentToken.level && tokens[i].type !== 'link_open') {\n          i--;\n        }\n        continue;\n      }\n\n      // Skip content of html tag links\n      if (currentToken.type === 'html_inline') {\n        if (isLinkOpen(currentToken.content) && htmlLinkLevel > 0) {\n          htmlLinkLevel--;\n        }\n        if (isLinkClose(currentToken.content)) {\n          htmlLinkLevel++;\n        }\n      }\n      if (htmlLinkLevel > 0) { continue; }\n\n      if (currentToken.type === 'text' && state.md.linkify.test(currentToken.content)) {\n\n        text = currentToken.content;\n        links = state.md.linkify.match(text);\n\n        // Now split string to nodes\n        nodes = [];\n        level = currentToken.level;\n        lastPos = 0;\n\n        for (ln = 0; ln < links.length; ln++) {\n\n          url = links[ln].url;\n          fullUrl = state.md.normalizeLink(url);\n          if (!state.md.validateLink(fullUrl)) { continue; }\n\n          urlText = links[ln].text;\n\n          // Linkifier might send raw hostnames like \"example.com\", where url\n          // starts with domain name. So we prepend http:// in those cases,\n          // and remove it afterwards.\n          //\n          if (!links[ln].schema) {\n            urlText = state.md.normalizeLinkText('http://' + urlText).replace(/^http:\\/\\//, '');\n          } else if (links[ln].schema === 'mailto:' && !/^mailto:/i.test(urlText)) {\n            urlText = state.md.normalizeLinkText('mailto:' + urlText).replace(/^mailto:/, '');\n          } else {\n            urlText = state.md.normalizeLinkText(urlText);\n          }\n\n          pos = links[ln].index;\n\n          if (pos > lastPos) {\n            token         = new state.Token('text', '', 0);\n            token.content = text.slice(lastPos, pos);\n            token.level   = level;\n            nodes.push(token);\n          }\n\n          token         = new state.Token('link_open', 'a', 1);\n          token.attrs   = [ [ 'href', fullUrl ] ];\n          token.level   = level++;\n          token.markup  = 'linkify';\n          token.info    = 'auto';\n          nodes.push(token);\n\n          token         = new state.Token('text', '', 0);\n          token.content = urlText;\n          token.level   = level;\n          nodes.push(token);\n\n          token         = new state.Token('link_close', 'a', -1);\n          token.level   = --level;\n          token.markup  = 'linkify';\n          token.info    = 'auto';\n          nodes.push(token);\n\n          lastPos = links[ln].lastIndex;\n        }\n        if (lastPos < text.length) {\n          token         = new state.Token('text', '', 0);\n          token.content = text.slice(lastPos);\n          token.level   = level;\n          nodes.push(token);\n        }\n\n        // replace current node\n        blockTokens[j].children = tokens = arrayReplaceAt(tokens, i, nodes);\n      }\n    }\n  }\n};\n","// Simple typographic replacements\n//\n// (c) (C) → ©\n// (tm) (TM) → ™\n// (r) (R) → ®\n// +- → ±\n// (p) (P) -> §\n// ... → … (also ?.... → ?.., !.... → !..)\n// ???????? → ???, !!!!! → !!!, `,,` → `,`\n// -- → &ndash;, --- → &mdash;\n//\n'use strict';\n\n// TODO:\n// - fractionals 1/2, 1/4, 3/4 -> ½, ¼, ¾\n// - miltiplication 2 x 4 -> 2 × 4\n\nvar RARE_RE = /\\+-|\\.\\.|\\?\\?\\?\\?|!!!!|,,|--/;\n\n// Workaround for phantomjs - need regex without /g flag,\n// or root check will fail every second time\nvar SCOPED_ABBR_TEST_RE = /\\((c|tm|r|p)\\)/i;\n\nvar SCOPED_ABBR_RE = /\\((c|tm|r|p)\\)/ig;\nvar SCOPED_ABBR = {\n  c: '©',\n  r: '®',\n  p: '§',\n  tm: '™'\n};\n\nfunction replaceFn(match, name) {\n  return SCOPED_ABBR[name.toLowerCase()];\n}\n\nfunction replace_scoped(inlineTokens) {\n  var i, token, inside_autolink = 0;\n\n  for (i = inlineTokens.length - 1; i >= 0; i--) {\n    token = inlineTokens[i];\n\n    if (token.type === 'text' && !inside_autolink) {\n      token.content = token.content.replace(SCOPED_ABBR_RE, replaceFn);\n    }\n\n    if (token.type === 'link_open' && token.info === 'auto') {\n      inside_autolink--;\n    }\n\n    if (token.type === 'link_close' && token.info === 'auto') {\n      inside_autolink++;\n    }\n  }\n}\n\nfunction replace_rare(inlineTokens) {\n  var i, token, inside_autolink = 0;\n\n  for (i = inlineTokens.length - 1; i >= 0; i--) {\n    token = inlineTokens[i];\n\n    if (token.type === 'text' && !inside_autolink) {\n      if (RARE_RE.test(token.content)) {\n        token.content = token.content\n          .replace(/\\+-/g, '±')\n          // .., ..., ....... -> …\n          // but ?..... & !..... -> ?.. & !..\n          .replace(/\\.{2,}/g, '…').replace(/([?!])…/g, '$1..')\n          .replace(/([?!]){4,}/g, '$1$1$1').replace(/,{2,}/g, ',')\n          // em-dash\n          .replace(/(^|[^-])---(?=[^-]|$)/mg, '$1\\u2014')\n          // en-dash\n          .replace(/(^|\\s)--(?=\\s|$)/mg, '$1\\u2013')\n          .replace(/(^|[^-\\s])--(?=[^-\\s]|$)/mg, '$1\\u2013');\n      }\n    }\n\n    if (token.type === 'link_open' && token.info === 'auto') {\n      inside_autolink--;\n    }\n\n    if (token.type === 'link_close' && token.info === 'auto') {\n      inside_autolink++;\n    }\n  }\n}\n\n\nmodule.exports = function replace(state) {\n  var blkIdx;\n\n  if (!state.md.options.typographer) { return; }\n\n  for (blkIdx = state.tokens.length - 1; blkIdx >= 0; blkIdx--) {\n\n    if (state.tokens[blkIdx].type !== 'inline') { continue; }\n\n    if (SCOPED_ABBR_TEST_RE.test(state.tokens[blkIdx].content)) {\n      replace_scoped(state.tokens[blkIdx].children);\n    }\n\n    if (RARE_RE.test(state.tokens[blkIdx].content)) {\n      replace_rare(state.tokens[blkIdx].children);\n    }\n\n  }\n};\n","// Convert straight quotation marks to typographic ones\n//\n'use strict';\n\n\nvar isWhiteSpace   = require('../common/utils').isWhiteSpace;\nvar isPunctChar    = require('../common/utils').isPunctChar;\nvar isMdAsciiPunct = require('../common/utils').isMdAsciiPunct;\n\nvar QUOTE_TEST_RE = /['\"]/;\nvar QUOTE_RE = /['\"]/g;\nvar APOSTROPHE = '\\u2019'; /* ’ */\n\n\nfunction replaceAt(str, index, ch) {\n  return str.substr(0, index) + ch + str.substr(index + 1);\n}\n\nfunction process_inlines(tokens, state) {\n  var i, token, text, t, pos, max, thisLevel, item, lastChar, nextChar,\n      isLastPunctChar, isNextPunctChar, isLastWhiteSpace, isNextWhiteSpace,\n      canOpen, canClose, j, isSingle, stack, openQuote, closeQuote;\n\n  stack = [];\n\n  for (i = 0; i < tokens.length; i++) {\n    token = tokens[i];\n\n    thisLevel = tokens[i].level;\n\n    for (j = stack.length - 1; j >= 0; j--) {\n      if (stack[j].level <= thisLevel) { break; }\n    }\n    stack.length = j + 1;\n\n    if (token.type !== 'text') { continue; }\n\n    text = token.content;\n    pos = 0;\n    max = text.length;\n\n    /*eslint no-labels:0,block-scoped-var:0*/\n    OUTER:\n    while (pos < max) {\n      QUOTE_RE.lastIndex = pos;\n      t = QUOTE_RE.exec(text);\n      if (!t) { break; }\n\n      canOpen = canClose = true;\n      pos = t.index + 1;\n      isSingle = (t[0] === \"'\");\n\n      // Find previous character,\n      // default to space if it's the beginning of the line\n      //\n      lastChar = 0x20;\n\n      if (t.index - 1 >= 0) {\n        lastChar = text.charCodeAt(t.index - 1);\n      } else {\n        for (j = i - 1; j >= 0; j--) {\n          if (tokens[j].type === 'softbreak' || tokens[j].type === 'hardbreak') break; // lastChar defaults to 0x20\n          if (!tokens[j].content) continue; // should skip all tokens except 'text', 'html_inline' or 'code_inline'\n\n          lastChar = tokens[j].content.charCodeAt(tokens[j].content.length - 1);\n          break;\n        }\n      }\n\n      // Find next character,\n      // default to space if it's the end of the line\n      //\n      nextChar = 0x20;\n\n      if (pos < max) {\n        nextChar = text.charCodeAt(pos);\n      } else {\n        for (j = i + 1; j < tokens.length; j++) {\n          if (tokens[j].type === 'softbreak' || tokens[j].type === 'hardbreak') break; // nextChar defaults to 0x20\n          if (!tokens[j].content) continue; // should skip all tokens except 'text', 'html_inline' or 'code_inline'\n\n          nextChar = tokens[j].content.charCodeAt(0);\n          break;\n        }\n      }\n\n      isLastPunctChar = isMdAsciiPunct(lastChar) || isPunctChar(String.fromCharCode(lastChar));\n      isNextPunctChar = isMdAsciiPunct(nextChar) || isPunctChar(String.fromCharCode(nextChar));\n\n      isLastWhiteSpace = isWhiteSpace(lastChar);\n      isNextWhiteSpace = isWhiteSpace(nextChar);\n\n      if (isNextWhiteSpace) {\n        canOpen = false;\n      } else if (isNextPunctChar) {\n        if (!(isLastWhiteSpace || isLastPunctChar)) {\n          canOpen = false;\n        }\n      }\n\n      if (isLastWhiteSpace) {\n        canClose = false;\n      } else if (isLastPunctChar) {\n        if (!(isNextWhiteSpace || isNextPunctChar)) {\n          canClose = false;\n        }\n      }\n\n      if (nextChar === 0x22 /* \" */ && t[0] === '\"') {\n        if (lastChar >= 0x30 /* 0 */ && lastChar <= 0x39 /* 9 */) {\n          // special case: 1\"\" - count first quote as an inch\n          canClose = canOpen = false;\n        }\n      }\n\n      if (canOpen && canClose) {\n        // Replace quotes in the middle of punctuation sequence, but not\n        // in the middle of the words, i.e.:\n        //\n        // 1. foo \" bar \" baz - not replaced\n        // 2. foo-\"-bar-\"-baz - replaced\n        // 3. foo\"bar\"baz     - not replaced\n        //\n        canOpen = isLastPunctChar;\n        canClose = isNextPunctChar;\n      }\n\n      if (!canOpen && !canClose) {\n        // middle of word\n        if (isSingle) {\n          token.content = replaceAt(token.content, t.index, APOSTROPHE);\n        }\n        continue;\n      }\n\n      if (canClose) {\n        // this could be a closing quote, rewind the stack to get a match\n        for (j = stack.length - 1; j >= 0; j--) {\n          item = stack[j];\n          if (stack[j].level < thisLevel) { break; }\n          if (item.single === isSingle && stack[j].level === thisLevel) {\n            item = stack[j];\n\n            if (isSingle) {\n              openQuote = state.md.options.quotes[2];\n              closeQuote = state.md.options.quotes[3];\n            } else {\n              openQuote = state.md.options.quotes[0];\n              closeQuote = state.md.options.quotes[1];\n            }\n\n            // replace token.content *before* tokens[item.token].content,\n            // because, if they are pointing at the same token, replaceAt\n            // could mess up indices when quote length != 1\n            token.content = replaceAt(token.content, t.index, closeQuote);\n            tokens[item.token].content = replaceAt(\n              tokens[item.token].content, item.pos, openQuote);\n\n            pos += closeQuote.length - 1;\n            if (item.token === i) { pos += openQuote.length - 1; }\n\n            text = token.content;\n            max = text.length;\n\n            stack.length = j;\n            continue OUTER;\n          }\n        }\n      }\n\n      if (canOpen) {\n        stack.push({\n          token: i,\n          pos: t.index,\n          single: isSingle,\n          level: thisLevel\n        });\n      } else if (canClose && isSingle) {\n        token.content = replaceAt(token.content, t.index, APOSTROPHE);\n      }\n    }\n  }\n}\n\n\nmodule.exports = function smartquotes(state) {\n  /*eslint max-depth:0*/\n  var blkIdx;\n\n  if (!state.md.options.typographer) { return; }\n\n  for (blkIdx = state.tokens.length - 1; blkIdx >= 0; blkIdx--) {\n\n    if (state.tokens[blkIdx].type !== 'inline' ||\n        !QUOTE_TEST_RE.test(state.tokens[blkIdx].content)) {\n      continue;\n    }\n\n    process_inlines(state.tokens[blkIdx].children, state);\n  }\n};\n","// Core state object\n//\n'use strict';\n\nvar Token = require('../token');\n\n\nfunction StateCore(src, md, env) {\n  this.src = src;\n  this.env = env;\n  this.tokens = [];\n  this.inlineMode = false;\n  this.md = md; // link to parser instance\n}\n\n// re-export Token class to use in core rules\nStateCore.prototype.Token = Token;\n\n\nmodule.exports = StateCore;\n","// Token class\n\n'use strict';\n\n\n/**\n * class Token\n **/\n\n/**\n * new Token(type, tag, nesting)\n *\n * Create new token and fill passed properties.\n **/\nfunction Token(type, tag, nesting) {\n  /**\n   * Token#type -> String\n   *\n   * Type of the token (string, e.g. \"paragraph_open\")\n   **/\n  this.type     = type;\n\n  /**\n   * Token#tag -> String\n   *\n   * html tag name, e.g. \"p\"\n   **/\n  this.tag      = tag;\n\n  /**\n   * Token#attrs -> Array\n   *\n   * Html attributes. Format: `[ [ name1, value1 ], [ name2, value2 ] ]`\n   **/\n  this.attrs    = null;\n\n  /**\n   * Token#map -> Array\n   *\n   * Source map info. Format: `[ line_begin, line_end ]`\n   **/\n  this.map      = null;\n\n  /**\n   * Token#nesting -> Number\n   *\n   * Level change (number in {-1, 0, 1} set), where:\n   *\n   * -  `1` means the tag is opening\n   * -  `0` means the tag is self-closing\n   * - `-1` means the tag is closing\n   **/\n  this.nesting  = nesting;\n\n  /**\n   * Token#level -> Number\n   *\n   * nesting level, the same as `state.level`\n   **/\n  this.level    = 0;\n\n  /**\n   * Token#children -> Array\n   *\n   * An array of child nodes (inline and img tokens)\n   **/\n  this.children = null;\n\n  /**\n   * Token#content -> String\n   *\n   * In a case of self-closing tag (code, html, fence, etc.),\n   * it has contents of this tag.\n   **/\n  this.content  = '';\n\n  /**\n   * Token#markup -> String\n   *\n   * '*' or '_' for emphasis, fence string for fence, etc.\n   **/\n  this.markup   = '';\n\n  /**\n   * Token#info -> String\n   *\n   * Additional information:\n   *\n   * - Info string for \"fence\" tokens\n   * - The value \"auto\" for autolink \"link_open\" and \"link_close\" tokens\n   * - The string value of the item marker for ordered-list \"list_item_open\" tokens\n   **/\n  this.info     = '';\n\n  /**\n   * Token#meta -> Object\n   *\n   * A place for plugins to store an arbitrary data\n   **/\n  this.meta     = null;\n\n  /**\n   * Token#block -> Boolean\n   *\n   * True for block-level tokens, false for inline tokens.\n   * Used in renderer to calculate line breaks\n   **/\n  this.block    = false;\n\n  /**\n   * Token#hidden -> Boolean\n   *\n   * If it's true, ignore this element when rendering. Used for tight lists\n   * to hide paragraphs.\n   **/\n  this.hidden   = false;\n}\n\n\n/**\n * Token.attrIndex(name) -> Number\n *\n * Search attribute index by name.\n **/\nToken.prototype.attrIndex = function attrIndex(name) {\n  var attrs, i, len;\n\n  if (!this.attrs) { return -1; }\n\n  attrs = this.attrs;\n\n  for (i = 0, len = attrs.length; i < len; i++) {\n    if (attrs[i][0] === name) { return i; }\n  }\n  return -1;\n};\n\n\n/**\n * Token.attrPush(attrData)\n *\n * Add `[ name, value ]` attribute to list. Init attrs if necessary\n **/\nToken.prototype.attrPush = function attrPush(attrData) {\n  if (this.attrs) {\n    this.attrs.push(attrData);\n  } else {\n    this.attrs = [ attrData ];\n  }\n};\n\n\n/**\n * Token.attrSet(name, value)\n *\n * Set `name` attribute to `value`. Override old value if exists.\n **/\nToken.prototype.attrSet = function attrSet(name, value) {\n  var idx = this.attrIndex(name),\n      attrData = [ name, value ];\n\n  if (idx < 0) {\n    this.attrPush(attrData);\n  } else {\n    this.attrs[idx] = attrData;\n  }\n};\n\n\n/**\n * Token.attrGet(name)\n *\n * Get the value of attribute `name`, or null if it does not exist.\n **/\nToken.prototype.attrGet = function attrGet(name) {\n  var idx = this.attrIndex(name), value = null;\n  if (idx >= 0) {\n    value = this.attrs[idx][1];\n  }\n  return value;\n};\n\n\n/**\n * Token.attrJoin(name, value)\n *\n * Join value to existing attribute via space. Or create new attribute if not\n * exists. Useful to operate with token classes.\n **/\nToken.prototype.attrJoin = function attrJoin(name, value) {\n  var idx = this.attrIndex(name);\n\n  if (idx < 0) {\n    this.attrPush([ name, value ]);\n  } else {\n    this.attrs[idx][1] = this.attrs[idx][1] + ' ' + value;\n  }\n};\n\n\nmodule.exports = Token;\n","/** internal\n * class ParserBlock\n *\n * Block-level tokenizer.\n **/\n'use strict';\n\n\nvar Ruler           = require('./ruler');\n\n\nvar _rules = [\n  // First 2 params - rule name & source. Secondary array - list of rules,\n  // which can be terminated by this one.\n  [ 'table',      require('./rules_block/table'),      [ 'paragraph', 'reference' ] ],\n  [ 'code',       require('./rules_block/code') ],\n  [ 'fence',      require('./rules_block/fence'),      [ 'paragraph', 'reference', 'blockquote', 'list' ] ],\n  [ 'blockquote', require('./rules_block/blockquote'), [ 'paragraph', 'reference', 'blockquote', 'list' ] ],\n  [ 'hr',         require('./rules_block/hr'),         [ 'paragraph', 'reference', 'blockquote', 'list' ] ],\n  [ 'list',       require('./rules_block/list'),       [ 'paragraph', 'reference', 'blockquote' ] ],\n  [ 'reference',  require('./rules_block/reference') ],\n  [ 'html_block', require('./rules_block/html_block'), [ 'paragraph', 'reference', 'blockquote' ] ],\n  [ 'heading',    require('./rules_block/heading'),    [ 'paragraph', 'reference', 'blockquote' ] ],\n  [ 'lheading',   require('./rules_block/lheading') ],\n  [ 'paragraph',  require('./rules_block/paragraph') ]\n];\n\n\n/**\n * new ParserBlock()\n **/\nfunction ParserBlock() {\n  /**\n   * ParserBlock#ruler -> Ruler\n   *\n   * [[Ruler]] instance. Keep configuration of block rules.\n   **/\n  this.ruler = new Ruler();\n\n  for (var i = 0; i < _rules.length; i++) {\n    this.ruler.push(_rules[i][0], _rules[i][1], { alt: (_rules[i][2] || []).slice() });\n  }\n}\n\n\n// Generate tokens for input range\n//\nParserBlock.prototype.tokenize = function (state, startLine, endLine) {\n  var ok, i,\n      rules = this.ruler.getRules(''),\n      len = rules.length,\n      line = startLine,\n      hasEmptyLines = false,\n      maxNesting = state.md.options.maxNesting;\n\n  while (line < endLine) {\n    state.line = line = state.skipEmptyLines(line);\n    if (line >= endLine) { break; }\n\n    // Termination condition for nested calls.\n    // Nested calls currently used for blockquotes & lists\n    if (state.sCount[line] < state.blkIndent) { break; }\n\n    // If nesting level exceeded - skip tail to the end. That's not ordinary\n    // situation and we should not care about content.\n    if (state.level >= maxNesting) {\n      state.line = endLine;\n      break;\n    }\n\n    // Try all possible rules.\n    // On success, rule should:\n    //\n    // - update `state.line`\n    // - update `state.tokens`\n    // - return true\n\n    for (i = 0; i < len; i++) {\n      ok = rules[i](state, line, endLine, false);\n      if (ok) { break; }\n    }\n\n    // set state.tight if we had an empty line before current tag\n    // i.e. latest empty line should not count\n    state.tight = !hasEmptyLines;\n\n    // paragraph might \"eat\" one newline after it in nested lists\n    if (state.isEmpty(state.line - 1)) {\n      hasEmptyLines = true;\n    }\n\n    line = state.line;\n\n    if (line < endLine && state.isEmpty(line)) {\n      hasEmptyLines = true;\n      line++;\n      state.line = line;\n    }\n  }\n};\n\n\n/**\n * ParserBlock.parse(str, md, env, outTokens)\n *\n * Process input string and push block tokens into `outTokens`\n **/\nParserBlock.prototype.parse = function (src, md, env, outTokens) {\n  var state;\n\n  if (!src) { return; }\n\n  state = new this.State(src, md, env, outTokens);\n\n  this.tokenize(state, state.line, state.lineMax);\n};\n\n\nParserBlock.prototype.State = require('./rules_block/state_block');\n\n\nmodule.exports = ParserBlock;\n","// GFM table, https://github.github.com/gfm/#tables-extension-\n\n'use strict';\n\nvar isSpace = require('../common/utils').isSpace;\n\n\nfunction getLine(state, line) {\n  var pos = state.bMarks[line] + state.tShift[line],\n      max = state.eMarks[line];\n\n  return state.src.substr(pos, max - pos);\n}\n\nfunction escapedSplit(str) {\n  var result = [],\n      pos = 0,\n      max = str.length,\n      ch,\n      isEscaped = false,\n      lastPos = 0,\n      current = '';\n\n  ch  = str.charCodeAt(pos);\n\n  while (pos < max) {\n    if (ch === 0x7c/* | */) {\n      if (!isEscaped) {\n        // pipe separating cells, '|'\n        result.push(current + str.substring(lastPos, pos));\n        current = '';\n        lastPos = pos + 1;\n      } else {\n        // escaped pipe, '\\|'\n        current += str.substring(lastPos, pos - 1);\n        lastPos = pos;\n      }\n    }\n\n    isEscaped = (ch === 0x5c/* \\ */);\n    pos++;\n\n    ch = str.charCodeAt(pos);\n  }\n\n  result.push(current + str.substring(lastPos));\n\n  return result;\n}\n\n\nmodule.exports = function table(state, startLine, endLine, silent) {\n  var ch, lineText, pos, i, l, nextLine, columns, columnCount, token,\n      aligns, t, tableLines, tbodyLines, oldParentType, terminate,\n      terminatorRules, firstCh, secondCh;\n\n  // should have at least two lines\n  if (startLine + 2 > endLine) { return false; }\n\n  nextLine = startLine + 1;\n\n  if (state.sCount[nextLine] < state.blkIndent) { return false; }\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[nextLine] - state.blkIndent >= 4) { return false; }\n\n  // first character of the second line should be '|', '-', ':',\n  // and no other characters are allowed but spaces;\n  // basically, this is the equivalent of /^[-:|][-:|\\s]*$/ regexp\n\n  pos = state.bMarks[nextLine] + state.tShift[nextLine];\n  if (pos >= state.eMarks[nextLine]) { return false; }\n\n  firstCh = state.src.charCodeAt(pos++);\n  if (firstCh !== 0x7C/* | */ && firstCh !== 0x2D/* - */ && firstCh !== 0x3A/* : */) { return false; }\n\n  if (pos >= state.eMarks[nextLine]) { return false; }\n\n  secondCh = state.src.charCodeAt(pos++);\n  if (secondCh !== 0x7C/* | */ && secondCh !== 0x2D/* - */ && secondCh !== 0x3A/* : */ && !isSpace(secondCh)) {\n    return false;\n  }\n\n  // if first character is '-', then second character must not be a space\n  // (due to parsing ambiguity with list)\n  if (firstCh === 0x2D/* - */ && isSpace(secondCh)) { return false; }\n\n  while (pos < state.eMarks[nextLine]) {\n    ch = state.src.charCodeAt(pos);\n\n    if (ch !== 0x7C/* | */ && ch !== 0x2D/* - */ && ch !== 0x3A/* : */ && !isSpace(ch)) { return false; }\n\n    pos++;\n  }\n\n  lineText = getLine(state, startLine + 1);\n\n  columns = lineText.split('|');\n  aligns = [];\n  for (i = 0; i < columns.length; i++) {\n    t = columns[i].trim();\n    if (!t) {\n      // allow empty columns before and after table, but not in between columns;\n      // e.g. allow ` |---| `, disallow ` ---||--- `\n      if (i === 0 || i === columns.length - 1) {\n        continue;\n      } else {\n        return false;\n      }\n    }\n\n    if (!/^:?-+:?$/.test(t)) { return false; }\n    if (t.charCodeAt(t.length - 1) === 0x3A/* : */) {\n      aligns.push(t.charCodeAt(0) === 0x3A/* : */ ? 'center' : 'right');\n    } else if (t.charCodeAt(0) === 0x3A/* : */) {\n      aligns.push('left');\n    } else {\n      aligns.push('');\n    }\n  }\n\n  lineText = getLine(state, startLine).trim();\n  if (lineText.indexOf('|') === -1) { return false; }\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n  columns = escapedSplit(lineText);\n  if (columns.length && columns[0] === '') columns.shift();\n  if (columns.length && columns[columns.length - 1] === '') columns.pop();\n\n  // header row will define an amount of columns in the entire table,\n  // and align row should be exactly the same (the rest of the rows can differ)\n  columnCount = columns.length;\n  if (columnCount === 0 || columnCount !== aligns.length) { return false; }\n\n  if (silent) { return true; }\n\n  oldParentType = state.parentType;\n  state.parentType = 'table';\n\n  // use 'blockquote' lists for termination because it's\n  // the most similar to tables\n  terminatorRules = state.md.block.ruler.getRules('blockquote');\n\n  token     = state.push('table_open', 'table', 1);\n  token.map = tableLines = [ startLine, 0 ];\n\n  token     = state.push('thead_open', 'thead', 1);\n  token.map = [ startLine, startLine + 1 ];\n\n  token     = state.push('tr_open', 'tr', 1);\n  token.map = [ startLine, startLine + 1 ];\n\n  for (i = 0; i < columns.length; i++) {\n    token          = state.push('th_open', 'th', 1);\n    if (aligns[i]) {\n      token.attrs  = [ [ 'style', 'text-align:' + aligns[i] ] ];\n    }\n\n    token          = state.push('inline', '', 0);\n    token.content  = columns[i].trim();\n    token.children = [];\n\n    token          = state.push('th_close', 'th', -1);\n  }\n\n  token     = state.push('tr_close', 'tr', -1);\n  token     = state.push('thead_close', 'thead', -1);\n\n  for (nextLine = startLine + 2; nextLine < endLine; nextLine++) {\n    if (state.sCount[nextLine] < state.blkIndent) { break; }\n\n    terminate = false;\n    for (i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true;\n        break;\n      }\n    }\n\n    if (terminate) { break; }\n    lineText = getLine(state, nextLine).trim();\n    if (!lineText) { break; }\n    if (state.sCount[nextLine] - state.blkIndent >= 4) { break; }\n    columns = escapedSplit(lineText);\n    if (columns.length && columns[0] === '') columns.shift();\n    if (columns.length && columns[columns.length - 1] === '') columns.pop();\n\n    if (nextLine === startLine + 2) {\n      token     = state.push('tbody_open', 'tbody', 1);\n      token.map = tbodyLines = [ startLine + 2, 0 ];\n    }\n\n    token     = state.push('tr_open', 'tr', 1);\n    token.map = [ nextLine, nextLine + 1 ];\n\n    for (i = 0; i < columnCount; i++) {\n      token          = state.push('td_open', 'td', 1);\n      if (aligns[i]) {\n        token.attrs  = [ [ 'style', 'text-align:' + aligns[i] ] ];\n      }\n\n      token          = state.push('inline', '', 0);\n      token.content  = columns[i] ? columns[i].trim() : '';\n      token.children = [];\n\n      token          = state.push('td_close', 'td', -1);\n    }\n    token = state.push('tr_close', 'tr', -1);\n  }\n\n  if (tbodyLines) {\n    token = state.push('tbody_close', 'tbody', -1);\n    tbodyLines[1] = nextLine;\n  }\n\n  token = state.push('table_close', 'table', -1);\n  tableLines[1] = nextLine;\n\n  state.parentType = oldParentType;\n  state.line = nextLine;\n  return true;\n};\n","// Code block (4 spaces padded)\n\n'use strict';\n\n\nmodule.exports = function code(state, startLine, endLine/*, silent*/) {\n  var nextLine, last, token;\n\n  if (state.sCount[startLine] - state.blkIndent < 4) { return false; }\n\n  last = nextLine = startLine + 1;\n\n  while (nextLine < endLine) {\n    if (state.isEmpty(nextLine)) {\n      nextLine++;\n      continue;\n    }\n\n    if (state.sCount[nextLine] - state.blkIndent >= 4) {\n      nextLine++;\n      last = nextLine;\n      continue;\n    }\n    break;\n  }\n\n  state.line = last;\n\n  token         = state.push('code_block', 'code', 0);\n  token.content = state.getLines(startLine, last, 4 + state.blkIndent, false) + '\\n';\n  token.map     = [ startLine, state.line ];\n\n  return true;\n};\n","// fences (``` lang, ~~~ lang)\n\n'use strict';\n\n\nmodule.exports = function fence(state, startLine, endLine, silent) {\n  var marker, len, params, nextLine, mem, token, markup,\n      haveEndMarker = false,\n      pos = state.bMarks[startLine] + state.tShift[startLine],\n      max = state.eMarks[startLine];\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n\n  if (pos + 3 > max) { return false; }\n\n  marker = state.src.charCodeAt(pos);\n\n  if (marker !== 0x7E/* ~ */ && marker !== 0x60 /* ` */) {\n    return false;\n  }\n\n  // scan marker length\n  mem = pos;\n  pos = state.skipChars(pos, marker);\n\n  len = pos - mem;\n\n  if (len < 3) { return false; }\n\n  markup = state.src.slice(mem, pos);\n  params = state.src.slice(pos, max);\n\n  if (marker === 0x60 /* ` */) {\n    if (params.indexOf(String.fromCharCode(marker)) >= 0) {\n      return false;\n    }\n  }\n\n  // Since start is found, we can report success here in validation mode\n  if (silent) { return true; }\n\n  // search end of block\n  nextLine = startLine;\n\n  for (;;) {\n    nextLine++;\n    if (nextLine >= endLine) {\n      // unclosed block should be autoclosed by end of document.\n      // also block seems to be autoclosed by end of parent\n      break;\n    }\n\n    pos = mem = state.bMarks[nextLine] + state.tShift[nextLine];\n    max = state.eMarks[nextLine];\n\n    if (pos < max && state.sCount[nextLine] < state.blkIndent) {\n      // non-empty line with negative indent should stop the list:\n      // - ```\n      //  test\n      break;\n    }\n\n    if (state.src.charCodeAt(pos) !== marker) { continue; }\n\n    if (state.sCount[nextLine] - state.blkIndent >= 4) {\n      // closing fence should be indented less than 4 spaces\n      continue;\n    }\n\n    pos = state.skipChars(pos, marker);\n\n    // closing code fence must be at least as long as the opening one\n    if (pos - mem < len) { continue; }\n\n    // make sure tail has spaces only\n    pos = state.skipSpaces(pos);\n\n    if (pos < max) { continue; }\n\n    haveEndMarker = true;\n    // found!\n    break;\n  }\n\n  // If a fence has heading spaces, they should be removed from its inner block\n  len = state.sCount[startLine];\n\n  state.line = nextLine + (haveEndMarker ? 1 : 0);\n\n  token         = state.push('fence', 'code', 0);\n  token.info    = params;\n  token.content = state.getLines(startLine + 1, nextLine, len, true);\n  token.markup  = markup;\n  token.map     = [ startLine, state.line ];\n\n  return true;\n};\n","// Block quotes\n\n'use strict';\n\nvar isSpace = require('../common/utils').isSpace;\n\n\nmodule.exports = function blockquote(state, startLine, endLine, silent) {\n  var adjustTab,\n      ch,\n      i,\n      initial,\n      l,\n      lastLineEmpty,\n      lines,\n      nextLine,\n      offset,\n      oldBMarks,\n      oldBSCount,\n      oldIndent,\n      oldParentType,\n      oldSCount,\n      oldTShift,\n      spaceAfterMarker,\n      terminate,\n      terminatorRules,\n      token,\n      isOutdented,\n      oldLineMax = state.lineMax,\n      pos = state.bMarks[startLine] + state.tShift[startLine],\n      max = state.eMarks[startLine];\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n\n  // check the block quote marker\n  if (state.src.charCodeAt(pos++) !== 0x3E/* > */) { return false; }\n\n  // we know that it's going to be a valid blockquote,\n  // so no point trying to find the end of it in silent mode\n  if (silent) { return true; }\n\n  // set offset past spaces and \">\"\n  initial = offset = state.sCount[startLine] + 1;\n\n  // skip one optional space after '>'\n  if (state.src.charCodeAt(pos) === 0x20 /* space */) {\n    // ' >   test '\n    //     ^ -- position start of line here:\n    pos++;\n    initial++;\n    offset++;\n    adjustTab = false;\n    spaceAfterMarker = true;\n  } else if (state.src.charCodeAt(pos) === 0x09 /* tab */) {\n    spaceAfterMarker = true;\n\n    if ((state.bsCount[startLine] + offset) % 4 === 3) {\n      // '  >\\t  test '\n      //       ^ -- position start of line here (tab has width===1)\n      pos++;\n      initial++;\n      offset++;\n      adjustTab = false;\n    } else {\n      // ' >\\t  test '\n      //    ^ -- position start of line here + shift bsCount slightly\n      //         to make extra space appear\n      adjustTab = true;\n    }\n  } else {\n    spaceAfterMarker = false;\n  }\n\n  oldBMarks = [ state.bMarks[startLine] ];\n  state.bMarks[startLine] = pos;\n\n  while (pos < max) {\n    ch = state.src.charCodeAt(pos);\n\n    if (isSpace(ch)) {\n      if (ch === 0x09) {\n        offset += 4 - (offset + state.bsCount[startLine] + (adjustTab ? 1 : 0)) % 4;\n      } else {\n        offset++;\n      }\n    } else {\n      break;\n    }\n\n    pos++;\n  }\n\n  oldBSCount = [ state.bsCount[startLine] ];\n  state.bsCount[startLine] = state.sCount[startLine] + 1 + (spaceAfterMarker ? 1 : 0);\n\n  lastLineEmpty = pos >= max;\n\n  oldSCount = [ state.sCount[startLine] ];\n  state.sCount[startLine] = offset - initial;\n\n  oldTShift = [ state.tShift[startLine] ];\n  state.tShift[startLine] = pos - state.bMarks[startLine];\n\n  terminatorRules = state.md.block.ruler.getRules('blockquote');\n\n  oldParentType = state.parentType;\n  state.parentType = 'blockquote';\n\n  // Search the end of the block\n  //\n  // Block ends with either:\n  //  1. an empty line outside:\n  //     ```\n  //     > test\n  //\n  //     ```\n  //  2. an empty line inside:\n  //     ```\n  //     >\n  //     test\n  //     ```\n  //  3. another tag:\n  //     ```\n  //     > test\n  //      - - -\n  //     ```\n  for (nextLine = startLine + 1; nextLine < endLine; nextLine++) {\n    // check if it's outdented, i.e. it's inside list item and indented\n    // less than said list item:\n    //\n    // ```\n    // 1. anything\n    //    > current blockquote\n    // 2. checking this line\n    // ```\n    isOutdented = state.sCount[nextLine] < state.blkIndent;\n\n    pos = state.bMarks[nextLine] + state.tShift[nextLine];\n    max = state.eMarks[nextLine];\n\n    if (pos >= max) {\n      // Case 1: line is not inside the blockquote, and this line is empty.\n      break;\n    }\n\n    if (state.src.charCodeAt(pos++) === 0x3E/* > */ && !isOutdented) {\n      // This line is inside the blockquote.\n\n      // set offset past spaces and \">\"\n      initial = offset = state.sCount[nextLine] + 1;\n\n      // skip one optional space after '>'\n      if (state.src.charCodeAt(pos) === 0x20 /* space */) {\n        // ' >   test '\n        //     ^ -- position start of line here:\n        pos++;\n        initial++;\n        offset++;\n        adjustTab = false;\n        spaceAfterMarker = true;\n      } else if (state.src.charCodeAt(pos) === 0x09 /* tab */) {\n        spaceAfterMarker = true;\n\n        if ((state.bsCount[nextLine] + offset) % 4 === 3) {\n          // '  >\\t  test '\n          //       ^ -- position start of line here (tab has width===1)\n          pos++;\n          initial++;\n          offset++;\n          adjustTab = false;\n        } else {\n          // ' >\\t  test '\n          //    ^ -- position start of line here + shift bsCount slightly\n          //         to make extra space appear\n          adjustTab = true;\n        }\n      } else {\n        spaceAfterMarker = false;\n      }\n\n      oldBMarks.push(state.bMarks[nextLine]);\n      state.bMarks[nextLine] = pos;\n\n      while (pos < max) {\n        ch = state.src.charCodeAt(pos);\n\n        if (isSpace(ch)) {\n          if (ch === 0x09) {\n            offset += 4 - (offset + state.bsCount[nextLine] + (adjustTab ? 1 : 0)) % 4;\n          } else {\n            offset++;\n          }\n        } else {\n          break;\n        }\n\n        pos++;\n      }\n\n      lastLineEmpty = pos >= max;\n\n      oldBSCount.push(state.bsCount[nextLine]);\n      state.bsCount[nextLine] = state.sCount[nextLine] + 1 + (spaceAfterMarker ? 1 : 0);\n\n      oldSCount.push(state.sCount[nextLine]);\n      state.sCount[nextLine] = offset - initial;\n\n      oldTShift.push(state.tShift[nextLine]);\n      state.tShift[nextLine] = pos - state.bMarks[nextLine];\n      continue;\n    }\n\n    // Case 2: line is not inside the blockquote, and the last line was empty.\n    if (lastLineEmpty) { break; }\n\n    // Case 3: another tag found.\n    terminate = false;\n    for (i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true;\n        break;\n      }\n    }\n\n    if (terminate) {\n      // Quirk to enforce \"hard termination mode\" for paragraphs;\n      // normally if you call `tokenize(state, startLine, nextLine)`,\n      // paragraphs will look below nextLine for paragraph continuation,\n      // but if blockquote is terminated by another tag, they shouldn't\n      state.lineMax = nextLine;\n\n      if (state.blkIndent !== 0) {\n        // state.blkIndent was non-zero, we now set it to zero,\n        // so we need to re-calculate all offsets to appear as\n        // if indent wasn't changed\n        oldBMarks.push(state.bMarks[nextLine]);\n        oldBSCount.push(state.bsCount[nextLine]);\n        oldTShift.push(state.tShift[nextLine]);\n        oldSCount.push(state.sCount[nextLine]);\n        state.sCount[nextLine] -= state.blkIndent;\n      }\n\n      break;\n    }\n\n    oldBMarks.push(state.bMarks[nextLine]);\n    oldBSCount.push(state.bsCount[nextLine]);\n    oldTShift.push(state.tShift[nextLine]);\n    oldSCount.push(state.sCount[nextLine]);\n\n    // A negative indentation means that this is a paragraph continuation\n    //\n    state.sCount[nextLine] = -1;\n  }\n\n  oldIndent = state.blkIndent;\n  state.blkIndent = 0;\n\n  token        = state.push('blockquote_open', 'blockquote', 1);\n  token.markup = '>';\n  token.map    = lines = [ startLine, 0 ];\n\n  state.md.block.tokenize(state, startLine, nextLine);\n\n  token        = state.push('blockquote_close', 'blockquote', -1);\n  token.markup = '>';\n\n  state.lineMax = oldLineMax;\n  state.parentType = oldParentType;\n  lines[1] = state.line;\n\n  // Restore original tShift; this might not be necessary since the parser\n  // has already been here, but just to make sure we can do that.\n  for (i = 0; i < oldTShift.length; i++) {\n    state.bMarks[i + startLine] = oldBMarks[i];\n    state.tShift[i + startLine] = oldTShift[i];\n    state.sCount[i + startLine] = oldSCount[i];\n    state.bsCount[i + startLine] = oldBSCount[i];\n  }\n  state.blkIndent = oldIndent;\n\n  return true;\n};\n","// Horizontal rule\n\n'use strict';\n\nvar isSpace = require('../common/utils').isSpace;\n\n\nmodule.exports = function hr(state, startLine, endLine, silent) {\n  var marker, cnt, ch, token,\n      pos = state.bMarks[startLine] + state.tShift[startLine],\n      max = state.eMarks[startLine];\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n\n  marker = state.src.charCodeAt(pos++);\n\n  // Check hr marker\n  if (marker !== 0x2A/* * */ &&\n      marker !== 0x2D/* - */ &&\n      marker !== 0x5F/* _ */) {\n    return false;\n  }\n\n  // markers can be mixed with spaces, but there should be at least 3 of them\n\n  cnt = 1;\n  while (pos < max) {\n    ch = state.src.charCodeAt(pos++);\n    if (ch !== marker && !isSpace(ch)) { return false; }\n    if (ch === marker) { cnt++; }\n  }\n\n  if (cnt < 3) { return false; }\n\n  if (silent) { return true; }\n\n  state.line = startLine + 1;\n\n  token        = state.push('hr', 'hr', 0);\n  token.map    = [ startLine, state.line ];\n  token.markup = Array(cnt + 1).join(String.fromCharCode(marker));\n\n  return true;\n};\n","// Lists\n\n'use strict';\n\nvar isSpace = require('../common/utils').isSpace;\n\n\n// Search `[-+*][\\n ]`, returns next pos after marker on success\n// or -1 on fail.\nfunction skipBulletListMarker(state, startLine) {\n  var marker, pos, max, ch;\n\n  pos = state.bMarks[startLine] + state.tShift[startLine];\n  max = state.eMarks[startLine];\n\n  marker = state.src.charCodeAt(pos++);\n  // Check bullet\n  if (marker !== 0x2A/* * */ &&\n      marker !== 0x2D/* - */ &&\n      marker !== 0x2B/* + */) {\n    return -1;\n  }\n\n  if (pos < max) {\n    ch = state.src.charCodeAt(pos);\n\n    if (!isSpace(ch)) {\n      // \" -test \" - is not a list item\n      return -1;\n    }\n  }\n\n  return pos;\n}\n\n// Search `\\d+[.)][\\n ]`, returns next pos after marker on success\n// or -1 on fail.\nfunction skipOrderedListMarker(state, startLine) {\n  var ch,\n      start = state.bMarks[startLine] + state.tShift[startLine],\n      pos = start,\n      max = state.eMarks[startLine];\n\n  // List marker should have at least 2 chars (digit + dot)\n  if (pos + 1 >= max) { return -1; }\n\n  ch = state.src.charCodeAt(pos++);\n\n  if (ch < 0x30/* 0 */ || ch > 0x39/* 9 */) { return -1; }\n\n  for (;;) {\n    // EOL -> fail\n    if (pos >= max) { return -1; }\n\n    ch = state.src.charCodeAt(pos++);\n\n    if (ch >= 0x30/* 0 */ && ch <= 0x39/* 9 */) {\n\n      // List marker should have no more than 9 digits\n      // (prevents integer overflow in browsers)\n      if (pos - start >= 10) { return -1; }\n\n      continue;\n    }\n\n    // found valid marker\n    if (ch === 0x29/* ) */ || ch === 0x2e/* . */) {\n      break;\n    }\n\n    return -1;\n  }\n\n\n  if (pos < max) {\n    ch = state.src.charCodeAt(pos);\n\n    if (!isSpace(ch)) {\n      // \" 1.test \" - is not a list item\n      return -1;\n    }\n  }\n  return pos;\n}\n\nfunction markTightParagraphs(state, idx) {\n  var i, l,\n      level = state.level + 2;\n\n  for (i = idx + 2, l = state.tokens.length - 2; i < l; i++) {\n    if (state.tokens[i].level === level && state.tokens[i].type === 'paragraph_open') {\n      state.tokens[i + 2].hidden = true;\n      state.tokens[i].hidden = true;\n      i += 2;\n    }\n  }\n}\n\n\nmodule.exports = function list(state, startLine, endLine, silent) {\n  var ch,\n      contentStart,\n      i,\n      indent,\n      indentAfterMarker,\n      initial,\n      isOrdered,\n      itemLines,\n      l,\n      listLines,\n      listTokIdx,\n      markerCharCode,\n      markerValue,\n      max,\n      nextLine,\n      offset,\n      oldListIndent,\n      oldParentType,\n      oldSCount,\n      oldTShift,\n      oldTight,\n      pos,\n      posAfterMarker,\n      prevEmptyEnd,\n      start,\n      terminate,\n      terminatorRules,\n      token,\n      isTerminatingParagraph = false,\n      tight = true;\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n\n  // Special case:\n  //  - item 1\n  //   - item 2\n  //    - item 3\n  //     - item 4\n  //      - this one is a paragraph continuation\n  if (state.listIndent >= 0 &&\n      state.sCount[startLine] - state.listIndent >= 4 &&\n      state.sCount[startLine] < state.blkIndent) {\n    return false;\n  }\n\n  // limit conditions when list can interrupt\n  // a paragraph (validation mode only)\n  if (silent && state.parentType === 'paragraph') {\n    // Next list item should still terminate previous list item;\n    //\n    // This code can fail if plugins use blkIndent as well as lists,\n    // but I hope the spec gets fixed long before that happens.\n    //\n    if (state.tShift[startLine] >= state.blkIndent) {\n      isTerminatingParagraph = true;\n    }\n  }\n\n  // Detect list type and position after marker\n  if ((posAfterMarker = skipOrderedListMarker(state, startLine)) >= 0) {\n    isOrdered = true;\n    start = state.bMarks[startLine] + state.tShift[startLine];\n    markerValue = Number(state.src.slice(start, posAfterMarker - 1));\n\n    // If we're starting a new ordered list right after\n    // a paragraph, it should start with 1.\n    if (isTerminatingParagraph && markerValue !== 1) return false;\n\n  } else if ((posAfterMarker = skipBulletListMarker(state, startLine)) >= 0) {\n    isOrdered = false;\n\n  } else {\n    return false;\n  }\n\n  // If we're starting a new unordered list right after\n  // a paragraph, first line should not be empty.\n  if (isTerminatingParagraph) {\n    if (state.skipSpaces(posAfterMarker) >= state.eMarks[startLine]) return false;\n  }\n\n  // We should terminate list on style change. Remember first one to compare.\n  markerCharCode = state.src.charCodeAt(posAfterMarker - 1);\n\n  // For validation mode we can terminate immediately\n  if (silent) { return true; }\n\n  // Start list\n  listTokIdx = state.tokens.length;\n\n  if (isOrdered) {\n    token       = state.push('ordered_list_open', 'ol', 1);\n    if (markerValue !== 1) {\n      token.attrs = [ [ 'start', markerValue ] ];\n    }\n\n  } else {\n    token       = state.push('bullet_list_open', 'ul', 1);\n  }\n\n  token.map    = listLines = [ startLine, 0 ];\n  token.markup = String.fromCharCode(markerCharCode);\n\n  //\n  // Iterate list items\n  //\n\n  nextLine = startLine;\n  prevEmptyEnd = false;\n  terminatorRules = state.md.block.ruler.getRules('list');\n\n  oldParentType = state.parentType;\n  state.parentType = 'list';\n\n  while (nextLine < endLine) {\n    pos = posAfterMarker;\n    max = state.eMarks[nextLine];\n\n    initial = offset = state.sCount[nextLine] + posAfterMarker - (state.bMarks[startLine] + state.tShift[startLine]);\n\n    while (pos < max) {\n      ch = state.src.charCodeAt(pos);\n\n      if (ch === 0x09) {\n        offset += 4 - (offset + state.bsCount[nextLine]) % 4;\n      } else if (ch === 0x20) {\n        offset++;\n      } else {\n        break;\n      }\n\n      pos++;\n    }\n\n    contentStart = pos;\n\n    if (contentStart >= max) {\n      // trimming space in \"-    \\n  3\" case, indent is 1 here\n      indentAfterMarker = 1;\n    } else {\n      indentAfterMarker = offset - initial;\n    }\n\n    // If we have more than 4 spaces, the indent is 1\n    // (the rest is just indented code block)\n    if (indentAfterMarker > 4) { indentAfterMarker = 1; }\n\n    // \"  -  test\"\n    //  ^^^^^ - calculating total length of this thing\n    indent = initial + indentAfterMarker;\n\n    // Run subparser & write tokens\n    token        = state.push('list_item_open', 'li', 1);\n    token.markup = String.fromCharCode(markerCharCode);\n    token.map    = itemLines = [ startLine, 0 ];\n    if (isOrdered) {\n      token.info = state.src.slice(start, posAfterMarker - 1);\n    }\n\n    // change current state, then restore it after parser subcall\n    oldTight = state.tight;\n    oldTShift = state.tShift[startLine];\n    oldSCount = state.sCount[startLine];\n\n    //  - example list\n    // ^ listIndent position will be here\n    //   ^ blkIndent position will be here\n    //\n    oldListIndent = state.listIndent;\n    state.listIndent = state.blkIndent;\n    state.blkIndent = indent;\n\n    state.tight = true;\n    state.tShift[startLine] = contentStart - state.bMarks[startLine];\n    state.sCount[startLine] = offset;\n\n    if (contentStart >= max && state.isEmpty(startLine + 1)) {\n      // workaround for this case\n      // (list item is empty, list terminates before \"foo\"):\n      // ~~~~~~~~\n      //   -\n      //\n      //     foo\n      // ~~~~~~~~\n      state.line = Math.min(state.line + 2, endLine);\n    } else {\n      state.md.block.tokenize(state, startLine, endLine, true);\n    }\n\n    // If any of list item is tight, mark list as tight\n    if (!state.tight || prevEmptyEnd) {\n      tight = false;\n    }\n    // Item become loose if finish with empty line,\n    // but we should filter last element, because it means list finish\n    prevEmptyEnd = (state.line - startLine) > 1 && state.isEmpty(state.line - 1);\n\n    state.blkIndent = state.listIndent;\n    state.listIndent = oldListIndent;\n    state.tShift[startLine] = oldTShift;\n    state.sCount[startLine] = oldSCount;\n    state.tight = oldTight;\n\n    token        = state.push('list_item_close', 'li', -1);\n    token.markup = String.fromCharCode(markerCharCode);\n\n    nextLine = startLine = state.line;\n    itemLines[1] = nextLine;\n    contentStart = state.bMarks[startLine];\n\n    if (nextLine >= endLine) { break; }\n\n    //\n    // Try to check if list is terminated or continued.\n    //\n    if (state.sCount[nextLine] < state.blkIndent) { break; }\n\n    // if it's indented more than 3 spaces, it should be a code block\n    if (state.sCount[startLine] - state.blkIndent >= 4) { break; }\n\n    // fail if terminating block found\n    terminate = false;\n    for (i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true;\n        break;\n      }\n    }\n    if (terminate) { break; }\n\n    // fail if list has another type\n    if (isOrdered) {\n      posAfterMarker = skipOrderedListMarker(state, nextLine);\n      if (posAfterMarker < 0) { break; }\n      start = state.bMarks[nextLine] + state.tShift[nextLine];\n    } else {\n      posAfterMarker = skipBulletListMarker(state, nextLine);\n      if (posAfterMarker < 0) { break; }\n    }\n\n    if (markerCharCode !== state.src.charCodeAt(posAfterMarker - 1)) { break; }\n  }\n\n  // Finalize list\n  if (isOrdered) {\n    token = state.push('ordered_list_close', 'ol', -1);\n  } else {\n    token = state.push('bullet_list_close', 'ul', -1);\n  }\n  token.markup = String.fromCharCode(markerCharCode);\n\n  listLines[1] = nextLine;\n  state.line = nextLine;\n\n  state.parentType = oldParentType;\n\n  // mark paragraphs tight if needed\n  if (tight) {\n    markTightParagraphs(state, listTokIdx);\n  }\n\n  return true;\n};\n","'use strict';\n\n\nvar normalizeReference   = require('../common/utils').normalizeReference;\nvar isSpace              = require('../common/utils').isSpace;\n\n\nmodule.exports = function reference(state, startLine, _endLine, silent) {\n  var ch,\n      destEndPos,\n      destEndLineNo,\n      endLine,\n      href,\n      i,\n      l,\n      label,\n      labelEnd,\n      oldParentType,\n      res,\n      start,\n      str,\n      terminate,\n      terminatorRules,\n      title,\n      lines = 0,\n      pos = state.bMarks[startLine] + state.tShift[startLine],\n      max = state.eMarks[startLine],\n      nextLine = startLine + 1;\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n\n  if (state.src.charCodeAt(pos) !== 0x5B/* [ */) { return false; }\n\n  // Simple check to quickly interrupt scan on [link](url) at the start of line.\n  // Can be useful on practice: https://github.com/markdown-it/markdown-it/issues/54\n  while (++pos < max) {\n    if (state.src.charCodeAt(pos) === 0x5D /* ] */ &&\n        state.src.charCodeAt(pos - 1) !== 0x5C/* \\ */) {\n      if (pos + 1 === max) { return false; }\n      if (state.src.charCodeAt(pos + 1) !== 0x3A/* : */) { return false; }\n      break;\n    }\n  }\n\n  endLine = state.lineMax;\n\n  // jump line-by-line until empty one or EOF\n  terminatorRules = state.md.block.ruler.getRules('reference');\n\n  oldParentType = state.parentType;\n  state.parentType = 'reference';\n\n  for (; nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {\n    // this would be a code block normally, but after paragraph\n    // it's considered a lazy continuation regardless of what's there\n    if (state.sCount[nextLine] - state.blkIndent > 3) { continue; }\n\n    // quirk for blockquotes, this line should already be checked by that rule\n    if (state.sCount[nextLine] < 0) { continue; }\n\n    // Some tags can terminate paragraph without empty line.\n    terminate = false;\n    for (i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true;\n        break;\n      }\n    }\n    if (terminate) { break; }\n  }\n\n  str = state.getLines(startLine, nextLine, state.blkIndent, false).trim();\n  max = str.length;\n\n  for (pos = 1; pos < max; pos++) {\n    ch = str.charCodeAt(pos);\n    if (ch === 0x5B /* [ */) {\n      return false;\n    } else if (ch === 0x5D /* ] */) {\n      labelEnd = pos;\n      break;\n    } else if (ch === 0x0A /* \\n */) {\n      lines++;\n    } else if (ch === 0x5C /* \\ */) {\n      pos++;\n      if (pos < max && str.charCodeAt(pos) === 0x0A) {\n        lines++;\n      }\n    }\n  }\n\n  if (labelEnd < 0 || str.charCodeAt(labelEnd + 1) !== 0x3A/* : */) { return false; }\n\n  // [label]:   destination   'title'\n  //         ^^^ skip optional whitespace here\n  for (pos = labelEnd + 2; pos < max; pos++) {\n    ch = str.charCodeAt(pos);\n    if (ch === 0x0A) {\n      lines++;\n    } else if (isSpace(ch)) {\n      /*eslint no-empty:0*/\n    } else {\n      break;\n    }\n  }\n\n  // [label]:   destination   'title'\n  //            ^^^^^^^^^^^ parse this\n  res = state.md.helpers.parseLinkDestination(str, pos, max);\n  if (!res.ok) { return false; }\n\n  href = state.md.normalizeLink(res.str);\n  if (!state.md.validateLink(href)) { return false; }\n\n  pos = res.pos;\n  lines += res.lines;\n\n  // save cursor state, we could require to rollback later\n  destEndPos = pos;\n  destEndLineNo = lines;\n\n  // [label]:   destination   'title'\n  //                       ^^^ skipping those spaces\n  start = pos;\n  for (; pos < max; pos++) {\n    ch = str.charCodeAt(pos);\n    if (ch === 0x0A) {\n      lines++;\n    } else if (isSpace(ch)) {\n      /*eslint no-empty:0*/\n    } else {\n      break;\n    }\n  }\n\n  // [label]:   destination   'title'\n  //                          ^^^^^^^ parse this\n  res = state.md.helpers.parseLinkTitle(str, pos, max);\n  if (pos < max && start !== pos && res.ok) {\n    title = res.str;\n    pos = res.pos;\n    lines += res.lines;\n  } else {\n    title = '';\n    pos = destEndPos;\n    lines = destEndLineNo;\n  }\n\n  // skip trailing spaces until the rest of the line\n  while (pos < max) {\n    ch = str.charCodeAt(pos);\n    if (!isSpace(ch)) { break; }\n    pos++;\n  }\n\n  if (pos < max && str.charCodeAt(pos) !== 0x0A) {\n    if (title) {\n      // garbage at the end of the line after title,\n      // but it could still be a valid reference if we roll back\n      title = '';\n      pos = destEndPos;\n      lines = destEndLineNo;\n      while (pos < max) {\n        ch = str.charCodeAt(pos);\n        if (!isSpace(ch)) { break; }\n        pos++;\n      }\n    }\n  }\n\n  if (pos < max && str.charCodeAt(pos) !== 0x0A) {\n    // garbage at the end of the line\n    return false;\n  }\n\n  label = normalizeReference(str.slice(1, labelEnd));\n  if (!label) {\n    // CommonMark 0.20 disallows empty labels\n    return false;\n  }\n\n  // Reference can not terminate anything. This check is for safety only.\n  /*istanbul ignore if*/\n  if (silent) { return true; }\n\n  if (typeof state.env.references === 'undefined') {\n    state.env.references = {};\n  }\n  if (typeof state.env.references[label] === 'undefined') {\n    state.env.references[label] = { title: title, href: href };\n  }\n\n  state.parentType = oldParentType;\n\n  state.line = startLine + lines + 1;\n  return true;\n};\n","// HTML block\n\n'use strict';\n\n\nvar block_names = require('../common/html_blocks');\nvar HTML_OPEN_CLOSE_TAG_RE = require('../common/html_re').HTML_OPEN_CLOSE_TAG_RE;\n\n// An array of opening and corresponding closing sequences for html tags,\n// last argument defines whether it can terminate a paragraph or not\n//\nvar HTML_SEQUENCES = [\n  [ /^<(script|pre|style|textarea)(?=(\\s|>|$))/i, /<\\/(script|pre|style|textarea)>/i, true ],\n  [ /^<!--/,        /-->/,   true ],\n  [ /^<\\?/,         /\\?>/,   true ],\n  [ /^<![A-Z]/,     />/,     true ],\n  [ /^<!\\[CDATA\\[/, /\\]\\]>/, true ],\n  [ new RegExp('^</?(' + block_names.join('|') + ')(?=(\\\\s|/?>|$))', 'i'), /^$/, true ],\n  [ new RegExp(HTML_OPEN_CLOSE_TAG_RE.source + '\\\\s*$'),  /^$/, false ]\n];\n\n\nmodule.exports = function html_block(state, startLine, endLine, silent) {\n  var i, nextLine, token, lineText,\n      pos = state.bMarks[startLine] + state.tShift[startLine],\n      max = state.eMarks[startLine];\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n\n  if (!state.md.options.html) { return false; }\n\n  if (state.src.charCodeAt(pos) !== 0x3C/* < */) { return false; }\n\n  lineText = state.src.slice(pos, max);\n\n  for (i = 0; i < HTML_SEQUENCES.length; i++) {\n    if (HTML_SEQUENCES[i][0].test(lineText)) { break; }\n  }\n\n  if (i === HTML_SEQUENCES.length) { return false; }\n\n  if (silent) {\n    // true if this sequence can be a terminator, false otherwise\n    return HTML_SEQUENCES[i][2];\n  }\n\n  nextLine = startLine + 1;\n\n  // If we are here - we detected HTML block.\n  // Let's roll down till block end.\n  if (!HTML_SEQUENCES[i][1].test(lineText)) {\n    for (; nextLine < endLine; nextLine++) {\n      if (state.sCount[nextLine] < state.blkIndent) { break; }\n\n      pos = state.bMarks[nextLine] + state.tShift[nextLine];\n      max = state.eMarks[nextLine];\n      lineText = state.src.slice(pos, max);\n\n      if (HTML_SEQUENCES[i][1].test(lineText)) {\n        if (lineText.length !== 0) { nextLine++; }\n        break;\n      }\n    }\n  }\n\n  state.line = nextLine;\n\n  token         = state.push('html_block', '', 0);\n  token.map     = [ startLine, nextLine ];\n  token.content = state.getLines(startLine, nextLine, state.blkIndent, true);\n\n  return true;\n};\n","// List of valid html blocks names, accorting to commonmark spec\n// http://jgm.github.io/CommonMark/spec.html#html-blocks\n\n'use strict';\n\n\nmodule.exports = [\n  'address',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'blockquote',\n  'body',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hr',\n  'html',\n  'iframe',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'menu',\n  'menuitem',\n  'nav',\n  'noframes',\n  'ol',\n  'optgroup',\n  'option',\n  'p',\n  'param',\n  'section',\n  'source',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul'\n];\n","// Regexps to match html elements\n\n'use strict';\n\nvar attr_name     = '[a-zA-Z_:][a-zA-Z0-9:._-]*';\n\nvar unquoted      = '[^\"\\'=<>`\\\\x00-\\\\x20]+';\nvar single_quoted = \"'[^']*'\";\nvar double_quoted = '\"[^\"]*\"';\n\nvar attr_value  = '(?:' + unquoted + '|' + single_quoted + '|' + double_quoted + ')';\n\nvar attribute   = '(?:\\\\s+' + attr_name + '(?:\\\\s*=\\\\s*' + attr_value + ')?)';\n\nvar open_tag    = '<[A-Za-z][A-Za-z0-9\\\\-]*' + attribute + '*\\\\s*\\\\/?>';\n\nvar close_tag   = '<\\\\/[A-Za-z][A-Za-z0-9\\\\-]*\\\\s*>';\nvar comment     = '<!---->|<!--(?:-?[^>-])(?:-?[^-])*-->';\nvar processing  = '<[?][\\\\s\\\\S]*?[?]>';\nvar declaration = '<![A-Z]+\\\\s+[^>]*>';\nvar cdata       = '<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>';\n\nvar HTML_TAG_RE = new RegExp('^(?:' + open_tag + '|' + close_tag + '|' + comment +\n                        '|' + processing + '|' + declaration + '|' + cdata + ')');\nvar HTML_OPEN_CLOSE_TAG_RE = new RegExp('^(?:' + open_tag + '|' + close_tag + ')');\n\nmodule.exports.HTML_TAG_RE = HTML_TAG_RE;\nmodule.exports.HTML_OPEN_CLOSE_TAG_RE = HTML_OPEN_CLOSE_TAG_RE;\n","// heading (#, ##, ...)\n\n'use strict';\n\nvar isSpace = require('../common/utils').isSpace;\n\n\nmodule.exports = function heading(state, startLine, endLine, silent) {\n  var ch, level, tmp, token,\n      pos = state.bMarks[startLine] + state.tShift[startLine],\n      max = state.eMarks[startLine];\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n\n  ch  = state.src.charCodeAt(pos);\n\n  if (ch !== 0x23/* # */ || pos >= max) { return false; }\n\n  // count heading level\n  level = 1;\n  ch = state.src.charCodeAt(++pos);\n  while (ch === 0x23/* # */ && pos < max && level <= 6) {\n    level++;\n    ch = state.src.charCodeAt(++pos);\n  }\n\n  if (level > 6 || (pos < max && !isSpace(ch))) { return false; }\n\n  if (silent) { return true; }\n\n  // Let's cut tails like '    ###  ' from the end of string\n\n  max = state.skipSpacesBack(max, pos);\n  tmp = state.skipCharsBack(max, 0x23, pos); // #\n  if (tmp > pos && isSpace(state.src.charCodeAt(tmp - 1))) {\n    max = tmp;\n  }\n\n  state.line = startLine + 1;\n\n  token        = state.push('heading_open', 'h' + String(level), 1);\n  token.markup = '########'.slice(0, level);\n  token.map    = [ startLine, state.line ];\n\n  token          = state.push('inline', '', 0);\n  token.content  = state.src.slice(pos, max).trim();\n  token.map      = [ startLine, state.line ];\n  token.children = [];\n\n  token        = state.push('heading_close', 'h' + String(level), -1);\n  token.markup = '########'.slice(0, level);\n\n  return true;\n};\n","// lheading (---, ===)\n\n'use strict';\n\n\nmodule.exports = function lheading(state, startLine, endLine/*, silent*/) {\n  var content, terminate, i, l, token, pos, max, level, marker,\n      nextLine = startLine + 1, oldParentType,\n      terminatorRules = state.md.block.ruler.getRules('paragraph');\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n\n  oldParentType = state.parentType;\n  state.parentType = 'paragraph'; // use paragraph to match terminatorRules\n\n  // jump line-by-line until empty one or EOF\n  for (; nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {\n    // this would be a code block normally, but after paragraph\n    // it's considered a lazy continuation regardless of what's there\n    if (state.sCount[nextLine] - state.blkIndent > 3) { continue; }\n\n    //\n    // Check for underline in setext header\n    //\n    if (state.sCount[nextLine] >= state.blkIndent) {\n      pos = state.bMarks[nextLine] + state.tShift[nextLine];\n      max = state.eMarks[nextLine];\n\n      if (pos < max) {\n        marker = state.src.charCodeAt(pos);\n\n        if (marker === 0x2D/* - */ || marker === 0x3D/* = */) {\n          pos = state.skipChars(pos, marker);\n          pos = state.skipSpaces(pos);\n\n          if (pos >= max) {\n            level = (marker === 0x3D/* = */ ? 1 : 2);\n            break;\n          }\n        }\n      }\n    }\n\n    // quirk for blockquotes, this line should already be checked by that rule\n    if (state.sCount[nextLine] < 0) { continue; }\n\n    // Some tags can terminate paragraph without empty line.\n    terminate = false;\n    for (i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true;\n        break;\n      }\n    }\n    if (terminate) { break; }\n  }\n\n  if (!level) {\n    // Didn't find valid underline\n    return false;\n  }\n\n  content = state.getLines(startLine, nextLine, state.blkIndent, false).trim();\n\n  state.line = nextLine + 1;\n\n  token          = state.push('heading_open', 'h' + String(level), 1);\n  token.markup   = String.fromCharCode(marker);\n  token.map      = [ startLine, state.line ];\n\n  token          = state.push('inline', '', 0);\n  token.content  = content;\n  token.map      = [ startLine, state.line - 1 ];\n  token.children = [];\n\n  token          = state.push('heading_close', 'h' + String(level), -1);\n  token.markup   = String.fromCharCode(marker);\n\n  state.parentType = oldParentType;\n\n  return true;\n};\n","// Paragraph\n\n'use strict';\n\n\nmodule.exports = function paragraph(state, startLine/*, endLine*/) {\n  var content, terminate, i, l, token, oldParentType,\n      nextLine = startLine + 1,\n      terminatorRules = state.md.block.ruler.getRules('paragraph'),\n      endLine = state.lineMax;\n\n  oldParentType = state.parentType;\n  state.parentType = 'paragraph';\n\n  // jump line-by-line until empty one or EOF\n  for (; nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {\n    // this would be a code block normally, but after paragraph\n    // it's considered a lazy continuation regardless of what's there\n    if (state.sCount[nextLine] - state.blkIndent > 3) { continue; }\n\n    // quirk for blockquotes, this line should already be checked by that rule\n    if (state.sCount[nextLine] < 0) { continue; }\n\n    // Some tags can terminate paragraph without empty line.\n    terminate = false;\n    for (i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true;\n        break;\n      }\n    }\n    if (terminate) { break; }\n  }\n\n  content = state.getLines(startLine, nextLine, state.blkIndent, false).trim();\n\n  state.line = nextLine;\n\n  token          = state.push('paragraph_open', 'p', 1);\n  token.map      = [ startLine, state.line ];\n\n  token          = state.push('inline', '', 0);\n  token.content  = content;\n  token.map      = [ startLine, state.line ];\n  token.children = [];\n\n  token          = state.push('paragraph_close', 'p', -1);\n\n  state.parentType = oldParentType;\n\n  return true;\n};\n","// Parser state class\n\n'use strict';\n\nvar Token = require('../token');\nvar isSpace = require('../common/utils').isSpace;\n\n\nfunction StateBlock(src, md, env, tokens) {\n  var ch, s, start, pos, len, indent, offset, indent_found;\n\n  this.src = src;\n\n  // link to parser instance\n  this.md     = md;\n\n  this.env = env;\n\n  //\n  // Internal state vartiables\n  //\n\n  this.tokens = tokens;\n\n  this.bMarks = [];  // line begin offsets for fast jumps\n  this.eMarks = [];  // line end offsets for fast jumps\n  this.tShift = [];  // offsets of the first non-space characters (tabs not expanded)\n  this.sCount = [];  // indents for each line (tabs expanded)\n\n  // An amount of virtual spaces (tabs expanded) between beginning\n  // of each line (bMarks) and real beginning of that line.\n  //\n  // It exists only as a hack because blockquotes override bMarks\n  // losing information in the process.\n  //\n  // It's used only when expanding tabs, you can think about it as\n  // an initial tab length, e.g. bsCount=21 applied to string `\\t123`\n  // means first tab should be expanded to 4-21%4 === 3 spaces.\n  //\n  this.bsCount = [];\n\n  // block parser variables\n  this.blkIndent  = 0; // required block content indent (for example, if we are\n                       // inside a list, it would be positioned after list marker)\n  this.line       = 0; // line index in src\n  this.lineMax    = 0; // lines count\n  this.tight      = false;  // loose/tight mode for lists\n  this.ddIndent   = -1; // indent of the current dd block (-1 if there isn't any)\n  this.listIndent = -1; // indent of the current list block (-1 if there isn't any)\n\n  // can be 'blockquote', 'list', 'root', 'paragraph' or 'reference'\n  // used in lists to determine if they interrupt a paragraph\n  this.parentType = 'root';\n\n  this.level = 0;\n\n  // renderer\n  this.result = '';\n\n  // Create caches\n  // Generate markers.\n  s = this.src;\n  indent_found = false;\n\n  for (start = pos = indent = offset = 0, len = s.length; pos < len; pos++) {\n    ch = s.charCodeAt(pos);\n\n    if (!indent_found) {\n      if (isSpace(ch)) {\n        indent++;\n\n        if (ch === 0x09) {\n          offset += 4 - offset % 4;\n        } else {\n          offset++;\n        }\n        continue;\n      } else {\n        indent_found = true;\n      }\n    }\n\n    if (ch === 0x0A || pos === len - 1) {\n      if (ch !== 0x0A) { pos++; }\n      this.bMarks.push(start);\n      this.eMarks.push(pos);\n      this.tShift.push(indent);\n      this.sCount.push(offset);\n      this.bsCount.push(0);\n\n      indent_found = false;\n      indent = 0;\n      offset = 0;\n      start = pos + 1;\n    }\n  }\n\n  // Push fake entry to simplify cache bounds checks\n  this.bMarks.push(s.length);\n  this.eMarks.push(s.length);\n  this.tShift.push(0);\n  this.sCount.push(0);\n  this.bsCount.push(0);\n\n  this.lineMax = this.bMarks.length - 1; // don't count last fake line\n}\n\n// Push new token to \"stream\".\n//\nStateBlock.prototype.push = function (type, tag, nesting) {\n  var token = new Token(type, tag, nesting);\n  token.block = true;\n\n  if (nesting < 0) this.level--; // closing tag\n  token.level = this.level;\n  if (nesting > 0) this.level++; // opening tag\n\n  this.tokens.push(token);\n  return token;\n};\n\nStateBlock.prototype.isEmpty = function isEmpty(line) {\n  return this.bMarks[line] + this.tShift[line] >= this.eMarks[line];\n};\n\nStateBlock.prototype.skipEmptyLines = function skipEmptyLines(from) {\n  for (var max = this.lineMax; from < max; from++) {\n    if (this.bMarks[from] + this.tShift[from] < this.eMarks[from]) {\n      break;\n    }\n  }\n  return from;\n};\n\n// Skip spaces from given position.\nStateBlock.prototype.skipSpaces = function skipSpaces(pos) {\n  var ch;\n\n  for (var max = this.src.length; pos < max; pos++) {\n    ch = this.src.charCodeAt(pos);\n    if (!isSpace(ch)) { break; }\n  }\n  return pos;\n};\n\n// Skip spaces from given position in reverse.\nStateBlock.prototype.skipSpacesBack = function skipSpacesBack(pos, min) {\n  if (pos <= min) { return pos; }\n\n  while (pos > min) {\n    if (!isSpace(this.src.charCodeAt(--pos))) { return pos + 1; }\n  }\n  return pos;\n};\n\n// Skip char codes from given position\nStateBlock.prototype.skipChars = function skipChars(pos, code) {\n  for (var max = this.src.length; pos < max; pos++) {\n    if (this.src.charCodeAt(pos) !== code) { break; }\n  }\n  return pos;\n};\n\n// Skip char codes reverse from given position - 1\nStateBlock.prototype.skipCharsBack = function skipCharsBack(pos, code, min) {\n  if (pos <= min) { return pos; }\n\n  while (pos > min) {\n    if (code !== this.src.charCodeAt(--pos)) { return pos + 1; }\n  }\n  return pos;\n};\n\n// cut lines range from source.\nStateBlock.prototype.getLines = function getLines(begin, end, indent, keepLastLF) {\n  var i, lineIndent, ch, first, last, queue, lineStart,\n      line = begin;\n\n  if (begin >= end) {\n    return '';\n  }\n\n  queue = new Array(end - begin);\n\n  for (i = 0; line < end; line++, i++) {\n    lineIndent = 0;\n    lineStart = first = this.bMarks[line];\n\n    if (line + 1 < end || keepLastLF) {\n      // No need for bounds check because we have fake entry on tail.\n      last = this.eMarks[line] + 1;\n    } else {\n      last = this.eMarks[line];\n    }\n\n    while (first < last && lineIndent < indent) {\n      ch = this.src.charCodeAt(first);\n\n      if (isSpace(ch)) {\n        if (ch === 0x09) {\n          lineIndent += 4 - (lineIndent + this.bsCount[line]) % 4;\n        } else {\n          lineIndent++;\n        }\n      } else if (first - lineStart < this.tShift[line]) {\n        // patched tShift masked characters to look like spaces (blockquotes, list markers)\n        lineIndent++;\n      } else {\n        break;\n      }\n\n      first++;\n    }\n\n    if (lineIndent > indent) {\n      // partially expanding tabs in code blocks, e.g '\\t\\tfoobar'\n      // with indent=2 becomes '  \\tfoobar'\n      queue[i] = new Array(lineIndent - indent + 1).join(' ') + this.src.slice(first, last);\n    } else {\n      queue[i] = this.src.slice(first, last);\n    }\n  }\n\n  return queue.join('');\n};\n\n// re-export Token class to use in block rules\nStateBlock.prototype.Token = Token;\n\n\nmodule.exports = StateBlock;\n","/** internal\n * class ParserInline\n *\n * Tokenizes paragraph content.\n **/\n'use strict';\n\n\nvar Ruler           = require('./ruler');\n\n\n////////////////////////////////////////////////////////////////////////////////\n// Parser rules\n\nvar _rules = [\n  [ 'text',            require('./rules_inline/text') ],\n  [ 'newline',         require('./rules_inline/newline') ],\n  [ 'escape',          require('./rules_inline/escape') ],\n  [ 'backticks',       require('./rules_inline/backticks') ],\n  [ 'strikethrough',   require('./rules_inline/strikethrough').tokenize ],\n  [ 'emphasis',        require('./rules_inline/emphasis').tokenize ],\n  [ 'link',            require('./rules_inline/link') ],\n  [ 'image',           require('./rules_inline/image') ],\n  [ 'autolink',        require('./rules_inline/autolink') ],\n  [ 'html_inline',     require('./rules_inline/html_inline') ],\n  [ 'entity',          require('./rules_inline/entity') ]\n];\n\nvar _rules2 = [\n  [ 'balance_pairs',   require('./rules_inline/balance_pairs') ],\n  [ 'strikethrough',   require('./rules_inline/strikethrough').postProcess ],\n  [ 'emphasis',        require('./rules_inline/emphasis').postProcess ],\n  [ 'text_collapse',   require('./rules_inline/text_collapse') ]\n];\n\n\n/**\n * new ParserInline()\n **/\nfunction ParserInline() {\n  var i;\n\n  /**\n   * ParserInline#ruler -> Ruler\n   *\n   * [[Ruler]] instance. Keep configuration of inline rules.\n   **/\n  this.ruler = new Ruler();\n\n  for (i = 0; i < _rules.length; i++) {\n    this.ruler.push(_rules[i][0], _rules[i][1]);\n  }\n\n  /**\n   * ParserInline#ruler2 -> Ruler\n   *\n   * [[Ruler]] instance. Second ruler used for post-processing\n   * (e.g. in emphasis-like rules).\n   **/\n  this.ruler2 = new Ruler();\n\n  for (i = 0; i < _rules2.length; i++) {\n    this.ruler2.push(_rules2[i][0], _rules2[i][1]);\n  }\n}\n\n\n// Skip single token by running all rules in validation mode;\n// returns `true` if any rule reported success\n//\nParserInline.prototype.skipToken = function (state) {\n  var ok, i, pos = state.pos,\n      rules = this.ruler.getRules(''),\n      len = rules.length,\n      maxNesting = state.md.options.maxNesting,\n      cache = state.cache;\n\n\n  if (typeof cache[pos] !== 'undefined') {\n    state.pos = cache[pos];\n    return;\n  }\n\n  if (state.level < maxNesting) {\n    for (i = 0; i < len; i++) {\n      // Increment state.level and decrement it later to limit recursion.\n      // It's harmless to do here, because no tokens are created. But ideally,\n      // we'd need a separate private state variable for this purpose.\n      //\n      state.level++;\n      ok = rules[i](state, true);\n      state.level--;\n\n      if (ok) { break; }\n    }\n  } else {\n    // Too much nesting, just skip until the end of the paragraph.\n    //\n    // NOTE: this will cause links to behave incorrectly in the following case,\n    //       when an amount of `[` is exactly equal to `maxNesting + 1`:\n    //\n    //       [[[[[[[[[[[[[[[[[[[[[foo]()\n    //\n    // TODO: remove this workaround when CM standard will allow nested links\n    //       (we can replace it by preventing links from being parsed in\n    //       validation mode)\n    //\n    state.pos = state.posMax;\n  }\n\n  if (!ok) { state.pos++; }\n  cache[pos] = state.pos;\n};\n\n\n// Generate tokens for input range\n//\nParserInline.prototype.tokenize = function (state) {\n  var ok, i,\n      rules = this.ruler.getRules(''),\n      len = rules.length,\n      end = state.posMax,\n      maxNesting = state.md.options.maxNesting;\n\n  while (state.pos < end) {\n    // Try all possible rules.\n    // On success, rule should:\n    //\n    // - update `state.pos`\n    // - update `state.tokens`\n    // - return true\n\n    if (state.level < maxNesting) {\n      for (i = 0; i < len; i++) {\n        ok = rules[i](state, false);\n        if (ok) { break; }\n      }\n    }\n\n    if (ok) {\n      if (state.pos >= end) { break; }\n      continue;\n    }\n\n    state.pending += state.src[state.pos++];\n  }\n\n  if (state.pending) {\n    state.pushPending();\n  }\n};\n\n\n/**\n * ParserInline.parse(str, md, env, outTokens)\n *\n * Process input string and push inline tokens into `outTokens`\n **/\nParserInline.prototype.parse = function (str, md, env, outTokens) {\n  var i, rules, len;\n  var state = new this.State(str, md, env, outTokens);\n\n  this.tokenize(state);\n\n  rules = this.ruler2.getRules('');\n  len = rules.length;\n\n  for (i = 0; i < len; i++) {\n    rules[i](state);\n  }\n};\n\n\nParserInline.prototype.State = require('./rules_inline/state_inline');\n\n\nmodule.exports = ParserInline;\n","// Skip text characters for text token, place those to pending buffer\n// and increment current pos\n\n'use strict';\n\n\n// Rule to skip pure text\n// '{}$%@~+=:' reserved for extentions\n\n// !, \", #, $, %, &, ', (, ), *, +, ,, -, ., /, :, ;, <, =, >, ?, @, [, \\, ], ^, _, `, {, |, }, or ~\n\n// !!!! Don't confuse with \"Markdown ASCII Punctuation\" chars\n// http://spec.commonmark.org/0.15/#ascii-punctuation-character\nfunction isTerminatorChar(ch) {\n  switch (ch) {\n    case 0x0A/* \\n */:\n    case 0x21/* ! */:\n    case 0x23/* # */:\n    case 0x24/* $ */:\n    case 0x25/* % */:\n    case 0x26/* & */:\n    case 0x2A/* * */:\n    case 0x2B/* + */:\n    case 0x2D/* - */:\n    case 0x3A/* : */:\n    case 0x3C/* < */:\n    case 0x3D/* = */:\n    case 0x3E/* > */:\n    case 0x40/* @ */:\n    case 0x5B/* [ */:\n    case 0x5C/* \\ */:\n    case 0x5D/* ] */:\n    case 0x5E/* ^ */:\n    case 0x5F/* _ */:\n    case 0x60/* ` */:\n    case 0x7B/* { */:\n    case 0x7D/* } */:\n    case 0x7E/* ~ */:\n      return true;\n    default:\n      return false;\n  }\n}\n\nmodule.exports = function text(state, silent) {\n  var pos = state.pos;\n\n  while (pos < state.posMax && !isTerminatorChar(state.src.charCodeAt(pos))) {\n    pos++;\n  }\n\n  if (pos === state.pos) { return false; }\n\n  if (!silent) { state.pending += state.src.slice(state.pos, pos); }\n\n  state.pos = pos;\n\n  return true;\n};\n\n// Alternative implementation, for memory.\n//\n// It costs 10% of performance, but allows extend terminators list, if place it\n// to `ParcerInline` property. Probably, will switch to it sometime, such\n// flexibility required.\n\n/*\nvar TERMINATOR_RE = /[\\n!#$%&*+\\-:<=>@[\\\\\\]^_`{}~]/;\n\nmodule.exports = function text(state, silent) {\n  var pos = state.pos,\n      idx = state.src.slice(pos).search(TERMINATOR_RE);\n\n  // first char is terminator -> empty text\n  if (idx === 0) { return false; }\n\n  // no terminator -> text till end of string\n  if (idx < 0) {\n    if (!silent) { state.pending += state.src.slice(pos); }\n    state.pos = state.src.length;\n    return true;\n  }\n\n  if (!silent) { state.pending += state.src.slice(pos, pos + idx); }\n\n  state.pos += idx;\n\n  return true;\n};*/\n","// Proceess '\\n'\n\n'use strict';\n\nvar isSpace = require('../common/utils').isSpace;\n\n\nmodule.exports = function newline(state, silent) {\n  var pmax, max, pos = state.pos;\n\n  if (state.src.charCodeAt(pos) !== 0x0A/* \\n */) { return false; }\n\n  pmax = state.pending.length - 1;\n  max = state.posMax;\n\n  // '  \\n' -> hardbreak\n  // Lookup in pending chars is bad practice! Don't copy to other rules!\n  // Pending string is stored in concat mode, indexed lookups will cause\n  // convertion to flat mode.\n  if (!silent) {\n    if (pmax >= 0 && state.pending.charCodeAt(pmax) === 0x20) {\n      if (pmax >= 1 && state.pending.charCodeAt(pmax - 1) === 0x20) {\n        state.pending = state.pending.replace(/ +$/, '');\n        state.push('hardbreak', 'br', 0);\n      } else {\n        state.pending = state.pending.slice(0, -1);\n        state.push('softbreak', 'br', 0);\n      }\n\n    } else {\n      state.push('softbreak', 'br', 0);\n    }\n  }\n\n  pos++;\n\n  // skip heading spaces for next line\n  while (pos < max && isSpace(state.src.charCodeAt(pos))) { pos++; }\n\n  state.pos = pos;\n  return true;\n};\n","// Process escaped chars and hardbreaks\n\n'use strict';\n\nvar isSpace = require('../common/utils').isSpace;\n\nvar ESCAPED = [];\n\nfor (var i = 0; i < 256; i++) { ESCAPED.push(0); }\n\n'\\\\!\"#$%&\\'()*+,./:;<=>?@[]^_`{|}~-'\n  .split('').forEach(function (ch) { ESCAPED[ch.charCodeAt(0)] = 1; });\n\n\nmodule.exports = function escape(state, silent) {\n  var ch, pos = state.pos, max = state.posMax;\n\n  if (state.src.charCodeAt(pos) !== 0x5C/* \\ */) { return false; }\n\n  pos++;\n\n  if (pos < max) {\n    ch = state.src.charCodeAt(pos);\n\n    if (ch < 256 && ESCAPED[ch] !== 0) {\n      if (!silent) { state.pending += state.src[pos]; }\n      state.pos += 2;\n      return true;\n    }\n\n    if (ch === 0x0A) {\n      if (!silent) {\n        state.push('hardbreak', 'br', 0);\n      }\n\n      pos++;\n      // skip leading whitespaces from next line\n      while (pos < max) {\n        ch = state.src.charCodeAt(pos);\n        if (!isSpace(ch)) { break; }\n        pos++;\n      }\n\n      state.pos = pos;\n      return true;\n    }\n  }\n\n  if (!silent) { state.pending += '\\\\'; }\n  state.pos++;\n  return true;\n};\n","// Parse backticks\n\n'use strict';\n\n\nmodule.exports = function backtick(state, silent) {\n  var start, max, marker, token, matchStart, matchEnd, openerLength, closerLength,\n      pos = state.pos,\n      ch = state.src.charCodeAt(pos);\n\n  if (ch !== 0x60/* ` */) { return false; }\n\n  start = pos;\n  pos++;\n  max = state.posMax;\n\n  // scan marker length\n  while (pos < max && state.src.charCodeAt(pos) === 0x60/* ` */) { pos++; }\n\n  marker = state.src.slice(start, pos);\n  openerLength = marker.length;\n\n  if (state.backticksScanned && (state.backticks[openerLength] || 0) <= start) {\n    if (!silent) state.pending += marker;\n    state.pos += openerLength;\n    return true;\n  }\n\n  matchStart = matchEnd = pos;\n\n  // Nothing found in the cache, scan until the end of the line (or until marker is found)\n  while ((matchStart = state.src.indexOf('`', matchEnd)) !== -1) {\n    matchEnd = matchStart + 1;\n\n    // scan marker length\n    while (matchEnd < max && state.src.charCodeAt(matchEnd) === 0x60/* ` */) { matchEnd++; }\n\n    closerLength = matchEnd - matchStart;\n\n    if (closerLength === openerLength) {\n      // Found matching closer length.\n      if (!silent) {\n        token     = state.push('code_inline', 'code', 0);\n        token.markup  = marker;\n        token.content = state.src.slice(pos, matchStart)\n          .replace(/\\n/g, ' ')\n          .replace(/^ (.+) $/, '$1');\n      }\n      state.pos = matchEnd;\n      return true;\n    }\n\n    // Some different length found, put it in cache as upper limit of where closer can be found\n    state.backticks[closerLength] = matchStart;\n  }\n\n  // Scanned through the end, didn't find anything\n  state.backticksScanned = true;\n\n  if (!silent) state.pending += marker;\n  state.pos += openerLength;\n  return true;\n};\n","// ~~strike through~~\n//\n'use strict';\n\n\n// Insert each marker as a separate text token, and add it to delimiter list\n//\nmodule.exports.tokenize = function strikethrough(state, silent) {\n  var i, scanned, token, len, ch,\n      start = state.pos,\n      marker = state.src.charCodeAt(start);\n\n  if (silent) { return false; }\n\n  if (marker !== 0x7E/* ~ */) { return false; }\n\n  scanned = state.scanDelims(state.pos, true);\n  len = scanned.length;\n  ch = String.fromCharCode(marker);\n\n  if (len < 2) { return false; }\n\n  if (len % 2) {\n    token         = state.push('text', '', 0);\n    token.content = ch;\n    len--;\n  }\n\n  for (i = 0; i < len; i += 2) {\n    token         = state.push('text', '', 0);\n    token.content = ch + ch;\n\n    state.delimiters.push({\n      marker: marker,\n      length: 0,     // disable \"rule of 3\" length checks meant for emphasis\n      jump:   i / 2, // for `~~` 1 marker = 2 characters\n      token:  state.tokens.length - 1,\n      end:    -1,\n      open:   scanned.can_open,\n      close:  scanned.can_close\n    });\n  }\n\n  state.pos += scanned.length;\n\n  return true;\n};\n\n\nfunction postProcess(state, delimiters) {\n  var i, j,\n      startDelim,\n      endDelim,\n      token,\n      loneMarkers = [],\n      max = delimiters.length;\n\n  for (i = 0; i < max; i++) {\n    startDelim = delimiters[i];\n\n    if (startDelim.marker !== 0x7E/* ~ */) {\n      continue;\n    }\n\n    if (startDelim.end === -1) {\n      continue;\n    }\n\n    endDelim = delimiters[startDelim.end];\n\n    token         = state.tokens[startDelim.token];\n    token.type    = 's_open';\n    token.tag     = 's';\n    token.nesting = 1;\n    token.markup  = '~~';\n    token.content = '';\n\n    token         = state.tokens[endDelim.token];\n    token.type    = 's_close';\n    token.tag     = 's';\n    token.nesting = -1;\n    token.markup  = '~~';\n    token.content = '';\n\n    if (state.tokens[endDelim.token - 1].type === 'text' &&\n        state.tokens[endDelim.token - 1].content === '~') {\n\n      loneMarkers.push(endDelim.token - 1);\n    }\n  }\n\n  // If a marker sequence has an odd number of characters, it's splitted\n  // like this: `~~~~~` -> `~` + `~~` + `~~`, leaving one marker at the\n  // start of the sequence.\n  //\n  // So, we have to move all those markers after subsequent s_close tags.\n  //\n  while (loneMarkers.length) {\n    i = loneMarkers.pop();\n    j = i + 1;\n\n    while (j < state.tokens.length && state.tokens[j].type === 's_close') {\n      j++;\n    }\n\n    j--;\n\n    if (i !== j) {\n      token = state.tokens[j];\n      state.tokens[j] = state.tokens[i];\n      state.tokens[i] = token;\n    }\n  }\n}\n\n\n// Walk through delimiter list and replace text tokens with tags\n//\nmodule.exports.postProcess = function strikethrough(state) {\n  var curr,\n      tokens_meta = state.tokens_meta,\n      max = state.tokens_meta.length;\n\n  postProcess(state, state.delimiters);\n\n  for (curr = 0; curr < max; curr++) {\n    if (tokens_meta[curr] && tokens_meta[curr].delimiters) {\n      postProcess(state, tokens_meta[curr].delimiters);\n    }\n  }\n};\n","// Process *this* and _that_\n//\n'use strict';\n\n\n// Insert each marker as a separate text token, and add it to delimiter list\n//\nmodule.exports.tokenize = function emphasis(state, silent) {\n  var i, scanned, token,\n      start = state.pos,\n      marker = state.src.charCodeAt(start);\n\n  if (silent) { return false; }\n\n  if (marker !== 0x5F /* _ */ && marker !== 0x2A /* * */) { return false; }\n\n  scanned = state.scanDelims(state.pos, marker === 0x2A);\n\n  for (i = 0; i < scanned.length; i++) {\n    token         = state.push('text', '', 0);\n    token.content = String.fromCharCode(marker);\n\n    state.delimiters.push({\n      // Char code of the starting marker (number).\n      //\n      marker: marker,\n\n      // Total length of these series of delimiters.\n      //\n      length: scanned.length,\n\n      // An amount of characters before this one that's equivalent to\n      // current one. In plain English: if this delimiter does not open\n      // an emphasis, neither do previous `jump` characters.\n      //\n      // Used to skip sequences like \"*****\" in one step, for 1st asterisk\n      // value will be 0, for 2nd it's 1 and so on.\n      //\n      jump:   i,\n\n      // A position of the token this delimiter corresponds to.\n      //\n      token:  state.tokens.length - 1,\n\n      // If this delimiter is matched as a valid opener, `end` will be\n      // equal to its position, otherwise it's `-1`.\n      //\n      end:    -1,\n\n      // Boolean flags that determine if this delimiter could open or close\n      // an emphasis.\n      //\n      open:   scanned.can_open,\n      close:  scanned.can_close\n    });\n  }\n\n  state.pos += scanned.length;\n\n  return true;\n};\n\n\nfunction postProcess(state, delimiters) {\n  var i,\n      startDelim,\n      endDelim,\n      token,\n      ch,\n      isStrong,\n      max = delimiters.length;\n\n  for (i = max - 1; i >= 0; i--) {\n    startDelim = delimiters[i];\n\n    if (startDelim.marker !== 0x5F/* _ */ && startDelim.marker !== 0x2A/* * */) {\n      continue;\n    }\n\n    // Process only opening markers\n    if (startDelim.end === -1) {\n      continue;\n    }\n\n    endDelim = delimiters[startDelim.end];\n\n    // If the previous delimiter has the same marker and is adjacent to this one,\n    // merge those into one strong delimiter.\n    //\n    // `<em><em>whatever</em></em>` -> `<strong>whatever</strong>`\n    //\n    isStrong = i > 0 &&\n               delimiters[i - 1].end === startDelim.end + 1 &&\n               delimiters[i - 1].token === startDelim.token - 1 &&\n               delimiters[startDelim.end + 1].token === endDelim.token + 1 &&\n               delimiters[i - 1].marker === startDelim.marker;\n\n    ch = String.fromCharCode(startDelim.marker);\n\n    token         = state.tokens[startDelim.token];\n    token.type    = isStrong ? 'strong_open' : 'em_open';\n    token.tag     = isStrong ? 'strong' : 'em';\n    token.nesting = 1;\n    token.markup  = isStrong ? ch + ch : ch;\n    token.content = '';\n\n    token         = state.tokens[endDelim.token];\n    token.type    = isStrong ? 'strong_close' : 'em_close';\n    token.tag     = isStrong ? 'strong' : 'em';\n    token.nesting = -1;\n    token.markup  = isStrong ? ch + ch : ch;\n    token.content = '';\n\n    if (isStrong) {\n      state.tokens[delimiters[i - 1].token].content = '';\n      state.tokens[delimiters[startDelim.end + 1].token].content = '';\n      i--;\n    }\n  }\n}\n\n\n// Walk through delimiter list and replace text tokens with tags\n//\nmodule.exports.postProcess = function emphasis(state) {\n  var curr,\n      tokens_meta = state.tokens_meta,\n      max = state.tokens_meta.length;\n\n  postProcess(state, state.delimiters);\n\n  for (curr = 0; curr < max; curr++) {\n    if (tokens_meta[curr] && tokens_meta[curr].delimiters) {\n      postProcess(state, tokens_meta[curr].delimiters);\n    }\n  }\n};\n","// Process [link](<to> \"stuff\")\n\n'use strict';\n\nvar normalizeReference   = require('../common/utils').normalizeReference;\nvar isSpace              = require('../common/utils').isSpace;\n\n\nmodule.exports = function link(state, silent) {\n  var attrs,\n      code,\n      label,\n      labelEnd,\n      labelStart,\n      pos,\n      res,\n      ref,\n      token,\n      href = '',\n      title = '',\n      oldPos = state.pos,\n      max = state.posMax,\n      start = state.pos,\n      parseReference = true;\n\n  if (state.src.charCodeAt(state.pos) !== 0x5B/* [ */) { return false; }\n\n  labelStart = state.pos + 1;\n  labelEnd = state.md.helpers.parseLinkLabel(state, state.pos, true);\n\n  // parser failed to find ']', so it's not a valid link\n  if (labelEnd < 0) { return false; }\n\n  pos = labelEnd + 1;\n  if (pos < max && state.src.charCodeAt(pos) === 0x28/* ( */) {\n    //\n    // Inline link\n    //\n\n    // might have found a valid shortcut link, disable reference parsing\n    parseReference = false;\n\n    // [link](  <href>  \"title\"  )\n    //        ^^ skipping these spaces\n    pos++;\n    for (; pos < max; pos++) {\n      code = state.src.charCodeAt(pos);\n      if (!isSpace(code) && code !== 0x0A) { break; }\n    }\n    if (pos >= max) { return false; }\n\n    // [link](  <href>  \"title\"  )\n    //          ^^^^^^ parsing link destination\n    start = pos;\n    res = state.md.helpers.parseLinkDestination(state.src, pos, state.posMax);\n    if (res.ok) {\n      href = state.md.normalizeLink(res.str);\n      if (state.md.validateLink(href)) {\n        pos = res.pos;\n      } else {\n        href = '';\n      }\n\n      // [link](  <href>  \"title\"  )\n      //                ^^ skipping these spaces\n      start = pos;\n      for (; pos < max; pos++) {\n        code = state.src.charCodeAt(pos);\n        if (!isSpace(code) && code !== 0x0A) { break; }\n      }\n\n      // [link](  <href>  \"title\"  )\n      //                  ^^^^^^^ parsing link title\n      res = state.md.helpers.parseLinkTitle(state.src, pos, state.posMax);\n      if (pos < max && start !== pos && res.ok) {\n        title = res.str;\n        pos = res.pos;\n\n        // [link](  <href>  \"title\"  )\n        //                         ^^ skipping these spaces\n        for (; pos < max; pos++) {\n          code = state.src.charCodeAt(pos);\n          if (!isSpace(code) && code !== 0x0A) { break; }\n        }\n      }\n    }\n\n    if (pos >= max || state.src.charCodeAt(pos) !== 0x29/* ) */) {\n      // parsing a valid shortcut link failed, fallback to reference\n      parseReference = true;\n    }\n    pos++;\n  }\n\n  if (parseReference) {\n    //\n    // Link reference\n    //\n    if (typeof state.env.references === 'undefined') { return false; }\n\n    if (pos < max && state.src.charCodeAt(pos) === 0x5B/* [ */) {\n      start = pos + 1;\n      pos = state.md.helpers.parseLinkLabel(state, pos);\n      if (pos >= 0) {\n        label = state.src.slice(start, pos++);\n      } else {\n        pos = labelEnd + 1;\n      }\n    } else {\n      pos = labelEnd + 1;\n    }\n\n    // covers label === '' and label === undefined\n    // (collapsed reference link and shortcut reference link respectively)\n    if (!label) { label = state.src.slice(labelStart, labelEnd); }\n\n    ref = state.env.references[normalizeReference(label)];\n    if (!ref) {\n      state.pos = oldPos;\n      return false;\n    }\n    href = ref.href;\n    title = ref.title;\n  }\n\n  //\n  // We found the end of the link, and know for a fact it's a valid link;\n  // so all that's left to do is to call tokenizer.\n  //\n  if (!silent) {\n    state.pos = labelStart;\n    state.posMax = labelEnd;\n\n    token        = state.push('link_open', 'a', 1);\n    token.attrs  = attrs = [ [ 'href', href ] ];\n    if (title) {\n      attrs.push([ 'title', title ]);\n    }\n\n    state.md.inline.tokenize(state);\n\n    token        = state.push('link_close', 'a', -1);\n  }\n\n  state.pos = pos;\n  state.posMax = max;\n  return true;\n};\n","// Process ![image](<src> \"title\")\n\n'use strict';\n\nvar normalizeReference   = require('../common/utils').normalizeReference;\nvar isSpace              = require('../common/utils').isSpace;\n\n\nmodule.exports = function image(state, silent) {\n  var attrs,\n      code,\n      content,\n      label,\n      labelEnd,\n      labelStart,\n      pos,\n      ref,\n      res,\n      title,\n      token,\n      tokens,\n      start,\n      href = '',\n      oldPos = state.pos,\n      max = state.posMax;\n\n  if (state.src.charCodeAt(state.pos) !== 0x21/* ! */) { return false; }\n  if (state.src.charCodeAt(state.pos + 1) !== 0x5B/* [ */) { return false; }\n\n  labelStart = state.pos + 2;\n  labelEnd = state.md.helpers.parseLinkLabel(state, state.pos + 1, false);\n\n  // parser failed to find ']', so it's not a valid link\n  if (labelEnd < 0) { return false; }\n\n  pos = labelEnd + 1;\n  if (pos < max && state.src.charCodeAt(pos) === 0x28/* ( */) {\n    //\n    // Inline link\n    //\n\n    // [link](  <href>  \"title\"  )\n    //        ^^ skipping these spaces\n    pos++;\n    for (; pos < max; pos++) {\n      code = state.src.charCodeAt(pos);\n      if (!isSpace(code) && code !== 0x0A) { break; }\n    }\n    if (pos >= max) { return false; }\n\n    // [link](  <href>  \"title\"  )\n    //          ^^^^^^ parsing link destination\n    start = pos;\n    res = state.md.helpers.parseLinkDestination(state.src, pos, state.posMax);\n    if (res.ok) {\n      href = state.md.normalizeLink(res.str);\n      if (state.md.validateLink(href)) {\n        pos = res.pos;\n      } else {\n        href = '';\n      }\n    }\n\n    // [link](  <href>  \"title\"  )\n    //                ^^ skipping these spaces\n    start = pos;\n    for (; pos < max; pos++) {\n      code = state.src.charCodeAt(pos);\n      if (!isSpace(code) && code !== 0x0A) { break; }\n    }\n\n    // [link](  <href>  \"title\"  )\n    //                  ^^^^^^^ parsing link title\n    res = state.md.helpers.parseLinkTitle(state.src, pos, state.posMax);\n    if (pos < max && start !== pos && res.ok) {\n      title = res.str;\n      pos = res.pos;\n\n      // [link](  <href>  \"title\"  )\n      //                         ^^ skipping these spaces\n      for (; pos < max; pos++) {\n        code = state.src.charCodeAt(pos);\n        if (!isSpace(code) && code !== 0x0A) { break; }\n      }\n    } else {\n      title = '';\n    }\n\n    if (pos >= max || state.src.charCodeAt(pos) !== 0x29/* ) */) {\n      state.pos = oldPos;\n      return false;\n    }\n    pos++;\n  } else {\n    //\n    // Link reference\n    //\n    if (typeof state.env.references === 'undefined') { return false; }\n\n    if (pos < max && state.src.charCodeAt(pos) === 0x5B/* [ */) {\n      start = pos + 1;\n      pos = state.md.helpers.parseLinkLabel(state, pos);\n      if (pos >= 0) {\n        label = state.src.slice(start, pos++);\n      } else {\n        pos = labelEnd + 1;\n      }\n    } else {\n      pos = labelEnd + 1;\n    }\n\n    // covers label === '' and label === undefined\n    // (collapsed reference link and shortcut reference link respectively)\n    if (!label) { label = state.src.slice(labelStart, labelEnd); }\n\n    ref = state.env.references[normalizeReference(label)];\n    if (!ref) {\n      state.pos = oldPos;\n      return false;\n    }\n    href = ref.href;\n    title = ref.title;\n  }\n\n  //\n  // We found the end of the link, and know for a fact it's a valid link;\n  // so all that's left to do is to call tokenizer.\n  //\n  if (!silent) {\n    content = state.src.slice(labelStart, labelEnd);\n\n    state.md.inline.parse(\n      content,\n      state.md,\n      state.env,\n      tokens = []\n    );\n\n    token          = state.push('image', 'img', 0);\n    token.attrs    = attrs = [ [ 'src', href ], [ 'alt', '' ] ];\n    token.children = tokens;\n    token.content  = content;\n\n    if (title) {\n      attrs.push([ 'title', title ]);\n    }\n  }\n\n  state.pos = pos;\n  state.posMax = max;\n  return true;\n};\n","// Process autolinks '<protocol:...>'\n\n'use strict';\n\n\n/*eslint max-len:0*/\nvar EMAIL_RE    = /^([a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*)$/;\nvar AUTOLINK_RE = /^([a-zA-Z][a-zA-Z0-9+.\\-]{1,31}):([^<>\\x00-\\x20]*)$/;\n\n\nmodule.exports = function autolink(state, silent) {\n  var url, fullUrl, token, ch, start, max,\n      pos = state.pos;\n\n  if (state.src.charCodeAt(pos) !== 0x3C/* < */) { return false; }\n\n  start = state.pos;\n  max = state.posMax;\n\n  for (;;) {\n    if (++pos >= max) return false;\n\n    ch = state.src.charCodeAt(pos);\n\n    if (ch === 0x3C /* < */) return false;\n    if (ch === 0x3E /* > */) break;\n  }\n\n  url = state.src.slice(start + 1, pos);\n\n  if (AUTOLINK_RE.test(url)) {\n    fullUrl = state.md.normalizeLink(url);\n    if (!state.md.validateLink(fullUrl)) { return false; }\n\n    if (!silent) {\n      token         = state.push('link_open', 'a', 1);\n      token.attrs   = [ [ 'href', fullUrl ] ];\n      token.markup  = 'autolink';\n      token.info    = 'auto';\n\n      token         = state.push('text', '', 0);\n      token.content = state.md.normalizeLinkText(url);\n\n      token         = state.push('link_close', 'a', -1);\n      token.markup  = 'autolink';\n      token.info    = 'auto';\n    }\n\n    state.pos += url.length + 2;\n    return true;\n  }\n\n  if (EMAIL_RE.test(url)) {\n    fullUrl = state.md.normalizeLink('mailto:' + url);\n    if (!state.md.validateLink(fullUrl)) { return false; }\n\n    if (!silent) {\n      token         = state.push('link_open', 'a', 1);\n      token.attrs   = [ [ 'href', fullUrl ] ];\n      token.markup  = 'autolink';\n      token.info    = 'auto';\n\n      token         = state.push('text', '', 0);\n      token.content = state.md.normalizeLinkText(url);\n\n      token         = state.push('link_close', 'a', -1);\n      token.markup  = 'autolink';\n      token.info    = 'auto';\n    }\n\n    state.pos += url.length + 2;\n    return true;\n  }\n\n  return false;\n};\n","// Process html tags\n\n'use strict';\n\n\nvar HTML_TAG_RE = require('../common/html_re').HTML_TAG_RE;\n\n\nfunction isLetter(ch) {\n  /*eslint no-bitwise:0*/\n  var lc = ch | 0x20; // to lower case\n  return (lc >= 0x61/* a */) && (lc <= 0x7a/* z */);\n}\n\n\nmodule.exports = function html_inline(state, silent) {\n  var ch, match, max, token,\n      pos = state.pos;\n\n  if (!state.md.options.html) { return false; }\n\n  // Check start\n  max = state.posMax;\n  if (state.src.charCodeAt(pos) !== 0x3C/* < */ ||\n      pos + 2 >= max) {\n    return false;\n  }\n\n  // Quick fail on second char\n  ch = state.src.charCodeAt(pos + 1);\n  if (ch !== 0x21/* ! */ &&\n      ch !== 0x3F/* ? */ &&\n      ch !== 0x2F/* / */ &&\n      !isLetter(ch)) {\n    return false;\n  }\n\n  match = state.src.slice(pos).match(HTML_TAG_RE);\n  if (!match) { return false; }\n\n  if (!silent) {\n    token         = state.push('html_inline', '', 0);\n    token.content = state.src.slice(pos, pos + match[0].length);\n  }\n  state.pos += match[0].length;\n  return true;\n};\n","// Process html entity - &#123;, &#xAF;, &quot;, ...\n\n'use strict';\n\nvar entities          = require('../common/entities');\nvar has               = require('../common/utils').has;\nvar isValidEntityCode = require('../common/utils').isValidEntityCode;\nvar fromCodePoint     = require('../common/utils').fromCodePoint;\n\n\nvar DIGITAL_RE = /^&#((?:x[a-f0-9]{1,6}|[0-9]{1,7}));/i;\nvar NAMED_RE   = /^&([a-z][a-z0-9]{1,31});/i;\n\n\nmodule.exports = function entity(state, silent) {\n  var ch, code, match, pos = state.pos, max = state.posMax;\n\n  if (state.src.charCodeAt(pos) !== 0x26/* & */) { return false; }\n\n  if (pos + 1 < max) {\n    ch = state.src.charCodeAt(pos + 1);\n\n    if (ch === 0x23 /* # */) {\n      match = state.src.slice(pos).match(DIGITAL_RE);\n      if (match) {\n        if (!silent) {\n          code = match[1][0].toLowerCase() === 'x' ? parseInt(match[1].slice(1), 16) : parseInt(match[1], 10);\n          state.pending += isValidEntityCode(code) ? fromCodePoint(code) : fromCodePoint(0xFFFD);\n        }\n        state.pos += match[0].length;\n        return true;\n      }\n    } else {\n      match = state.src.slice(pos).match(NAMED_RE);\n      if (match) {\n        if (has(entities, match[1])) {\n          if (!silent) { state.pending += entities[match[1]]; }\n          state.pos += match[0].length;\n          return true;\n        }\n      }\n    }\n  }\n\n  if (!silent) { state.pending += '&'; }\n  state.pos++;\n  return true;\n};\n","// For each opening emphasis-like marker find a matching closing one\n//\n'use strict';\n\n\nfunction processDelimiters(state, delimiters) {\n  var closerIdx, openerIdx, closer, opener, minOpenerIdx, newMinOpenerIdx,\n      isOddMatch, lastJump,\n      openersBottom = {},\n      max = delimiters.length;\n\n  for (closerIdx = 0; closerIdx < max; closerIdx++) {\n    closer = delimiters[closerIdx];\n\n    // Length is only used for emphasis-specific \"rule of 3\",\n    // if it's not defined (in strikethrough or 3rd party plugins),\n    // we can default it to 0 to disable those checks.\n    //\n    closer.length = closer.length || 0;\n\n    if (!closer.close) continue;\n\n    // Previously calculated lower bounds (previous fails)\n    // for each marker, each delimiter length modulo 3,\n    // and for whether this closer can be an opener;\n    // https://github.com/commonmark/cmark/commit/34250e12ccebdc6372b8b49c44fab57c72443460\n    if (!openersBottom.hasOwnProperty(closer.marker)) {\n      openersBottom[closer.marker] = [ -1, -1, -1, -1, -1, -1 ];\n    }\n\n    minOpenerIdx = openersBottom[closer.marker][(closer.open ? 3 : 0) + (closer.length % 3)];\n\n    openerIdx = closerIdx - closer.jump - 1;\n\n    // avoid crash if `closer.jump` is pointing outside of the array, see #742\n    if (openerIdx < -1) openerIdx = -1;\n\n    newMinOpenerIdx = openerIdx;\n\n    for (; openerIdx > minOpenerIdx; openerIdx -= opener.jump + 1) {\n      opener = delimiters[openerIdx];\n\n      if (opener.marker !== closer.marker) continue;\n\n      if (opener.open && opener.end < 0) {\n\n        isOddMatch = false;\n\n        // from spec:\n        //\n        // If one of the delimiters can both open and close emphasis, then the\n        // sum of the lengths of the delimiter runs containing the opening and\n        // closing delimiters must not be a multiple of 3 unless both lengths\n        // are multiples of 3.\n        //\n        if (opener.close || closer.open) {\n          if ((opener.length + closer.length) % 3 === 0) {\n            if (opener.length % 3 !== 0 || closer.length % 3 !== 0) {\n              isOddMatch = true;\n            }\n          }\n        }\n\n        if (!isOddMatch) {\n          // If previous delimiter cannot be an opener, we can safely skip\n          // the entire sequence in future checks. This is required to make\n          // sure algorithm has linear complexity (see *_*_*_*_*_... case).\n          //\n          lastJump = openerIdx > 0 && !delimiters[openerIdx - 1].open ?\n            delimiters[openerIdx - 1].jump + 1 :\n            0;\n\n          closer.jump  = closerIdx - openerIdx + lastJump;\n          closer.open  = false;\n          opener.end   = closerIdx;\n          opener.jump  = lastJump;\n          opener.close = false;\n          newMinOpenerIdx = -1;\n          break;\n        }\n      }\n    }\n\n    if (newMinOpenerIdx !== -1) {\n      // If match for this delimiter run failed, we want to set lower bound for\n      // future lookups. This is required to make sure algorithm has linear\n      // complexity.\n      //\n      // See details here:\n      // https://github.com/commonmark/cmark/issues/178#issuecomment-270417442\n      //\n      openersBottom[closer.marker][(closer.open ? 3 : 0) + ((closer.length || 0) % 3)] = newMinOpenerIdx;\n    }\n  }\n}\n\n\nmodule.exports = function link_pairs(state) {\n  var curr,\n      tokens_meta = state.tokens_meta,\n      max = state.tokens_meta.length;\n\n  processDelimiters(state, state.delimiters);\n\n  for (curr = 0; curr < max; curr++) {\n    if (tokens_meta[curr] && tokens_meta[curr].delimiters) {\n      processDelimiters(state, tokens_meta[curr].delimiters);\n    }\n  }\n};\n","// Clean up tokens after emphasis and strikethrough postprocessing:\n// merge adjacent text nodes into one and re-calculate all token levels\n//\n// This is necessary because initially emphasis delimiter markers (*, _, ~)\n// are treated as their own separate text tokens. Then emphasis rule either\n// leaves them as text (needed to merge with adjacent text) or turns them\n// into opening/closing tags (which messes up levels inside).\n//\n'use strict';\n\n\nmodule.exports = function text_collapse(state) {\n  var curr, last,\n      level = 0,\n      tokens = state.tokens,\n      max = state.tokens.length;\n\n  for (curr = last = 0; curr < max; curr++) {\n    // re-calculate levels after emphasis/strikethrough turns some text nodes\n    // into opening/closing tags\n    if (tokens[curr].nesting < 0) level--; // closing tag\n    tokens[curr].level = level;\n    if (tokens[curr].nesting > 0) level++; // opening tag\n\n    if (tokens[curr].type === 'text' &&\n        curr + 1 < max &&\n        tokens[curr + 1].type === 'text') {\n\n      // collapse two adjacent text nodes\n      tokens[curr + 1].content = tokens[curr].content + tokens[curr + 1].content;\n    } else {\n      if (curr !== last) { tokens[last] = tokens[curr]; }\n\n      last++;\n    }\n  }\n\n  if (curr !== last) {\n    tokens.length = last;\n  }\n};\n","// Inline parser state\n\n'use strict';\n\n\nvar Token          = require('../token');\nvar isWhiteSpace   = require('../common/utils').isWhiteSpace;\nvar isPunctChar    = require('../common/utils').isPunctChar;\nvar isMdAsciiPunct = require('../common/utils').isMdAsciiPunct;\n\n\nfunction StateInline(src, md, env, outTokens) {\n  this.src = src;\n  this.env = env;\n  this.md = md;\n  this.tokens = outTokens;\n  this.tokens_meta = Array(outTokens.length);\n\n  this.pos = 0;\n  this.posMax = this.src.length;\n  this.level = 0;\n  this.pending = '';\n  this.pendingLevel = 0;\n\n  // Stores { start: end } pairs. Useful for backtrack\n  // optimization of pairs parse (emphasis, strikes).\n  this.cache = {};\n\n  // List of emphasis-like delimiters for current tag\n  this.delimiters = [];\n\n  // Stack of delimiter lists for upper level tags\n  this._prev_delimiters = [];\n\n  // backtick length => last seen position\n  this.backticks = {};\n  this.backticksScanned = false;\n}\n\n\n// Flush pending text\n//\nStateInline.prototype.pushPending = function () {\n  var token = new Token('text', '', 0);\n  token.content = this.pending;\n  token.level = this.pendingLevel;\n  this.tokens.push(token);\n  this.pending = '';\n  return token;\n};\n\n\n// Push new token to \"stream\".\n// If pending text exists - flush it as text token\n//\nStateInline.prototype.push = function (type, tag, nesting) {\n  if (this.pending) {\n    this.pushPending();\n  }\n\n  var token = new Token(type, tag, nesting);\n  var token_meta = null;\n\n  if (nesting < 0) {\n    // closing tag\n    this.level--;\n    this.delimiters = this._prev_delimiters.pop();\n  }\n\n  token.level = this.level;\n\n  if (nesting > 0) {\n    // opening tag\n    this.level++;\n    this._prev_delimiters.push(this.delimiters);\n    this.delimiters = [];\n    token_meta = { delimiters: this.delimiters };\n  }\n\n  this.pendingLevel = this.level;\n  this.tokens.push(token);\n  this.tokens_meta.push(token_meta);\n  return token;\n};\n\n\n// Scan a sequence of emphasis-like markers, and determine whether\n// it can start an emphasis sequence or end an emphasis sequence.\n//\n//  - start - position to scan from (it should point at a valid marker);\n//  - canSplitWord - determine if these markers can be found inside a word\n//\nStateInline.prototype.scanDelims = function (start, canSplitWord) {\n  var pos = start, lastChar, nextChar, count, can_open, can_close,\n      isLastWhiteSpace, isLastPunctChar,\n      isNextWhiteSpace, isNextPunctChar,\n      left_flanking = true,\n      right_flanking = true,\n      max = this.posMax,\n      marker = this.src.charCodeAt(start);\n\n  // treat beginning of the line as a whitespace\n  lastChar = start > 0 ? this.src.charCodeAt(start - 1) : 0x20;\n\n  while (pos < max && this.src.charCodeAt(pos) === marker) { pos++; }\n\n  count = pos - start;\n\n  // treat end of the line as a whitespace\n  nextChar = pos < max ? this.src.charCodeAt(pos) : 0x20;\n\n  isLastPunctChar = isMdAsciiPunct(lastChar) || isPunctChar(String.fromCharCode(lastChar));\n  isNextPunctChar = isMdAsciiPunct(nextChar) || isPunctChar(String.fromCharCode(nextChar));\n\n  isLastWhiteSpace = isWhiteSpace(lastChar);\n  isNextWhiteSpace = isWhiteSpace(nextChar);\n\n  if (isNextWhiteSpace) {\n    left_flanking = false;\n  } else if (isNextPunctChar) {\n    if (!(isLastWhiteSpace || isLastPunctChar)) {\n      left_flanking = false;\n    }\n  }\n\n  if (isLastWhiteSpace) {\n    right_flanking = false;\n  } else if (isLastPunctChar) {\n    if (!(isNextWhiteSpace || isNextPunctChar)) {\n      right_flanking = false;\n    }\n  }\n\n  if (!canSplitWord) {\n    can_open  = left_flanking  && (!right_flanking || isLastPunctChar);\n    can_close = right_flanking && (!left_flanking  || isNextPunctChar);\n  } else {\n    can_open  = left_flanking;\n    can_close = right_flanking;\n  }\n\n  return {\n    can_open:  can_open,\n    can_close: can_close,\n    length:    count\n  };\n};\n\n\n// re-export Token class to use in block rules\nStateInline.prototype.Token = Token;\n\n\nmodule.exports = StateInline;\n","'use strict';\n\n\n////////////////////////////////////////////////////////////////////////////////\n// Helpers\n\n// Merge objects\n//\nfunction assign(obj /*from1, from2, from3, ...*/) {\n  var sources = Array.prototype.slice.call(arguments, 1);\n\n  sources.forEach(function (source) {\n    if (!source) { return; }\n\n    Object.keys(source).forEach(function (key) {\n      obj[key] = source[key];\n    });\n  });\n\n  return obj;\n}\n\nfunction _class(obj) { return Object.prototype.toString.call(obj); }\nfunction isString(obj) { return _class(obj) === '[object String]'; }\nfunction isObject(obj) { return _class(obj) === '[object Object]'; }\nfunction isRegExp(obj) { return _class(obj) === '[object RegExp]'; }\nfunction isFunction(obj) { return _class(obj) === '[object Function]'; }\n\n\nfunction escapeRE(str) { return str.replace(/[.?*+^$[\\]\\\\(){}|-]/g, '\\\\$&'); }\n\n////////////////////////////////////////////////////////////////////////////////\n\n\nvar defaultOptions = {\n  fuzzyLink: true,\n  fuzzyEmail: true,\n  fuzzyIP: false\n};\n\n\nfunction isOptionsObj(obj) {\n  return Object.keys(obj || {}).reduce(function (acc, k) {\n    return acc || defaultOptions.hasOwnProperty(k);\n  }, false);\n}\n\n\nvar defaultSchemas = {\n  'http:': {\n    validate: function (text, pos, self) {\n      var tail = text.slice(pos);\n\n      if (!self.re.http) {\n        // compile lazily, because \"host\"-containing variables can change on tlds update.\n        self.re.http =  new RegExp(\n          '^\\\\/\\\\/' + self.re.src_auth + self.re.src_host_port_strict + self.re.src_path, 'i'\n        );\n      }\n      if (self.re.http.test(tail)) {\n        return tail.match(self.re.http)[0].length;\n      }\n      return 0;\n    }\n  },\n  'https:':  'http:',\n  'ftp:':    'http:',\n  '//':      {\n    validate: function (text, pos, self) {\n      var tail = text.slice(pos);\n\n      if (!self.re.no_http) {\n      // compile lazily, because \"host\"-containing variables can change on tlds update.\n        self.re.no_http =  new RegExp(\n          '^' +\n          self.re.src_auth +\n          // Don't allow single-level domains, because of false positives like '//test'\n          // with code comments\n          '(?:localhost|(?:(?:' + self.re.src_domain + ')\\\\.)+' + self.re.src_domain_root + ')' +\n          self.re.src_port +\n          self.re.src_host_terminator +\n          self.re.src_path,\n\n          'i'\n        );\n      }\n\n      if (self.re.no_http.test(tail)) {\n        // should not be `://` & `///`, that protects from errors in protocol name\n        if (pos >= 3 && text[pos - 3] === ':') { return 0; }\n        if (pos >= 3 && text[pos - 3] === '/') { return 0; }\n        return tail.match(self.re.no_http)[0].length;\n      }\n      return 0;\n    }\n  },\n  'mailto:': {\n    validate: function (text, pos, self) {\n      var tail = text.slice(pos);\n\n      if (!self.re.mailto) {\n        self.re.mailto =  new RegExp(\n          '^' + self.re.src_email_name + '@' + self.re.src_host_strict, 'i'\n        );\n      }\n      if (self.re.mailto.test(tail)) {\n        return tail.match(self.re.mailto)[0].length;\n      }\n      return 0;\n    }\n  }\n};\n\n/*eslint-disable max-len*/\n\n// RE pattern for 2-character tlds (autogenerated by ./support/tlds_2char_gen.js)\nvar tlds_2ch_src_re = 'a[cdefgilmnoqrstuwxz]|b[abdefghijmnorstvwyz]|c[acdfghiklmnoruvwxyz]|d[ejkmoz]|e[cegrstu]|f[ijkmor]|g[abdefghilmnpqrstuwy]|h[kmnrtu]|i[delmnoqrst]|j[emop]|k[eghimnprwyz]|l[abcikrstuvy]|m[acdeghklmnopqrstuvwxyz]|n[acefgilopruz]|om|p[aefghklmnrstwy]|qa|r[eosuw]|s[abcdeghijklmnortuvxyz]|t[cdfghjklmnortvwz]|u[agksyz]|v[aceginu]|w[fs]|y[et]|z[amw]';\n\n// DON'T try to make PRs with changes. Extend TLDs with LinkifyIt.tlds() instead\nvar tlds_default = 'biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|рф'.split('|');\n\n/*eslint-enable max-len*/\n\n////////////////////////////////////////////////////////////////////////////////\n\nfunction resetScanCache(self) {\n  self.__index__ = -1;\n  self.__text_cache__   = '';\n}\n\nfunction createValidator(re) {\n  return function (text, pos) {\n    var tail = text.slice(pos);\n\n    if (re.test(tail)) {\n      return tail.match(re)[0].length;\n    }\n    return 0;\n  };\n}\n\nfunction createNormalizer() {\n  return function (match, self) {\n    self.normalize(match);\n  };\n}\n\n// Schemas compiler. Build regexps.\n//\nfunction compile(self) {\n\n  // Load & clone RE patterns.\n  var re = self.re = require('./lib/re')(self.__opts__);\n\n  // Define dynamic patterns\n  var tlds = self.__tlds__.slice();\n\n  self.onCompile();\n\n  if (!self.__tlds_replaced__) {\n    tlds.push(tlds_2ch_src_re);\n  }\n  tlds.push(re.src_xn);\n\n  re.src_tlds = tlds.join('|');\n\n  function untpl(tpl) { return tpl.replace('%TLDS%', re.src_tlds); }\n\n  re.email_fuzzy      = RegExp(untpl(re.tpl_email_fuzzy), 'i');\n  re.link_fuzzy       = RegExp(untpl(re.tpl_link_fuzzy), 'i');\n  re.link_no_ip_fuzzy = RegExp(untpl(re.tpl_link_no_ip_fuzzy), 'i');\n  re.host_fuzzy_test  = RegExp(untpl(re.tpl_host_fuzzy_test), 'i');\n\n  //\n  // Compile each schema\n  //\n\n  var aliases = [];\n\n  self.__compiled__ = {}; // Reset compiled data\n\n  function schemaError(name, val) {\n    throw new Error('(LinkifyIt) Invalid schema \"' + name + '\": ' + val);\n  }\n\n  Object.keys(self.__schemas__).forEach(function (name) {\n    var val = self.__schemas__[name];\n\n    // skip disabled methods\n    if (val === null) { return; }\n\n    var compiled = { validate: null, link: null };\n\n    self.__compiled__[name] = compiled;\n\n    if (isObject(val)) {\n      if (isRegExp(val.validate)) {\n        compiled.validate = createValidator(val.validate);\n      } else if (isFunction(val.validate)) {\n        compiled.validate = val.validate;\n      } else {\n        schemaError(name, val);\n      }\n\n      if (isFunction(val.normalize)) {\n        compiled.normalize = val.normalize;\n      } else if (!val.normalize) {\n        compiled.normalize = createNormalizer();\n      } else {\n        schemaError(name, val);\n      }\n\n      return;\n    }\n\n    if (isString(val)) {\n      aliases.push(name);\n      return;\n    }\n\n    schemaError(name, val);\n  });\n\n  //\n  // Compile postponed aliases\n  //\n\n  aliases.forEach(function (alias) {\n    if (!self.__compiled__[self.__schemas__[alias]]) {\n      // Silently fail on missed schemas to avoid errons on disable.\n      // schemaError(alias, self.__schemas__[alias]);\n      return;\n    }\n\n    self.__compiled__[alias].validate =\n      self.__compiled__[self.__schemas__[alias]].validate;\n    self.__compiled__[alias].normalize =\n      self.__compiled__[self.__schemas__[alias]].normalize;\n  });\n\n  //\n  // Fake record for guessed links\n  //\n  self.__compiled__[''] = { validate: null, normalize: createNormalizer() };\n\n  //\n  // Build schema condition\n  //\n  var slist = Object.keys(self.__compiled__)\n                      .filter(function (name) {\n                        // Filter disabled & fake schemas\n                        return name.length > 0 && self.__compiled__[name];\n                      })\n                      .map(escapeRE)\n                      .join('|');\n  // (?!_) cause 1.5x slowdown\n  self.re.schema_test   = RegExp('(^|(?!_)(?:[><\\uff5c]|' + re.src_ZPCc + '))(' + slist + ')', 'i');\n  self.re.schema_search = RegExp('(^|(?!_)(?:[><\\uff5c]|' + re.src_ZPCc + '))(' + slist + ')', 'ig');\n\n  self.re.pretest = RegExp(\n    '(' + self.re.schema_test.source + ')|(' + self.re.host_fuzzy_test.source + ')|@',\n    'i'\n  );\n\n  //\n  // Cleanup\n  //\n\n  resetScanCache(self);\n}\n\n/**\n * class Match\n *\n * Match result. Single element of array, returned by [[LinkifyIt#match]]\n **/\nfunction Match(self, shift) {\n  var start = self.__index__,\n      end   = self.__last_index__,\n      text  = self.__text_cache__.slice(start, end);\n\n  /**\n   * Match#schema -> String\n   *\n   * Prefix (protocol) for matched string.\n   **/\n  this.schema    = self.__schema__.toLowerCase();\n  /**\n   * Match#index -> Number\n   *\n   * First position of matched string.\n   **/\n  this.index     = start + shift;\n  /**\n   * Match#lastIndex -> Number\n   *\n   * Next position after matched string.\n   **/\n  this.lastIndex = end + shift;\n  /**\n   * Match#raw -> String\n   *\n   * Matched string.\n   **/\n  this.raw       = text;\n  /**\n   * Match#text -> String\n   *\n   * Notmalized text of matched string.\n   **/\n  this.text      = text;\n  /**\n   * Match#url -> String\n   *\n   * Normalized url of matched string.\n   **/\n  this.url       = text;\n}\n\nfunction createMatch(self, shift) {\n  var match = new Match(self, shift);\n\n  self.__compiled__[match.schema].normalize(match, self);\n\n  return match;\n}\n\n\n/**\n * class LinkifyIt\n **/\n\n/**\n * new LinkifyIt(schemas, options)\n * - schemas (Object): Optional. Additional schemas to validate (prefix/validator)\n * - options (Object): { fuzzyLink|fuzzyEmail|fuzzyIP: true|false }\n *\n * Creates new linkifier instance with optional additional schemas.\n * Can be called without `new` keyword for convenience.\n *\n * By default understands:\n *\n * - `http(s)://...` , `ftp://...`, `mailto:...` & `//...` links\n * - \"fuzzy\" links and emails (example.com, foo@bar.com).\n *\n * `schemas` is an object, where each key/value describes protocol/rule:\n *\n * - __key__ - link prefix (usually, protocol name with `:` at the end, `skype:`\n *   for example). `linkify-it` makes shure that prefix is not preceeded with\n *   alphanumeric char and symbols. Only whitespaces and punctuation allowed.\n * - __value__ - rule to check tail after link prefix\n *   - _String_ - just alias to existing rule\n *   - _Object_\n *     - _validate_ - validator function (should return matched length on success),\n *       or `RegExp`.\n *     - _normalize_ - optional function to normalize text & url of matched result\n *       (for example, for @twitter mentions).\n *\n * `options`:\n *\n * - __fuzzyLink__ - recognige URL-s without `http(s):` prefix. Default `true`.\n * - __fuzzyIP__ - allow IPs in fuzzy links above. Can conflict with some texts\n *   like version numbers. Default `false`.\n * - __fuzzyEmail__ - recognize emails without `mailto:` prefix.\n *\n **/\nfunction LinkifyIt(schemas, options) {\n  if (!(this instanceof LinkifyIt)) {\n    return new LinkifyIt(schemas, options);\n  }\n\n  if (!options) {\n    if (isOptionsObj(schemas)) {\n      options = schemas;\n      schemas = {};\n    }\n  }\n\n  this.__opts__           = assign({}, defaultOptions, options);\n\n  // Cache last tested result. Used to skip repeating steps on next `match` call.\n  this.__index__          = -1;\n  this.__last_index__     = -1; // Next scan position\n  this.__schema__         = '';\n  this.__text_cache__     = '';\n\n  this.__schemas__        = assign({}, defaultSchemas, schemas);\n  this.__compiled__       = {};\n\n  this.__tlds__           = tlds_default;\n  this.__tlds_replaced__  = false;\n\n  this.re = {};\n\n  compile(this);\n}\n\n\n/** chainable\n * LinkifyIt#add(schema, definition)\n * - schema (String): rule name (fixed pattern prefix)\n * - definition (String|RegExp|Object): schema definition\n *\n * Add new rule definition. See constructor description for details.\n **/\nLinkifyIt.prototype.add = function add(schema, definition) {\n  this.__schemas__[schema] = definition;\n  compile(this);\n  return this;\n};\n\n\n/** chainable\n * LinkifyIt#set(options)\n * - options (Object): { fuzzyLink|fuzzyEmail|fuzzyIP: true|false }\n *\n * Set recognition options for links without schema.\n **/\nLinkifyIt.prototype.set = function set(options) {\n  this.__opts__ = assign(this.__opts__, options);\n  return this;\n};\n\n\n/**\n * LinkifyIt#test(text) -> Boolean\n *\n * Searches linkifiable pattern and returns `true` on success or `false` on fail.\n **/\nLinkifyIt.prototype.test = function test(text) {\n  // Reset scan cache\n  this.__text_cache__ = text;\n  this.__index__      = -1;\n\n  if (!text.length) { return false; }\n\n  var m, ml, me, len, shift, next, re, tld_pos, at_pos;\n\n  // try to scan for link with schema - that's the most simple rule\n  if (this.re.schema_test.test(text)) {\n    re = this.re.schema_search;\n    re.lastIndex = 0;\n    while ((m = re.exec(text)) !== null) {\n      len = this.testSchemaAt(text, m[2], re.lastIndex);\n      if (len) {\n        this.__schema__     = m[2];\n        this.__index__      = m.index + m[1].length;\n        this.__last_index__ = m.index + m[0].length + len;\n        break;\n      }\n    }\n  }\n\n  if (this.__opts__.fuzzyLink && this.__compiled__['http:']) {\n    // guess schemaless links\n    tld_pos = text.search(this.re.host_fuzzy_test);\n    if (tld_pos >= 0) {\n      // if tld is located after found link - no need to check fuzzy pattern\n      if (this.__index__ < 0 || tld_pos < this.__index__) {\n        if ((ml = text.match(this.__opts__.fuzzyIP ? this.re.link_fuzzy : this.re.link_no_ip_fuzzy)) !== null) {\n\n          shift = ml.index + ml[1].length;\n\n          if (this.__index__ < 0 || shift < this.__index__) {\n            this.__schema__     = '';\n            this.__index__      = shift;\n            this.__last_index__ = ml.index + ml[0].length;\n          }\n        }\n      }\n    }\n  }\n\n  if (this.__opts__.fuzzyEmail && this.__compiled__['mailto:']) {\n    // guess schemaless emails\n    at_pos = text.indexOf('@');\n    if (at_pos >= 0) {\n      // We can't skip this check, because this cases are possible:\n      // 192.168.1.1@gmail.com, my.in@example.com\n      if ((me = text.match(this.re.email_fuzzy)) !== null) {\n\n        shift = me.index + me[1].length;\n        next  = me.index + me[0].length;\n\n        if (this.__index__ < 0 || shift < this.__index__ ||\n            (shift === this.__index__ && next > this.__last_index__)) {\n          this.__schema__     = 'mailto:';\n          this.__index__      = shift;\n          this.__last_index__ = next;\n        }\n      }\n    }\n  }\n\n  return this.__index__ >= 0;\n};\n\n\n/**\n * LinkifyIt#pretest(text) -> Boolean\n *\n * Very quick check, that can give false positives. Returns true if link MAY BE\n * can exists. Can be used for speed optimization, when you need to check that\n * link NOT exists.\n **/\nLinkifyIt.prototype.pretest = function pretest(text) {\n  return this.re.pretest.test(text);\n};\n\n\n/**\n * LinkifyIt#testSchemaAt(text, name, position) -> Number\n * - text (String): text to scan\n * - name (String): rule (schema) name\n * - position (Number): text offset to check from\n *\n * Similar to [[LinkifyIt#test]] but checks only specific protocol tail exactly\n * at given position. Returns length of found pattern (0 on fail).\n **/\nLinkifyIt.prototype.testSchemaAt = function testSchemaAt(text, schema, pos) {\n  // If not supported schema check requested - terminate\n  if (!this.__compiled__[schema.toLowerCase()]) {\n    return 0;\n  }\n  return this.__compiled__[schema.toLowerCase()].validate(text, pos, this);\n};\n\n\n/**\n * LinkifyIt#match(text) -> Array|null\n *\n * Returns array of found link descriptions or `null` on fail. We strongly\n * recommend to use [[LinkifyIt#test]] first, for best speed.\n *\n * ##### Result match description\n *\n * - __schema__ - link schema, can be empty for fuzzy links, or `//` for\n *   protocol-neutral  links.\n * - __index__ - offset of matched text\n * - __lastIndex__ - index of next char after mathch end\n * - __raw__ - matched text\n * - __text__ - normalized text\n * - __url__ - link, generated from matched text\n **/\nLinkifyIt.prototype.match = function match(text) {\n  var shift = 0, result = [];\n\n  // Try to take previous element from cache, if .test() called before\n  if (this.__index__ >= 0 && this.__text_cache__ === text) {\n    result.push(createMatch(this, shift));\n    shift = this.__last_index__;\n  }\n\n  // Cut head if cache was used\n  var tail = shift ? text.slice(shift) : text;\n\n  // Scan string until end reached\n  while (this.test(tail)) {\n    result.push(createMatch(this, shift));\n\n    tail = tail.slice(this.__last_index__);\n    shift += this.__last_index__;\n  }\n\n  if (result.length) {\n    return result;\n  }\n\n  return null;\n};\n\n\n/** chainable\n * LinkifyIt#tlds(list [, keepOld]) -> this\n * - list (Array): list of tlds\n * - keepOld (Boolean): merge with current list if `true` (`false` by default)\n *\n * Load (or merge) new tlds list. Those are user for fuzzy links (without prefix)\n * to avoid false positives. By default this algorythm used:\n *\n * - hostname with any 2-letter root zones are ok.\n * - biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|рф\n *   are ok.\n * - encoded (`xn--...`) root zones are ok.\n *\n * If list is replaced, then exact match for 2-chars root zones will be checked.\n **/\nLinkifyIt.prototype.tlds = function tlds(list, keepOld) {\n  list = Array.isArray(list) ? list : [ list ];\n\n  if (!keepOld) {\n    this.__tlds__ = list.slice();\n    this.__tlds_replaced__ = true;\n    compile(this);\n    return this;\n  }\n\n  this.__tlds__ = this.__tlds__.concat(list)\n                                  .sort()\n                                  .filter(function (el, idx, arr) {\n                                    return el !== arr[idx - 1];\n                                  })\n                                  .reverse();\n\n  compile(this);\n  return this;\n};\n\n/**\n * LinkifyIt#normalize(match)\n *\n * Default normalizer (if schema does not define it's own).\n **/\nLinkifyIt.prototype.normalize = function normalize(match) {\n\n  // Do minimal possible changes by default. Need to collect feedback prior\n  // to move forward https://github.com/markdown-it/linkify-it/issues/1\n\n  if (!match.schema) { match.url = 'http://' + match.url; }\n\n  if (match.schema === 'mailto:' && !/^mailto:/i.test(match.url)) {\n    match.url = 'mailto:' + match.url;\n  }\n};\n\n\n/**\n * LinkifyIt#onCompile()\n *\n * Override to modify basic RegExp-s.\n **/\nLinkifyIt.prototype.onCompile = function onCompile() {\n};\n\n\nmodule.exports = LinkifyIt;\n","'use strict';\n\n\nmodule.exports = function (opts) {\n  var re = {};\n\n  // Use direct extract instead of `regenerate` to reduse browserified size\n  re.src_Any = require('uc.micro/properties/Any/regex').source;\n  re.src_Cc  = require('uc.micro/categories/Cc/regex').source;\n  re.src_Z   = require('uc.micro/categories/Z/regex').source;\n  re.src_P   = require('uc.micro/categories/P/regex').source;\n\n  // \\p{\\Z\\P\\Cc\\CF} (white spaces + control + format + punctuation)\n  re.src_ZPCc = [ re.src_Z, re.src_P, re.src_Cc ].join('|');\n\n  // \\p{\\Z\\Cc} (white spaces + control)\n  re.src_ZCc = [ re.src_Z, re.src_Cc ].join('|');\n\n  // Experimental. List of chars, completely prohibited in links\n  // because can separate it from other part of text\n  var text_separators = '[><\\uff5c]';\n\n  // All possible word characters (everything without punctuation, spaces & controls)\n  // Defined via punctuation & spaces to save space\n  // Should be something like \\p{\\L\\N\\S\\M} (\\w but without `_`)\n  re.src_pseudo_letter       = '(?:(?!' + text_separators + '|' + re.src_ZPCc + ')' + re.src_Any + ')';\n  // The same as abothe but without [0-9]\n  // var src_pseudo_letter_non_d = '(?:(?![0-9]|' + src_ZPCc + ')' + src_Any + ')';\n\n  ////////////////////////////////////////////////////////////////////////////////\n\n  re.src_ip4 =\n\n    '(?:(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)';\n\n  // Prohibit any of \"@/[]()\" in user/pass to avoid wrong domain fetch.\n  re.src_auth    = '(?:(?:(?!' + re.src_ZCc + '|[@/\\\\[\\\\]()]).)+@)?';\n\n  re.src_port =\n\n    '(?::(?:6(?:[0-4]\\\\d{3}|5(?:[0-4]\\\\d{2}|5(?:[0-2]\\\\d|3[0-5])))|[1-5]?\\\\d{1,4}))?';\n\n  re.src_host_terminator =\n\n    '(?=$|' + text_separators + '|' + re.src_ZPCc + ')(?!-|_|:\\\\d|\\\\.-|\\\\.(?!$|' + re.src_ZPCc + '))';\n\n  re.src_path =\n\n    '(?:' +\n      '[/?#]' +\n        '(?:' +\n          '(?!' + re.src_ZCc + '|' + text_separators + '|[()[\\\\]{}.,\"\\'?!\\\\-;]).|' +\n          '\\\\[(?:(?!' + re.src_ZCc + '|\\\\]).)*\\\\]|' +\n          '\\\\((?:(?!' + re.src_ZCc + '|[)]).)*\\\\)|' +\n          '\\\\{(?:(?!' + re.src_ZCc + '|[}]).)*\\\\}|' +\n          '\\\\\"(?:(?!' + re.src_ZCc + '|[\"]).)+\\\\\"|' +\n          \"\\\\'(?:(?!\" + re.src_ZCc + \"|[']).)+\\\\'|\" +\n          \"\\\\'(?=\" + re.src_pseudo_letter + '|[-]).|' +  // allow `I'm_king` if no pair found\n          '\\\\.{2,}[a-zA-Z0-9%/&]|' + // google has many dots in \"google search\" links (#66, #81).\n                                     // github has ... in commit range links,\n                                     // Restrict to\n                                     // - english\n                                     // - percent-encoded\n                                     // - parts of file path\n                                     // - params separator\n                                     // until more examples found.\n          '\\\\.(?!' + re.src_ZCc + '|[.]).|' +\n          (opts && opts['---'] ?\n            '\\\\-(?!--(?:[^-]|$))(?:-*)|' // `---` => long dash, terminate\n            :\n            '\\\\-+|'\n          ) +\n          ',(?!' + re.src_ZCc + ').|' +       // allow `,,,` in paths\n          ';(?!' + re.src_ZCc + ').|' +       // allow `;` if not followed by space-like char\n          '\\\\!+(?!' + re.src_ZCc + '|[!]).|' +  // allow `!!!` in paths, but not at the end\n          '\\\\?(?!' + re.src_ZCc + '|[?]).' +\n        ')+' +\n      '|\\\\/' +\n    ')?';\n\n  // Allow anything in markdown spec, forbid quote (\") at the first position\n  // because emails enclosed in quotes are far more common\n  re.src_email_name =\n\n    '[\\\\-;:&=\\\\+\\\\$,\\\\.a-zA-Z0-9_][\\\\-;:&=\\\\+\\\\$,\\\\\"\\\\.a-zA-Z0-9_]*';\n\n  re.src_xn =\n\n    'xn--[a-z0-9\\\\-]{1,59}';\n\n  // More to read about domain names\n  // http://serverfault.com/questions/638260/\n\n  re.src_domain_root =\n\n    // Allow letters & digits (http://test1)\n    '(?:' +\n      re.src_xn +\n      '|' +\n      re.src_pseudo_letter + '{1,63}' +\n    ')';\n\n  re.src_domain =\n\n    '(?:' +\n      re.src_xn +\n      '|' +\n      '(?:' + re.src_pseudo_letter + ')' +\n      '|' +\n      '(?:' + re.src_pseudo_letter + '(?:-|' + re.src_pseudo_letter + '){0,61}' + re.src_pseudo_letter + ')' +\n    ')';\n\n  re.src_host =\n\n    '(?:' +\n    // Don't need IP check, because digits are already allowed in normal domain names\n    //   src_ip4 +\n    // '|' +\n      '(?:(?:(?:' + re.src_domain + ')\\\\.)*' + re.src_domain/*_root*/ + ')' +\n    ')';\n\n  re.tpl_host_fuzzy =\n\n    '(?:' +\n      re.src_ip4 +\n    '|' +\n      '(?:(?:(?:' + re.src_domain + ')\\\\.)+(?:%TLDS%))' +\n    ')';\n\n  re.tpl_host_no_ip_fuzzy =\n\n    '(?:(?:(?:' + re.src_domain + ')\\\\.)+(?:%TLDS%))';\n\n  re.src_host_strict =\n\n    re.src_host + re.src_host_terminator;\n\n  re.tpl_host_fuzzy_strict =\n\n    re.tpl_host_fuzzy + re.src_host_terminator;\n\n  re.src_host_port_strict =\n\n    re.src_host + re.src_port + re.src_host_terminator;\n\n  re.tpl_host_port_fuzzy_strict =\n\n    re.tpl_host_fuzzy + re.src_port + re.src_host_terminator;\n\n  re.tpl_host_port_no_ip_fuzzy_strict =\n\n    re.tpl_host_no_ip_fuzzy + re.src_port + re.src_host_terminator;\n\n\n  ////////////////////////////////////////////////////////////////////////////////\n  // Main rules\n\n  // Rude test fuzzy links by host, for quick deny\n  re.tpl_host_fuzzy_test =\n\n    'localhost|www\\\\.|\\\\.\\\\d{1,3}\\\\.|(?:\\\\.(?:%TLDS%)(?:' + re.src_ZPCc + '|>|$))';\n\n  re.tpl_email_fuzzy =\n\n      '(^|' + text_separators + '|\"|\\\\(|' + re.src_ZCc + ')' +\n      '(' + re.src_email_name + '@' + re.tpl_host_fuzzy_strict + ')';\n\n  re.tpl_link_fuzzy =\n      // Fuzzy link can't be prepended with .:/\\- and non punctuation.\n      // but can start with > (markdown blockquote)\n      '(^|(?![.:/\\\\-_@])(?:[$+<=>^`|\\uff5c]|' + re.src_ZPCc + '))' +\n      '((?![$+<=>^`|\\uff5c])' + re.tpl_host_port_fuzzy_strict + re.src_path + ')';\n\n  re.tpl_link_no_ip_fuzzy =\n      // Fuzzy link can't be prepended with .:/\\- and non punctuation.\n      // but can start with > (markdown blockquote)\n      '(^|(?![.:/\\\\-_@])(?:[$+<=>^`|\\uff5c]|' + re.src_ZPCc + '))' +\n      '((?![$+<=>^`|\\uff5c])' + re.tpl_host_port_no_ip_fuzzy_strict + re.src_path + ')';\n\n  return re;\n};\n","'use strict';\n\n/** Highest positive signed 32-bit float value */\nconst maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1\n\n/** Bootstring parameters */\nconst base = 36;\nconst tMin = 1;\nconst tMax = 26;\nconst skew = 38;\nconst damp = 700;\nconst initialBias = 72;\nconst initialN = 128; // 0x80\nconst delimiter = '-'; // '\\x2D'\n\n/** Regular expressions */\nconst regexPunycode = /^xn--/;\nconst regexNonASCII = /[^\\0-\\x7E]/; // non-ASCII chars\nconst regexSeparators = /[\\x2E\\u3002\\uFF0E\\uFF61]/g; // RFC 3490 separators\n\n/** Error messages */\nconst errors = {\n\t'overflow': 'Overflow: input needs wider integers to process',\n\t'not-basic': 'Illegal input >= 0x80 (not a basic code point)',\n\t'invalid-input': 'Invalid input'\n};\n\n/** Convenience shortcuts */\nconst baseMinusTMin = base - tMin;\nconst floor = Math.floor;\nconst stringFromCharCode = String.fromCharCode;\n\n/*--------------------------------------------------------------------------*/\n\n/**\n * A generic error utility function.\n * @private\n * @param {String} type The error type.\n * @returns {Error} Throws a `RangeError` with the applicable error message.\n */\nfunction error(type) {\n\tthrow new RangeError(errors[type]);\n}\n\n/**\n * A generic `Array#map` utility function.\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} callback The function that gets called for every array\n * item.\n * @returns {Array} A new array of values returned by the callback function.\n */\nfunction map(array, fn) {\n\tconst result = [];\n\tlet length = array.length;\n\twhile (length--) {\n\t\tresult[length] = fn(array[length]);\n\t}\n\treturn result;\n}\n\n/**\n * A simple `Array#map`-like wrapper to work with domain name strings or email\n * addresses.\n * @private\n * @param {String} domain The domain name or email address.\n * @param {Function} callback The function that gets called for every\n * character.\n * @returns {Array} A new string of characters returned by the callback\n * function.\n */\nfunction mapDomain(string, fn) {\n\tconst parts = string.split('@');\n\tlet result = '';\n\tif (parts.length > 1) {\n\t\t// In email addresses, only the domain name should be punycoded. Leave\n\t\t// the local part (i.e. everything up to `@`) intact.\n\t\tresult = parts[0] + '@';\n\t\tstring = parts[1];\n\t}\n\t// Avoid `split(regex)` for IE8 compatibility. See #17.\n\tstring = string.replace(regexSeparators, '\\x2E');\n\tconst labels = string.split('.');\n\tconst encoded = map(labels, fn).join('.');\n\treturn result + encoded;\n}\n\n/**\n * Creates an array containing the numeric code points of each Unicode\n * character in the string. While JavaScript uses UCS-2 internally,\n * this function will convert a pair of surrogate halves (each of which\n * UCS-2 exposes as separate characters) into a single code point,\n * matching UTF-16.\n * @see `punycode.ucs2.encode`\n * @see <https://mathiasbynens.be/notes/javascript-encoding>\n * @memberOf punycode.ucs2\n * @name decode\n * @param {String} string The Unicode input string (UCS-2).\n * @returns {Array} The new array of code points.\n */\nfunction ucs2decode(string) {\n\tconst output = [];\n\tlet counter = 0;\n\tconst length = string.length;\n\twhile (counter < length) {\n\t\tconst value = string.charCodeAt(counter++);\n\t\tif (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n\t\t\t// It's a high surrogate, and there is a next character.\n\t\t\tconst extra = string.charCodeAt(counter++);\n\t\t\tif ((extra & 0xFC00) == 0xDC00) { // Low surrogate.\n\t\t\t\toutput.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n\t\t\t} else {\n\t\t\t\t// It's an unmatched surrogate; only append this code unit, in case the\n\t\t\t\t// next code unit is the high surrogate of a surrogate pair.\n\t\t\t\toutput.push(value);\n\t\t\t\tcounter--;\n\t\t\t}\n\t\t} else {\n\t\t\toutput.push(value);\n\t\t}\n\t}\n\treturn output;\n}\n\n/**\n * Creates a string based on an array of numeric code points.\n * @see `punycode.ucs2.decode`\n * @memberOf punycode.ucs2\n * @name encode\n * @param {Array} codePoints The array of numeric code points.\n * @returns {String} The new Unicode string (UCS-2).\n */\nconst ucs2encode = array => String.fromCodePoint(...array);\n\n/**\n * Converts a basic code point into a digit/integer.\n * @see `digitToBasic()`\n * @private\n * @param {Number} codePoint The basic numeric code point value.\n * @returns {Number} The numeric value of a basic code point (for use in\n * representing integers) in the range `0` to `base - 1`, or `base` if\n * the code point does not represent a value.\n */\nconst basicToDigit = function(codePoint) {\n\tif (codePoint - 0x30 < 0x0A) {\n\t\treturn codePoint - 0x16;\n\t}\n\tif (codePoint - 0x41 < 0x1A) {\n\t\treturn codePoint - 0x41;\n\t}\n\tif (codePoint - 0x61 < 0x1A) {\n\t\treturn codePoint - 0x61;\n\t}\n\treturn base;\n};\n\n/**\n * Converts a digit/integer into a basic code point.\n * @see `basicToDigit()`\n * @private\n * @param {Number} digit The numeric value of a basic code point.\n * @returns {Number} The basic code point whose value (when used for\n * representing integers) is `digit`, which needs to be in the range\n * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\n * used; else, the lowercase form is used. The behavior is undefined\n * if `flag` is non-zero and `digit` has no uppercase form.\n */\nconst digitToBasic = function(digit, flag) {\n\t//  0..25 map to ASCII a..z or A..Z\n\t// 26..35 map to ASCII 0..9\n\treturn digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\n};\n\n/**\n * Bias adaptation function as per section 3.4 of RFC 3492.\n * https://tools.ietf.org/html/rfc3492#section-3.4\n * @private\n */\nconst adapt = function(delta, numPoints, firstTime) {\n\tlet k = 0;\n\tdelta = firstTime ? floor(delta / damp) : delta >> 1;\n\tdelta += floor(delta / numPoints);\n\tfor (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {\n\t\tdelta = floor(delta / baseMinusTMin);\n\t}\n\treturn floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\n};\n\n/**\n * Converts a Punycode string of ASCII-only symbols to a string of Unicode\n * symbols.\n * @memberOf punycode\n * @param {String} input The Punycode string of ASCII-only symbols.\n * @returns {String} The resulting string of Unicode symbols.\n */\nconst decode = function(input) {\n\t// Don't use UCS-2.\n\tconst output = [];\n\tconst inputLength = input.length;\n\tlet i = 0;\n\tlet n = initialN;\n\tlet bias = initialBias;\n\n\t// Handle the basic code points: let `basic` be the number of input code\n\t// points before the last delimiter, or `0` if there is none, then copy\n\t// the first basic code points to the output.\n\n\tlet basic = input.lastIndexOf(delimiter);\n\tif (basic < 0) {\n\t\tbasic = 0;\n\t}\n\n\tfor (let j = 0; j < basic; ++j) {\n\t\t// if it's not a basic code point\n\t\tif (input.charCodeAt(j) >= 0x80) {\n\t\t\terror('not-basic');\n\t\t}\n\t\toutput.push(input.charCodeAt(j));\n\t}\n\n\t// Main decoding loop: start just after the last delimiter if any basic code\n\t// points were copied; start at the beginning otherwise.\n\n\tfor (let index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {\n\n\t\t// `index` is the index of the next character to be consumed.\n\t\t// Decode a generalized variable-length integer into `delta`,\n\t\t// which gets added to `i`. The overflow checking is easier\n\t\t// if we increase `i` as we go, then subtract off its starting\n\t\t// value at the end to obtain `delta`.\n\t\tlet oldi = i;\n\t\tfor (let w = 1, k = base; /* no condition */; k += base) {\n\n\t\t\tif (index >= inputLength) {\n\t\t\t\terror('invalid-input');\n\t\t\t}\n\n\t\t\tconst digit = basicToDigit(input.charCodeAt(index++));\n\n\t\t\tif (digit >= base || digit > floor((maxInt - i) / w)) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\ti += digit * w;\n\t\t\tconst t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\n\t\t\tif (digit < t) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tconst baseMinusT = base - t;\n\t\t\tif (w > floor(maxInt / baseMinusT)) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tw *= baseMinusT;\n\n\t\t}\n\n\t\tconst out = output.length + 1;\n\t\tbias = adapt(i - oldi, out, oldi == 0);\n\n\t\t// `i` was supposed to wrap around from `out` to `0`,\n\t\t// incrementing `n` each time, so we'll fix that now:\n\t\tif (floor(i / out) > maxInt - n) {\n\t\t\terror('overflow');\n\t\t}\n\n\t\tn += floor(i / out);\n\t\ti %= out;\n\n\t\t// Insert `n` at position `i` of the output.\n\t\toutput.splice(i++, 0, n);\n\n\t}\n\n\treturn String.fromCodePoint(...output);\n};\n\n/**\n * Converts a string of Unicode symbols (e.g. a domain name label) to a\n * Punycode string of ASCII-only symbols.\n * @memberOf punycode\n * @param {String} input The string of Unicode symbols.\n * @returns {String} The resulting Punycode string of ASCII-only symbols.\n */\nconst encode = function(input) {\n\tconst output = [];\n\n\t// Convert the input in UCS-2 to an array of Unicode code points.\n\tinput = ucs2decode(input);\n\n\t// Cache the length.\n\tlet inputLength = input.length;\n\n\t// Initialize the state.\n\tlet n = initialN;\n\tlet delta = 0;\n\tlet bias = initialBias;\n\n\t// Handle the basic code points.\n\tfor (const currentValue of input) {\n\t\tif (currentValue < 0x80) {\n\t\t\toutput.push(stringFromCharCode(currentValue));\n\t\t}\n\t}\n\n\tlet basicLength = output.length;\n\tlet handledCPCount = basicLength;\n\n\t// `handledCPCount` is the number of code points that have been handled;\n\t// `basicLength` is the number of basic code points.\n\n\t// Finish the basic string with a delimiter unless it's empty.\n\tif (basicLength) {\n\t\toutput.push(delimiter);\n\t}\n\n\t// Main encoding loop:\n\twhile (handledCPCount < inputLength) {\n\n\t\t// All non-basic code points < n have been handled already. Find the next\n\t\t// larger one:\n\t\tlet m = maxInt;\n\t\tfor (const currentValue of input) {\n\t\t\tif (currentValue >= n && currentValue < m) {\n\t\t\t\tm = currentValue;\n\t\t\t}\n\t\t}\n\n\t\t// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,\n\t\t// but guard against overflow.\n\t\tconst handledCPCountPlusOne = handledCPCount + 1;\n\t\tif (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n\t\t\terror('overflow');\n\t\t}\n\n\t\tdelta += (m - n) * handledCPCountPlusOne;\n\t\tn = m;\n\n\t\tfor (const currentValue of input) {\n\t\t\tif (currentValue < n && ++delta > maxInt) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\t\t\tif (currentValue == n) {\n\t\t\t\t// Represent delta as a generalized variable-length integer.\n\t\t\t\tlet q = delta;\n\t\t\t\tfor (let k = base; /* no condition */; k += base) {\n\t\t\t\t\tconst t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\t\t\t\t\tif (q < t) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tconst qMinusT = q - t;\n\t\t\t\t\tconst baseMinusT = base - t;\n\t\t\t\t\toutput.push(\n\t\t\t\t\t\tstringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))\n\t\t\t\t\t);\n\t\t\t\t\tq = floor(qMinusT / baseMinusT);\n\t\t\t\t}\n\n\t\t\t\toutput.push(stringFromCharCode(digitToBasic(q, 0)));\n\t\t\t\tbias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);\n\t\t\t\tdelta = 0;\n\t\t\t\t++handledCPCount;\n\t\t\t}\n\t\t}\n\n\t\t++delta;\n\t\t++n;\n\n\t}\n\treturn output.join('');\n};\n\n/**\n * Converts a Punycode string representing a domain name or an email address\n * to Unicode. Only the Punycoded parts of the input will be converted, i.e.\n * it doesn't matter if you call it on a string that has already been\n * converted to Unicode.\n * @memberOf punycode\n * @param {String} input The Punycoded domain name or email address to\n * convert to Unicode.\n * @returns {String} The Unicode representation of the given Punycode\n * string.\n */\nconst toUnicode = function(input) {\n\treturn mapDomain(input, function(string) {\n\t\treturn regexPunycode.test(string)\n\t\t\t? decode(string.slice(4).toLowerCase())\n\t\t\t: string;\n\t});\n};\n\n/**\n * Converts a Unicode string representing a domain name or an email address to\n * Punycode. Only the non-ASCII parts of the domain name will be converted,\n * i.e. it doesn't matter if you call it with a domain that's already in\n * ASCII.\n * @memberOf punycode\n * @param {String} input The domain name or email address to convert, as a\n * Unicode string.\n * @returns {String} The Punycode representation of the given domain name or\n * email address.\n */\nconst toASCII = function(input) {\n\treturn mapDomain(input, function(string) {\n\t\treturn regexNonASCII.test(string)\n\t\t\t? 'xn--' + encode(string)\n\t\t\t: string;\n\t});\n};\n\n/*--------------------------------------------------------------------------*/\n\n/** Define the public API */\nconst punycode = {\n\t/**\n\t * A string representing the current Punycode.js version number.\n\t * @memberOf punycode\n\t * @type String\n\t */\n\t'version': '2.1.0',\n\t/**\n\t * An object of methods to convert from JavaScript's internal character\n\t * representation (UCS-2) to Unicode code points, and back.\n\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t * @memberOf punycode\n\t * @type Object\n\t */\n\t'ucs2': {\n\t\t'decode': ucs2decode,\n\t\t'encode': ucs2encode\n\t},\n\t'decode': decode,\n\t'encode': encode,\n\t'toASCII': toASCII,\n\t'toUnicode': toUnicode\n};\n\nexport { ucs2decode, ucs2encode, decode, encode, toASCII, toUnicode };\nexport default punycode;\n","// markdown-it default options\n\n'use strict';\n\n\nmodule.exports = {\n  options: {\n    html:         false,        // Enable HTML tags in source\n    xhtmlOut:     false,        // Use '/' to close single tags (<br />)\n    breaks:       false,        // Convert '\\n' in paragraphs into <br>\n    langPrefix:   'language-',  // CSS language prefix for fenced blocks\n    linkify:      false,        // autoconvert URL-like texts to links\n\n    // Enable some language-neutral replacements + quotes beautification\n    typographer:  false,\n\n    // Double + single quotes replacement pairs, when typographer enabled,\n    // and smartquotes on. Could be either a String or an Array.\n    //\n    // For example, you can use '«»„“' for Russian, '„“‚‘' for German,\n    // and ['«\\xA0', '\\xA0»', '‹\\xA0', '\\xA0›'] for French (including nbsp).\n    quotes: '\\u201c\\u201d\\u2018\\u2019', /* “”‘’ */\n\n    // Highlighter function. Should return escaped HTML,\n    // or '' if the source string is not changed and should be escaped externaly.\n    // If result starts with <pre... internal wrapper is skipped.\n    //\n    // function (/*str, lang*/) { return ''; }\n    //\n    highlight: null,\n\n    maxNesting:   100            // Internal protection, recursion limit\n  },\n\n  components: {\n\n    core: {},\n    block: {},\n    inline: {}\n  }\n};\n","// \"Zero\" preset, with nothing enabled. Useful for manual configuring of simple\n// modes. For example, to parse bold/italic only.\n\n'use strict';\n\n\nmodule.exports = {\n  options: {\n    html:         false,        // Enable HTML tags in source\n    xhtmlOut:     false,        // Use '/' to close single tags (<br />)\n    breaks:       false,        // Convert '\\n' in paragraphs into <br>\n    langPrefix:   'language-',  // CSS language prefix for fenced blocks\n    linkify:      false,        // autoconvert URL-like texts to links\n\n    // Enable some language-neutral replacements + quotes beautification\n    typographer:  false,\n\n    // Double + single quotes replacement pairs, when typographer enabled,\n    // and smartquotes on. Could be either a String or an Array.\n    //\n    // For example, you can use '«»„“' for Russian, '„“‚‘' for German,\n    // and ['«\\xA0', '\\xA0»', '‹\\xA0', '\\xA0›'] for French (including nbsp).\n    quotes: '\\u201c\\u201d\\u2018\\u2019', /* “”‘’ */\n\n    // Highlighter function. Should return escaped HTML,\n    // or '' if the source string is not changed and should be escaped externaly.\n    // If result starts with <pre... internal wrapper is skipped.\n    //\n    // function (/*str, lang*/) { return ''; }\n    //\n    highlight: null,\n\n    maxNesting:   20            // Internal protection, recursion limit\n  },\n\n  components: {\n\n    core: {\n      rules: [\n        'normalize',\n        'block',\n        'inline'\n      ]\n    },\n\n    block: {\n      rules: [\n        'paragraph'\n      ]\n    },\n\n    inline: {\n      rules: [\n        'text'\n      ],\n      rules2: [\n        'balance_pairs',\n        'text_collapse'\n      ]\n    }\n  }\n};\n","// Commonmark default options\n\n'use strict';\n\n\nmodule.exports = {\n  options: {\n    html:         true,         // Enable HTML tags in source\n    xhtmlOut:     true,         // Use '/' to close single tags (<br />)\n    breaks:       false,        // Convert '\\n' in paragraphs into <br>\n    langPrefix:   'language-',  // CSS language prefix for fenced blocks\n    linkify:      false,        // autoconvert URL-like texts to links\n\n    // Enable some language-neutral replacements + quotes beautification\n    typographer:  false,\n\n    // Double + single quotes replacement pairs, when typographer enabled,\n    // and smartquotes on. Could be either a String or an Array.\n    //\n    // For example, you can use '«»„“' for Russian, '„“‚‘' for German,\n    // and ['«\\xA0', '\\xA0»', '‹\\xA0', '\\xA0›'] for French (including nbsp).\n    quotes: '\\u201c\\u201d\\u2018\\u2019', /* “”‘’ */\n\n    // Highlighter function. Should return escaped HTML,\n    // or '' if the source string is not changed and should be escaped externaly.\n    // If result starts with <pre... internal wrapper is skipped.\n    //\n    // function (/*str, lang*/) { return ''; }\n    //\n    highlight: null,\n\n    maxNesting:   20            // Internal protection, recursion limit\n  },\n\n  components: {\n\n    core: {\n      rules: [\n        'normalize',\n        'block',\n        'inline'\n      ]\n    },\n\n    block: {\n      rules: [\n        'blockquote',\n        'code',\n        'fence',\n        'heading',\n        'hr',\n        'html_block',\n        'lheading',\n        'list',\n        'reference',\n        'paragraph'\n      ]\n    },\n\n    inline: {\n      rules: [\n        'autolink',\n        'backticks',\n        'emphasis',\n        'entity',\n        'escape',\n        'html_inline',\n        'image',\n        'link',\n        'newline',\n        'text'\n      ],\n      rules2: [\n        'balance_pairs',\n        'emphasis',\n        'text_collapse'\n      ]\n    }\n  }\n};\n"],"sourceRoot":""}