{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/markdown-it/lib/common/utils.js","webpack:///./node_modules/uc.micro/categories/P/regex.js","webpack:///./node_modules/markdown-it/lib/ruler.js","webpack:///./node_modules/markdown-it/lib/token.js","webpack:///./node_modules/markdown-it/lib/common/entities.js","webpack:///./node_modules/mdurl/index.js","webpack:///./node_modules/uc.micro/properties/Any/regex.js","webpack:///./node_modules/uc.micro/categories/Cc/regex.js","webpack:///./node_modules/uc.micro/categories/Z/regex.js","webpack:///./node_modules/markdown-it/lib/common/html_re.js","webpack:///./node_modules/markdown-it/lib/rules_inline/strikethrough.js","webpack:///./node_modules/markdown-it/lib/rules_inline/emphasis.js","webpack:///./src/script.js","webpack:///./node_modules/markdown-it/index.js","webpack:///./node_modules/markdown-it/lib/index.js","webpack:///./node_modules/mdurl/encode.js","webpack:///./node_modules/mdurl/decode.js","webpack:///./node_modules/mdurl/format.js","webpack:///./node_modules/mdurl/parse.js","webpack:///./node_modules/uc.micro/index.js","webpack:///./node_modules/uc.micro/categories/Cf/regex.js","webpack:///./node_modules/markdown-it/lib/helpers/index.js","webpack:///./node_modules/markdown-it/lib/helpers/parse_link_label.js","webpack:///./node_modules/markdown-it/lib/helpers/parse_link_destination.js","webpack:///./node_modules/markdown-it/lib/helpers/parse_link_title.js","webpack:///./node_modules/markdown-it/lib/renderer.js","webpack:///./node_modules/markdown-it/lib/parser_core.js","webpack:///./node_modules/markdown-it/lib/rules_core/normalize.js","webpack:///./node_modules/markdown-it/lib/rules_core/block.js","webpack:///./node_modules/markdown-it/lib/rules_core/inline.js","webpack:///./node_modules/markdown-it/lib/rules_core/linkify.js","webpack:///./node_modules/markdown-it/lib/rules_core/replacements.js","webpack:///./node_modules/markdown-it/lib/rules_core/smartquotes.js","webpack:///./node_modules/markdown-it/lib/rules_core/state_core.js","webpack:///./node_modules/markdown-it/lib/parser_block.js","webpack:///./node_modules/markdown-it/lib/rules_block/table.js","webpack:///./node_modules/markdown-it/lib/rules_block/code.js","webpack:///./node_modules/markdown-it/lib/rules_block/fence.js","webpack:///./node_modules/markdown-it/lib/rules_block/blockquote.js","webpack:///./node_modules/markdown-it/lib/rules_block/hr.js","webpack:///./node_modules/markdown-it/lib/rules_block/list.js","webpack:///./node_modules/markdown-it/lib/rules_block/reference.js","webpack:///./node_modules/markdown-it/lib/rules_block/heading.js","webpack:///./node_modules/markdown-it/lib/rules_block/lheading.js","webpack:///./node_modules/markdown-it/lib/rules_block/html_block.js","webpack:///./node_modules/markdown-it/lib/common/html_blocks.js","webpack:///./node_modules/markdown-it/lib/rules_block/paragraph.js","webpack:///./node_modules/markdown-it/lib/rules_block/state_block.js","webpack:///./node_modules/markdown-it/lib/parser_inline.js","webpack:///./node_modules/markdown-it/lib/rules_inline/text.js","webpack:///./node_modules/markdown-it/lib/rules_inline/newline.js","webpack:///./node_modules/markdown-it/lib/rules_inline/escape.js","webpack:///./node_modules/markdown-it/lib/rules_inline/backticks.js","webpack:///./node_modules/markdown-it/lib/rules_inline/link.js","webpack:///./node_modules/markdown-it/lib/rules_inline/image.js","webpack:///./node_modules/markdown-it/lib/rules_inline/autolink.js","webpack:///./node_modules/markdown-it/lib/rules_inline/html_inline.js","webpack:///./node_modules/markdown-it/lib/rules_inline/entity.js","webpack:///./node_modules/markdown-it/lib/rules_inline/balance_pairs.js","webpack:///./node_modules/markdown-it/lib/rules_inline/text_collapse.js","webpack:///./node_modules/markdown-it/lib/rules_inline/state_inline.js","webpack:///./node_modules/linkify-it/index.js","webpack:///./node_modules/linkify-it/lib/re.js","webpack:///./node_modules/node-libs-browser/node_modules/punycode/punycode.js","webpack:///(webpack)/buildin/module.js","webpack:///(webpack)/buildin/global.js","webpack:///./node_modules/markdown-it/lib/presets/default.js","webpack:///./node_modules/markdown-it/lib/presets/zero.js","webpack:///./node_modules/markdown-it/lib/presets/commonmark.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","_hasOwnProperty","has","isValidEntityCode","fromCodePoint","surrogate1","surrogate2","String","fromCharCode","UNESCAPE_MD_RE","UNESCAPE_ALL_RE","RegExp","source","DIGITAL_ENTITY_TEST_RE","entities","HTML_ESCAPE_TEST_RE","HTML_ESCAPE_REPLACE_RE","HTML_REPLACEMENTS","&","<",">","\"","replaceUnsafeChar","ch","REGEXP_ESCAPE_RE","UNICODE_PUNCT_RE","lib","mdurl","ucmicro","assign","obj","Array","slice","arguments","forEach","TypeError","keys","isString","toString","_class","unescapeMd","str","indexOf","replace","unescapeAll","match","escaped","entity","code","charCodeAt","test","toLowerCase","parseInt","replaceEntityPattern","escapeHtml","arrayReplaceAt","src","pos","newElements","concat","isSpace","isWhiteSpace","isMdAsciiPunct","isPunctChar","escapeRE","normalizeReference","trim","toUpperCase","Ruler","this","__rules__","__cache__","__find__","length","__compile__","self","chains","rule","enabled","alt","altName","push","chain","fn","at","options","index","opt","Error","before","beforeName","ruleName","splice","after","afterName","enable","list","ignoreInvalid","isArray","result","idx","enableOnly","disable","getRules","chainName","Token","type","tag","nesting","attrs","map","level","children","content","markup","info","meta","block","hidden","attrIndex","len","attrPush","attrData","attrSet","attrGet","attrJoin","encode","decode","format","parse","open_tag","close_tag","HTML_TAG_RE","HTML_OPEN_CLOSE_TAG_RE","tokenize","state","silent","scanned","start","marker","scanDelims","delimiters","jump","token","tokens","end","open","can_open","close","can_close","postProcess","j","startDelim","endDelim","loneMarkers","max","pop","isStrong","OCA","ReadmeMD","App","header","readme","initialize","createContainer","$","on","checkMD","change","handleMultiselect","container","addClass","remove","FL","Sharing","PublicApp","fileList","files","Files","filenum","filename","removeClass","fillContainer","zone","position","val","dir","_currentDirectory","URL","OC","generateUrl","path","file","linkToRemoteBase","done","data","renderMD","converter","html","render","height","size","document","ready","footer","utils","helpers","Renderer","ParserCore","ParserBlock","ParserInline","LinkifyIt","punycode","config","default","zero","commonmark","BAD_PROTO_RE","GOOD_DATA_RE","validateLink","url","RECODE_HOSTNAME_FOR","normalizeLink","parsed","hostname","protocol","toASCII","er","normalizeLinkText","toUnicode","MarkdownIt","presetName","inline","core","renderer","linkify","configure","set","presets","components","rules","ruler","rules2","ruler2","missed","filter","use","plugin","args","apply","env","State","process","parseInline","inlineMode","renderInline","encodeCache","string","exclude","keepEscaped","nextCode","cache","defaultChars","getEncodeCache","encodeURIComponent","componentChars","decodeCache","getDecodeCache","seq","b1","b2","b3","b4","chr","slashes","auth","port","pathname","search","hash","Url","protocolPattern","portPattern","simplePathPattern","unwise","autoEscape","nonHostChars","hostEndingChars","hostnamePartPattern","hostnamePartStart","hostlessProtocol","javascript","javascript:","slashedProtocol","http","https","ftp","gopher","http:","https:","ftp:","gopher:","file:","slashesDenoteHost","lowerProto","hec","rest","split","simplePath","exec","proto","substr","atSign","hostEnd","lastIndexOf","host","parseHost","ipv6Hostname","hostparts","part","newpart","k","validParts","notHost","bit","unshift","join","qm","u","Any","Cc","Cf","P","Z","parseLinkLabel","parseLinkDestination","parseLinkTitle","disableNested","found","prevPos","labelEnd","posMax","oldPos","md","skipToken","ok","lines","default_rules","code_inline","slf","renderAttrs","code_block","fence","highlighted","tmpAttrs","tmpToken","langName","highlight","langPrefix","image","renderInlineAsText","renderToken","hardbreak","xhtmlOut","softbreak","breaks","text","html_block","html_inline","nextToken","needLf","_rules","Core","NEWLINES_RE","NULL_RE","tok","isLinkClose","currentToken","nodes","ln","lastPos","htmlLinkLevel","fullUrl","urlText","links","blockTokens","pretest","schema","lastIndex","RARE_RE","SCOPED_ABBR_TEST_RE","SCOPED_ABBR_RE","SCOPED_ABBR","tm","replaceFn","replace_scoped","inlineTokens","inside_autolink","replace_rare","blkIdx","typographer","QUOTE_TEST_RE","QUOTE_RE","APOSTROPHE","replaceAt","process_inlines","thisLevel","item","lastChar","nextChar","isLastPunctChar","isNextPunctChar","isLastWhiteSpace","isNextWhiteSpace","canOpen","canClose","isSingle","stack","openQuote","closeQuote","OUTER","single","quotes","StateCore","startLine","endLine","line","hasEmptyLines","maxNesting","skipEmptyLines","sCount","blkIndent","tight","isEmpty","outTokens","lineMax","getLine","bMarks","eMarks","escapedSplit","escapes","backTicked","lastBackTick","substring","lineText","nextLine","columns","columnCount","aligns","tableLines","tbodyLines","tShift","last","getLines","params","mem","haveEndMarker","skipChars","skipSpaces","adjustTab","initial","lastLineEmpty","offset","oldBMarks","oldBSCount","oldIndent","oldParentType","oldSCount","oldTShift","spaceAfterMarker","terminate","terminatorRules","wasOutdented","oldLineMax","bsCount","parentType","cnt","skipBulletListMarker","skipOrderedListMarker","contentStart","indent","indentAfterMarker","isOrdered","itemLines","listLines","listTokIdx","markerCharCode","markerValue","oldLIndent","oldTight","posAfterMarker","prevEmptyEnd","isTerminatingParagraph","Number","Math","min","markTightParagraphs","_endLine","destEndPos","destEndLineNo","href","label","res","title","references","tmp","skipSpacesBack","skipCharsBack","block_names","HTML_SEQUENCES","StateBlock","indent_found","ddIndent","from","begin","keepLastLF","lineIndent","first","queue","lineStart","_rules2","pending","pushPending","isTerminatorChar","pmax","ESCAPED","matchStart","matchEnd","labelStart","ref","parseReference","EMAIL_RE","AUTOLINK_RE","tail","linkMatch","emailMatch","lc","isLetter","DIGITAL_RE","NAMED_RE","lastDelim","currDelim","curr","StateInline","pendingLevel","canSplitWord","count","left_flanking","right_flanking","isFunction","defaultOptions","fuzzyLink","fuzzyEmail","fuzzyIP","defaultSchemas","validate","re","src_auth","src_host_port_strict","src_path","//","no_http","src_domain","src_domain_root","src_port","src_host_terminator","mailto:","mailto","src_email_name","src_host_strict","tlds_2ch_src_re","tlds_default","compile","__opts__","tlds","__tlds__","untpl","tpl","src_tlds","onCompile","__tlds_replaced__","src_xn","email_fuzzy","tpl_email_fuzzy","link_fuzzy","tpl_link_fuzzy","link_no_ip_fuzzy","tpl_link_no_ip_fuzzy","host_fuzzy_test","tpl_host_fuzzy_test","aliases","schemaError","__compiled__","__schemas__","compiled","link","isRegExp","normalize","alias","slist","schema_test","src_ZPCc","schema_search","__index__","__text_cache__","resetScanCache","Match","shift","__last_index__","__schema__","raw","createMatch","schemas","reduce","acc","add","definition","ml","me","next","tld_pos","testSchemaAt","keepOld","sort","el","arr","reverse","opts","src_Any","src_Cc","src_Z","src_P","src_ZCc","src_pseudo_letter","src_ip4","src_host","tpl_host_fuzzy","tpl_host_no_ip_fuzzy","tpl_host_fuzzy_strict","tpl_host_port_fuzzy_strict","tpl_host_port_no_ip_fuzzy_strict","global","__WEBPACK_AMD_DEFINE_RESULT__","root","nodeType","freeGlobal","window","maxInt","base","tMin","tMax","skew","damp","initialBias","initialN","delimiter","regexPunycode","regexNonASCII","regexSeparators","errors","overflow","not-basic","invalid-input","baseMinusTMin","floor","stringFromCharCode","error","RangeError","array","mapDomain","parts","ucs2decode","extra","output","counter","ucs2encode","digitToBasic","digit","flag","adapt","delta","numPoints","firstTime","input","out","basic","oldi","w","baseMinusT","codePoint","inputLength","bias","handledCPCount","basicLength","q","currentValue","handledCPCountPlusOne","qMinusT","version","ucs2","undefined","webpackPolyfill","deprecate","paths","g","Function","e"],"mappings":"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","file":"script.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 12);\n","// Utilities\n//\n'use strict';\n\n\nfunction _class(obj) { return Object.prototype.toString.call(obj); }\n\nfunction isString(obj) { return _class(obj) === '[object String]'; }\n\nvar _hasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction has(object, key) {\n  return _hasOwnProperty.call(object, key);\n}\n\n// Merge objects\n//\nfunction assign(obj /*from1, from2, from3, ...*/) {\n  var sources = Array.prototype.slice.call(arguments, 1);\n\n  sources.forEach(function (source) {\n    if (!source) { return; }\n\n    if (typeof source !== 'object') {\n      throw new TypeError(source + 'must be object');\n    }\n\n    Object.keys(source).forEach(function (key) {\n      obj[key] = source[key];\n    });\n  });\n\n  return obj;\n}\n\n// Remove element from array and put another array at those position.\n// Useful for some operations with tokens\nfunction arrayReplaceAt(src, pos, newElements) {\n  return [].concat(src.slice(0, pos), newElements, src.slice(pos + 1));\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\nfunction isValidEntityCode(c) {\n  /*eslint no-bitwise:0*/\n  // broken sequence\n  if (c >= 0xD800 && c <= 0xDFFF) { return false; }\n  // never used\n  if (c >= 0xFDD0 && c <= 0xFDEF) { return false; }\n  if ((c & 0xFFFF) === 0xFFFF || (c & 0xFFFF) === 0xFFFE) { return false; }\n  // control codes\n  if (c >= 0x00 && c <= 0x08) { return false; }\n  if (c === 0x0B) { return false; }\n  if (c >= 0x0E && c <= 0x1F) { return false; }\n  if (c >= 0x7F && c <= 0x9F) { return false; }\n  // out of range\n  if (c > 0x10FFFF) { return false; }\n  return true;\n}\n\nfunction fromCodePoint(c) {\n  /*eslint no-bitwise:0*/\n  if (c > 0xffff) {\n    c -= 0x10000;\n    var surrogate1 = 0xd800 + (c >> 10),\n        surrogate2 = 0xdc00 + (c & 0x3ff);\n\n    return String.fromCharCode(surrogate1, surrogate2);\n  }\n  return String.fromCharCode(c);\n}\n\n\nvar UNESCAPE_MD_RE  = /\\\\([!\"#$%&'()*+,\\-.\\/:;<=>?@[\\\\\\]^_`{|}~])/g;\nvar ENTITY_RE       = /&([a-z#][a-z0-9]{1,31});/gi;\nvar UNESCAPE_ALL_RE = new RegExp(UNESCAPE_MD_RE.source + '|' + ENTITY_RE.source, 'gi');\n\nvar DIGITAL_ENTITY_TEST_RE = /^#((?:x[a-f0-9]{1,8}|[0-9]{1,8}))/i;\n\nvar entities = require('./entities');\n\nfunction replaceEntityPattern(match, name) {\n  var code = 0;\n\n  if (has(entities, name)) {\n    return entities[name];\n  }\n\n  if (name.charCodeAt(0) === 0x23/* # */ && DIGITAL_ENTITY_TEST_RE.test(name)) {\n    code = name[1].toLowerCase() === 'x' ?\n      parseInt(name.slice(2), 16)\n    :\n      parseInt(name.slice(1), 10);\n    if (isValidEntityCode(code)) {\n      return fromCodePoint(code);\n    }\n  }\n\n  return match;\n}\n\n/*function replaceEntities(str) {\n  if (str.indexOf('&') < 0) { return str; }\n\n  return str.replace(ENTITY_RE, replaceEntityPattern);\n}*/\n\nfunction unescapeMd(str) {\n  if (str.indexOf('\\\\') < 0) { return str; }\n  return str.replace(UNESCAPE_MD_RE, '$1');\n}\n\nfunction unescapeAll(str) {\n  if (str.indexOf('\\\\') < 0 && str.indexOf('&') < 0) { return str; }\n\n  return str.replace(UNESCAPE_ALL_RE, function (match, escaped, entity) {\n    if (escaped) { return escaped; }\n    return replaceEntityPattern(match, entity);\n  });\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\nvar HTML_ESCAPE_TEST_RE = /[&<>\"]/;\nvar HTML_ESCAPE_REPLACE_RE = /[&<>\"]/g;\nvar HTML_REPLACEMENTS = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;'\n};\n\nfunction replaceUnsafeChar(ch) {\n  return HTML_REPLACEMENTS[ch];\n}\n\nfunction escapeHtml(str) {\n  if (HTML_ESCAPE_TEST_RE.test(str)) {\n    return str.replace(HTML_ESCAPE_REPLACE_RE, replaceUnsafeChar);\n  }\n  return str;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\nvar REGEXP_ESCAPE_RE = /[.?*+^$[\\]\\\\(){}|-]/g;\n\nfunction escapeRE(str) {\n  return str.replace(REGEXP_ESCAPE_RE, '\\\\$&');\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\nfunction isSpace(code) {\n  switch (code) {\n    case 0x09:\n    case 0x20:\n      return true;\n  }\n  return false;\n}\n\n// Zs (unicode class) || [\\t\\f\\v\\r\\n]\nfunction isWhiteSpace(code) {\n  if (code >= 0x2000 && code <= 0x200A) { return true; }\n  switch (code) {\n    case 0x09: // \\t\n    case 0x0A: // \\n\n    case 0x0B: // \\v\n    case 0x0C: // \\f\n    case 0x0D: // \\r\n    case 0x20:\n    case 0xA0:\n    case 0x1680:\n    case 0x202F:\n    case 0x205F:\n    case 0x3000:\n      return true;\n  }\n  return false;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n/*eslint-disable max-len*/\nvar UNICODE_PUNCT_RE = require('uc.micro/categories/P/regex');\n\n// Currently without astral characters support.\nfunction isPunctChar(ch) {\n  return UNICODE_PUNCT_RE.test(ch);\n}\n\n\n// Markdown ASCII punctuation characters.\n//\n// !, \", #, $, %, &, ', (, ), *, +, ,, -, ., /, :, ;, <, =, >, ?, @, [, \\, ], ^, _, `, {, |, }, or ~\n// http://spec.commonmark.org/0.15/#ascii-punctuation-character\n//\n// Don't confuse with unicode punctuation !!! It lacks some chars in ascii range.\n//\nfunction isMdAsciiPunct(ch) {\n  switch (ch) {\n    case 0x21/* ! */:\n    case 0x22/* \" */:\n    case 0x23/* # */:\n    case 0x24/* $ */:\n    case 0x25/* % */:\n    case 0x26/* & */:\n    case 0x27/* ' */:\n    case 0x28/* ( */:\n    case 0x29/* ) */:\n    case 0x2A/* * */:\n    case 0x2B/* + */:\n    case 0x2C/* , */:\n    case 0x2D/* - */:\n    case 0x2E/* . */:\n    case 0x2F/* / */:\n    case 0x3A/* : */:\n    case 0x3B/* ; */:\n    case 0x3C/* < */:\n    case 0x3D/* = */:\n    case 0x3E/* > */:\n    case 0x3F/* ? */:\n    case 0x40/* @ */:\n    case 0x5B/* [ */:\n    case 0x5C/* \\ */:\n    case 0x5D/* ] */:\n    case 0x5E/* ^ */:\n    case 0x5F/* _ */:\n    case 0x60/* ` */:\n    case 0x7B/* { */:\n    case 0x7C/* | */:\n    case 0x7D/* } */:\n    case 0x7E/* ~ */:\n      return true;\n    default:\n      return false;\n  }\n}\n\n// Hepler to unify [reference labels].\n//\nfunction normalizeReference(str) {\n  // use .toUpperCase() instead of .toLowerCase()\n  // here to avoid a conflict with Object.prototype\n  // members (most notably, `__proto__`)\n  return str.trim().replace(/\\s+/g, ' ').toUpperCase();\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n// Re-export libraries commonly used in both markdown-it and its plugins,\n// so plugins won't have to depend on them explicitly, which reduces their\n// bundled size (e.g. a browser build).\n//\nexports.lib                 = {};\nexports.lib.mdurl           = require('mdurl');\nexports.lib.ucmicro         = require('uc.micro');\n\nexports.assign              = assign;\nexports.isString            = isString;\nexports.has                 = has;\nexports.unescapeMd          = unescapeMd;\nexports.unescapeAll         = unescapeAll;\nexports.isValidEntityCode   = isValidEntityCode;\nexports.fromCodePoint       = fromCodePoint;\n// exports.replaceEntities     = replaceEntities;\nexports.escapeHtml          = escapeHtml;\nexports.arrayReplaceAt      = arrayReplaceAt;\nexports.isSpace             = isSpace;\nexports.isWhiteSpace        = isWhiteSpace;\nexports.isMdAsciiPunct      = isMdAsciiPunct;\nexports.isPunctChar         = isPunctChar;\nexports.escapeRE            = escapeRE;\nexports.normalizeReference  = normalizeReference;\n","module.exports=/[!-#%-\\*,-\\/:;\\?@\\[-\\]_\\{\\}\\xA1\\xA7\\xAB\\xB6\\xB7\\xBB\\xBF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061E\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u09FD\\u0A76\\u0AF0\\u0C84\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166D\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E4E\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]|\\uD800[\\uDD00-\\uDD02\\uDF9F\\uDFD0]|\\uD801\\uDD6F|\\uD802[\\uDC57\\uDD1F\\uDD3F\\uDE50-\\uDE58\\uDE7F\\uDEF0-\\uDEF6\\uDF39-\\uDF3F\\uDF99-\\uDF9C]|\\uD803[\\uDF55-\\uDF59]|\\uD804[\\uDC47-\\uDC4D\\uDCBB\\uDCBC\\uDCBE-\\uDCC1\\uDD40-\\uDD43\\uDD74\\uDD75\\uDDC5-\\uDDC8\\uDDCD\\uDDDB\\uDDDD-\\uDDDF\\uDE38-\\uDE3D\\uDEA9]|\\uD805[\\uDC4B-\\uDC4F\\uDC5B\\uDC5D\\uDCC6\\uDDC1-\\uDDD7\\uDE41-\\uDE43\\uDE60-\\uDE6C\\uDF3C-\\uDF3E]|\\uD806[\\uDC3B\\uDE3F-\\uDE46\\uDE9A-\\uDE9C\\uDE9E-\\uDEA2]|\\uD807[\\uDC41-\\uDC45\\uDC70\\uDC71\\uDEF7\\uDEF8]|\\uD809[\\uDC70-\\uDC74]|\\uD81A[\\uDE6E\\uDE6F\\uDEF5\\uDF37-\\uDF3B\\uDF44]|\\uD81B[\\uDE97-\\uDE9A]|\\uD82F\\uDC9F|\\uD836[\\uDE87-\\uDE8B]|\\uD83A[\\uDD5E\\uDD5F]/","/**\n * class Ruler\n *\n * Helper class, used by [[MarkdownIt#core]], [[MarkdownIt#block]] and\n * [[MarkdownIt#inline]] to manage sequences of functions (rules):\n *\n * - keep rules in defined order\n * - assign the name to each rule\n * - enable/disable rules\n * - add/replace rules\n * - allow assign rules to additional named chains (in the same)\n * - cacheing lists of active rules\n *\n * You will not need use this class directly until write plugins. For simple\n * rules control use [[MarkdownIt.disable]], [[MarkdownIt.enable]] and\n * [[MarkdownIt.use]].\n **/\n'use strict';\n\n\n/**\n * new Ruler()\n **/\nfunction Ruler() {\n  // List of added rules. Each element is:\n  //\n  // {\n  //   name: XXX,\n  //   enabled: Boolean,\n  //   fn: Function(),\n  //   alt: [ name2, name3 ]\n  // }\n  //\n  this.__rules__ = [];\n\n  // Cached rule chains.\n  //\n  // First level - chain name, '' for default.\n  // Second level - diginal anchor for fast filtering by charcodes.\n  //\n  this.__cache__ = null;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// Helper methods, should not be used directly\n\n\n// Find rule index by name\n//\nRuler.prototype.__find__ = function (name) {\n  for (var i = 0; i < this.__rules__.length; i++) {\n    if (this.__rules__[i].name === name) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n\n// Build rules lookup cache\n//\nRuler.prototype.__compile__ = function () {\n  var self = this;\n  var chains = [ '' ];\n\n  // collect unique names\n  self.__rules__.forEach(function (rule) {\n    if (!rule.enabled) { return; }\n\n    rule.alt.forEach(function (altName) {\n      if (chains.indexOf(altName) < 0) {\n        chains.push(altName);\n      }\n    });\n  });\n\n  self.__cache__ = {};\n\n  chains.forEach(function (chain) {\n    self.__cache__[chain] = [];\n    self.__rules__.forEach(function (rule) {\n      if (!rule.enabled) { return; }\n\n      if (chain && rule.alt.indexOf(chain) < 0) { return; }\n\n      self.__cache__[chain].push(rule.fn);\n    });\n  });\n};\n\n\n/**\n * Ruler.at(name, fn [, options])\n * - name (String): rule name to replace.\n * - fn (Function): new rule function.\n * - options (Object): new rule options (not mandatory).\n *\n * Replace rule by name with new function & options. Throws error if name not\n * found.\n *\n * ##### Options:\n *\n * - __alt__ - array with names of \"alternate\" chains.\n *\n * ##### Example\n *\n * Replace existing typographer replacement rule with new one:\n *\n * ```javascript\n * var md = require('markdown-it')();\n *\n * md.core.ruler.at('replacements', function replace(state) {\n *   //...\n * });\n * ```\n **/\nRuler.prototype.at = function (name, fn, options) {\n  var index = this.__find__(name);\n  var opt = options || {};\n\n  if (index === -1) { throw new Error('Parser rule not found: ' + name); }\n\n  this.__rules__[index].fn = fn;\n  this.__rules__[index].alt = opt.alt || [];\n  this.__cache__ = null;\n};\n\n\n/**\n * Ruler.before(beforeName, ruleName, fn [, options])\n * - beforeName (String): new rule will be added before this one.\n * - ruleName (String): name of added rule.\n * - fn (Function): rule function.\n * - options (Object): rule options (not mandatory).\n *\n * Add new rule to chain before one with given name. See also\n * [[Ruler.after]], [[Ruler.push]].\n *\n * ##### Options:\n *\n * - __alt__ - array with names of \"alternate\" chains.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')();\n *\n * md.block.ruler.before('paragraph', 'my_rule', function replace(state) {\n *   //...\n * });\n * ```\n **/\nRuler.prototype.before = function (beforeName, ruleName, fn, options) {\n  var index = this.__find__(beforeName);\n  var opt = options || {};\n\n  if (index === -1) { throw new Error('Parser rule not found: ' + beforeName); }\n\n  this.__rules__.splice(index, 0, {\n    name: ruleName,\n    enabled: true,\n    fn: fn,\n    alt: opt.alt || []\n  });\n\n  this.__cache__ = null;\n};\n\n\n/**\n * Ruler.after(afterName, ruleName, fn [, options])\n * - afterName (String): new rule will be added after this one.\n * - ruleName (String): name of added rule.\n * - fn (Function): rule function.\n * - options (Object): rule options (not mandatory).\n *\n * Add new rule to chain after one with given name. See also\n * [[Ruler.before]], [[Ruler.push]].\n *\n * ##### Options:\n *\n * - __alt__ - array with names of \"alternate\" chains.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')();\n *\n * md.inline.ruler.after('text', 'my_rule', function replace(state) {\n *   //...\n * });\n * ```\n **/\nRuler.prototype.after = function (afterName, ruleName, fn, options) {\n  var index = this.__find__(afterName);\n  var opt = options || {};\n\n  if (index === -1) { throw new Error('Parser rule not found: ' + afterName); }\n\n  this.__rules__.splice(index + 1, 0, {\n    name: ruleName,\n    enabled: true,\n    fn: fn,\n    alt: opt.alt || []\n  });\n\n  this.__cache__ = null;\n};\n\n/**\n * Ruler.push(ruleName, fn [, options])\n * - ruleName (String): name of added rule.\n * - fn (Function): rule function.\n * - options (Object): rule options (not mandatory).\n *\n * Push new rule to the end of chain. See also\n * [[Ruler.before]], [[Ruler.after]].\n *\n * ##### Options:\n *\n * - __alt__ - array with names of \"alternate\" chains.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')();\n *\n * md.core.ruler.push('my_rule', function replace(state) {\n *   //...\n * });\n * ```\n **/\nRuler.prototype.push = function (ruleName, fn, options) {\n  var opt = options || {};\n\n  this.__rules__.push({\n    name: ruleName,\n    enabled: true,\n    fn: fn,\n    alt: opt.alt || []\n  });\n\n  this.__cache__ = null;\n};\n\n\n/**\n * Ruler.enable(list [, ignoreInvalid]) -> Array\n * - list (String|Array): list of rule names to enable.\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * Enable rules with given names. If any rule name not found - throw Error.\n * Errors can be disabled by second param.\n *\n * Returns list of found rule names (if no exception happened).\n *\n * See also [[Ruler.disable]], [[Ruler.enableOnly]].\n **/\nRuler.prototype.enable = function (list, ignoreInvalid) {\n  if (!Array.isArray(list)) { list = [ list ]; }\n\n  var result = [];\n\n  // Search by name and enable\n  list.forEach(function (name) {\n    var idx = this.__find__(name);\n\n    if (idx < 0) {\n      if (ignoreInvalid) { return; }\n      throw new Error('Rules manager: invalid rule name ' + name);\n    }\n    this.__rules__[idx].enabled = true;\n    result.push(name);\n  }, this);\n\n  this.__cache__ = null;\n  return result;\n};\n\n\n/**\n * Ruler.enableOnly(list [, ignoreInvalid])\n * - list (String|Array): list of rule names to enable (whitelist).\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * Enable rules with given names, and disable everything else. If any rule name\n * not found - throw Error. Errors can be disabled by second param.\n *\n * See also [[Ruler.disable]], [[Ruler.enable]].\n **/\nRuler.prototype.enableOnly = function (list, ignoreInvalid) {\n  if (!Array.isArray(list)) { list = [ list ]; }\n\n  this.__rules__.forEach(function (rule) { rule.enabled = false; });\n\n  this.enable(list, ignoreInvalid);\n};\n\n\n/**\n * Ruler.disable(list [, ignoreInvalid]) -> Array\n * - list (String|Array): list of rule names to disable.\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * Disable rules with given names. If any rule name not found - throw Error.\n * Errors can be disabled by second param.\n *\n * Returns list of found rule names (if no exception happened).\n *\n * See also [[Ruler.enable]], [[Ruler.enableOnly]].\n **/\nRuler.prototype.disable = function (list, ignoreInvalid) {\n  if (!Array.isArray(list)) { list = [ list ]; }\n\n  var result = [];\n\n  // Search by name and disable\n  list.forEach(function (name) {\n    var idx = this.__find__(name);\n\n    if (idx < 0) {\n      if (ignoreInvalid) { return; }\n      throw new Error('Rules manager: invalid rule name ' + name);\n    }\n    this.__rules__[idx].enabled = false;\n    result.push(name);\n  }, this);\n\n  this.__cache__ = null;\n  return result;\n};\n\n\n/**\n * Ruler.getRules(chainName) -> Array\n *\n * Return array of active functions (rules) for given chain name. It analyzes\n * rules configuration, compiles caches if not exists and returns result.\n *\n * Default chain name is `''` (empty string). It can't be skipped. That's\n * done intentionally, to keep signature monomorphic for high speed.\n **/\nRuler.prototype.getRules = function (chainName) {\n  if (this.__cache__ === null) {\n    this.__compile__();\n  }\n\n  // Chain can be empty, if rules disabled. But we still have to return Array.\n  return this.__cache__[chainName] || [];\n};\n\nmodule.exports = Ruler;\n","// Token class\n\n'use strict';\n\n\n/**\n * class Token\n **/\n\n/**\n * new Token(type, tag, nesting)\n *\n * Create new token and fill passed properties.\n **/\nfunction Token(type, tag, nesting) {\n  /**\n   * Token#type -> String\n   *\n   * Type of the token (string, e.g. \"paragraph_open\")\n   **/\n  this.type     = type;\n\n  /**\n   * Token#tag -> String\n   *\n   * html tag name, e.g. \"p\"\n   **/\n  this.tag      = tag;\n\n  /**\n   * Token#attrs -> Array\n   *\n   * Html attributes. Format: `[ [ name1, value1 ], [ name2, value2 ] ]`\n   **/\n  this.attrs    = null;\n\n  /**\n   * Token#map -> Array\n   *\n   * Source map info. Format: `[ line_begin, line_end ]`\n   **/\n  this.map      = null;\n\n  /**\n   * Token#nesting -> Number\n   *\n   * Level change (number in {-1, 0, 1} set), where:\n   *\n   * -  `1` means the tag is opening\n   * -  `0` means the tag is self-closing\n   * - `-1` means the tag is closing\n   **/\n  this.nesting  = nesting;\n\n  /**\n   * Token#level -> Number\n   *\n   * nesting level, the same as `state.level`\n   **/\n  this.level    = 0;\n\n  /**\n   * Token#children -> Array\n   *\n   * An array of child nodes (inline and img tokens)\n   **/\n  this.children = null;\n\n  /**\n   * Token#content -> String\n   *\n   * In a case of self-closing tag (code, html, fence, etc.),\n   * it has contents of this tag.\n   **/\n  this.content  = '';\n\n  /**\n   * Token#markup -> String\n   *\n   * '*' or '_' for emphasis, fence string for fence, etc.\n   **/\n  this.markup   = '';\n\n  /**\n   * Token#info -> String\n   *\n   * fence infostring\n   **/\n  this.info     = '';\n\n  /**\n   * Token#meta -> Object\n   *\n   * A place for plugins to store an arbitrary data\n   **/\n  this.meta     = null;\n\n  /**\n   * Token#block -> Boolean\n   *\n   * True for block-level tokens, false for inline tokens.\n   * Used in renderer to calculate line breaks\n   **/\n  this.block    = false;\n\n  /**\n   * Token#hidden -> Boolean\n   *\n   * If it's true, ignore this element when rendering. Used for tight lists\n   * to hide paragraphs.\n   **/\n  this.hidden   = false;\n}\n\n\n/**\n * Token.attrIndex(name) -> Number\n *\n * Search attribute index by name.\n **/\nToken.prototype.attrIndex = function attrIndex(name) {\n  var attrs, i, len;\n\n  if (!this.attrs) { return -1; }\n\n  attrs = this.attrs;\n\n  for (i = 0, len = attrs.length; i < len; i++) {\n    if (attrs[i][0] === name) { return i; }\n  }\n  return -1;\n};\n\n\n/**\n * Token.attrPush(attrData)\n *\n * Add `[ name, value ]` attribute to list. Init attrs if necessary\n **/\nToken.prototype.attrPush = function attrPush(attrData) {\n  if (this.attrs) {\n    this.attrs.push(attrData);\n  } else {\n    this.attrs = [ attrData ];\n  }\n};\n\n\n/**\n * Token.attrSet(name, value)\n *\n * Set `name` attribute to `value`. Override old value if exists.\n **/\nToken.prototype.attrSet = function attrSet(name, value) {\n  var idx = this.attrIndex(name),\n      attrData = [ name, value ];\n\n  if (idx < 0) {\n    this.attrPush(attrData);\n  } else {\n    this.attrs[idx] = attrData;\n  }\n};\n\n\n/**\n * Token.attrGet(name)\n *\n * Get the value of attribute `name`, or null if it does not exist.\n **/\nToken.prototype.attrGet = function attrGet(name) {\n  var idx = this.attrIndex(name), value = null;\n  if (idx >= 0) {\n    value = this.attrs[idx][1];\n  }\n  return value;\n};\n\n\n/**\n * Token.attrJoin(name, value)\n *\n * Join value to existing attribute via space. Or create new attribute if not\n * exists. Useful to operate with token classes.\n **/\nToken.prototype.attrJoin = function attrJoin(name, value) {\n  var idx = this.attrIndex(name);\n\n  if (idx < 0) {\n    this.attrPush([ name, value ]);\n  } else {\n    this.attrs[idx][1] = this.attrs[idx][1] + ' ' + value;\n  }\n};\n\n\nmodule.exports = Token;\n","// HTML5 entities map: { name -> utf16string }\n//\n'use strict';\n\n/*eslint quotes:0*/\nmodule.exports = require('entities/maps/entities.json');\n","'use strict';\n\n\nmodule.exports.encode = require('./encode');\nmodule.exports.decode = require('./decode');\nmodule.exports.format = require('./format');\nmodule.exports.parse  = require('./parse');\n","module.exports=/[\\0-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/","module.exports=/[\\0-\\x1F\\x7F-\\x9F]/","module.exports=/[ \\xA0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000]/","// Regexps to match html elements\n\n'use strict';\n\nvar attr_name     = '[a-zA-Z_:][a-zA-Z0-9:._-]*';\n\nvar unquoted      = '[^\"\\'=<>`\\\\x00-\\\\x20]+';\nvar single_quoted = \"'[^']*'\";\nvar double_quoted = '\"[^\"]*\"';\n\nvar attr_value  = '(?:' + unquoted + '|' + single_quoted + '|' + double_quoted + ')';\n\nvar attribute   = '(?:\\\\s+' + attr_name + '(?:\\\\s*=\\\\s*' + attr_value + ')?)';\n\nvar open_tag    = '<[A-Za-z][A-Za-z0-9\\\\-]*' + attribute + '*\\\\s*\\\\/?>';\n\nvar close_tag   = '<\\\\/[A-Za-z][A-Za-z0-9\\\\-]*\\\\s*>';\nvar comment     = '<!---->|<!--(?:-?[^>-])(?:-?[^-])*-->';\nvar processing  = '<[?].*?[?]>';\nvar declaration = '<![A-Z]+\\\\s+[^>]*>';\nvar cdata       = '<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>';\n\nvar HTML_TAG_RE = new RegExp('^(?:' + open_tag + '|' + close_tag + '|' + comment +\n                        '|' + processing + '|' + declaration + '|' + cdata + ')');\nvar HTML_OPEN_CLOSE_TAG_RE = new RegExp('^(?:' + open_tag + '|' + close_tag + ')');\n\nmodule.exports.HTML_TAG_RE = HTML_TAG_RE;\nmodule.exports.HTML_OPEN_CLOSE_TAG_RE = HTML_OPEN_CLOSE_TAG_RE;\n","// ~~strike through~~\n//\n'use strict';\n\n\n// Insert each marker as a separate text token, and add it to delimiter list\n//\nmodule.exports.tokenize = function strikethrough(state, silent) {\n  var i, scanned, token, len, ch,\n      start = state.pos,\n      marker = state.src.charCodeAt(start);\n\n  if (silent) { return false; }\n\n  if (marker !== 0x7E/* ~ */) { return false; }\n\n  scanned = state.scanDelims(state.pos, true);\n  len = scanned.length;\n  ch = String.fromCharCode(marker);\n\n  if (len < 2) { return false; }\n\n  if (len % 2) {\n    token         = state.push('text', '', 0);\n    token.content = ch;\n    len--;\n  }\n\n  for (i = 0; i < len; i += 2) {\n    token         = state.push('text', '', 0);\n    token.content = ch + ch;\n\n    state.delimiters.push({\n      marker: marker,\n      jump:   i,\n      token:  state.tokens.length - 1,\n      level:  state.level,\n      end:    -1,\n      open:   scanned.can_open,\n      close:  scanned.can_close\n    });\n  }\n\n  state.pos += scanned.length;\n\n  return true;\n};\n\n\n// Walk through delimiter list and replace text tokens with tags\n//\nmodule.exports.postProcess = function strikethrough(state) {\n  var i, j,\n      startDelim,\n      endDelim,\n      token,\n      loneMarkers = [],\n      delimiters = state.delimiters,\n      max = state.delimiters.length;\n\n  for (i = 0; i < max; i++) {\n    startDelim = delimiters[i];\n\n    if (startDelim.marker !== 0x7E/* ~ */) {\n      continue;\n    }\n\n    if (startDelim.end === -1) {\n      continue;\n    }\n\n    endDelim = delimiters[startDelim.end];\n\n    token         = state.tokens[startDelim.token];\n    token.type    = 's_open';\n    token.tag     = 's';\n    token.nesting = 1;\n    token.markup  = '~~';\n    token.content = '';\n\n    token         = state.tokens[endDelim.token];\n    token.type    = 's_close';\n    token.tag     = 's';\n    token.nesting = -1;\n    token.markup  = '~~';\n    token.content = '';\n\n    if (state.tokens[endDelim.token - 1].type === 'text' &&\n        state.tokens[endDelim.token - 1].content === '~') {\n\n      loneMarkers.push(endDelim.token - 1);\n    }\n  }\n\n  // If a marker sequence has an odd number of characters, it's splitted\n  // like this: `~~~~~` -> `~` + `~~` + `~~`, leaving one marker at the\n  // start of the sequence.\n  //\n  // So, we have to move all those markers after subsequent s_close tags.\n  //\n  while (loneMarkers.length) {\n    i = loneMarkers.pop();\n    j = i + 1;\n\n    while (j < state.tokens.length && state.tokens[j].type === 's_close') {\n      j++;\n    }\n\n    j--;\n\n    if (i !== j) {\n      token = state.tokens[j];\n      state.tokens[j] = state.tokens[i];\n      state.tokens[i] = token;\n    }\n  }\n};\n","// Process *this* and _that_\n//\n'use strict';\n\n\n// Insert each marker as a separate text token, and add it to delimiter list\n//\nmodule.exports.tokenize = function emphasis(state, silent) {\n  var i, scanned, token,\n      start = state.pos,\n      marker = state.src.charCodeAt(start);\n\n  if (silent) { return false; }\n\n  if (marker !== 0x5F /* _ */ && marker !== 0x2A /* * */) { return false; }\n\n  scanned = state.scanDelims(state.pos, marker === 0x2A);\n\n  for (i = 0; i < scanned.length; i++) {\n    token         = state.push('text', '', 0);\n    token.content = String.fromCharCode(marker);\n\n    state.delimiters.push({\n      // Char code of the starting marker (number).\n      //\n      marker: marker,\n\n      // Total length of these series of delimiters.\n      //\n      length: scanned.length,\n\n      // An amount of characters before this one that's equivalent to\n      // current one. In plain English: if this delimiter does not open\n      // an emphasis, neither do previous `jump` characters.\n      //\n      // Used to skip sequences like \"*****\" in one step, for 1st asterisk\n      // value will be 0, for 2nd it's 1 and so on.\n      //\n      jump:   i,\n\n      // A position of the token this delimiter corresponds to.\n      //\n      token:  state.tokens.length - 1,\n\n      // Token level.\n      //\n      level:  state.level,\n\n      // If this delimiter is matched as a valid opener, `end` will be\n      // equal to its position, otherwise it's `-1`.\n      //\n      end:    -1,\n\n      // Boolean flags that determine if this delimiter could open or close\n      // an emphasis.\n      //\n      open:   scanned.can_open,\n      close:  scanned.can_close\n    });\n  }\n\n  state.pos += scanned.length;\n\n  return true;\n};\n\n\n// Walk through delimiter list and replace text tokens with tags\n//\nmodule.exports.postProcess = function emphasis(state) {\n  var i,\n      startDelim,\n      endDelim,\n      token,\n      ch,\n      isStrong,\n      delimiters = state.delimiters,\n      max = state.delimiters.length;\n\n  for (i = max - 1; i >= 0; i--) {\n    startDelim = delimiters[i];\n\n    if (startDelim.marker !== 0x5F/* _ */ && startDelim.marker !== 0x2A/* * */) {\n      continue;\n    }\n\n    // Process only opening markers\n    if (startDelim.end === -1) {\n      continue;\n    }\n\n    endDelim = delimiters[startDelim.end];\n\n    // If the previous delimiter has the same marker and is adjacent to this one,\n    // merge those into one strong delimiter.\n    //\n    // `<em><em>whatever</em></em>` -> `<strong>whatever</strong>`\n    //\n    isStrong = i > 0 &&\n               delimiters[i - 1].end === startDelim.end + 1 &&\n               delimiters[i - 1].token === startDelim.token - 1 &&\n               delimiters[startDelim.end + 1].token === endDelim.token + 1 &&\n               delimiters[i - 1].marker === startDelim.marker;\n\n    ch = String.fromCharCode(startDelim.marker);\n\n    token         = state.tokens[startDelim.token];\n    token.type    = isStrong ? 'strong_open' : 'em_open';\n    token.tag     = isStrong ? 'strong' : 'em';\n    token.nesting = 1;\n    token.markup  = isStrong ? ch + ch : ch;\n    token.content = '';\n\n    token         = state.tokens[endDelim.token];\n    token.type    = isStrong ? 'strong_close' : 'em_close';\n    token.tag     = isStrong ? 'strong' : 'em';\n    token.nesting = -1;\n    token.markup  = isStrong ? ch + ch : ch;\n    token.content = '';\n\n    if (isStrong) {\n      state.tokens[delimiters[i - 1].token].content = '';\n      state.tokens[delimiters[startDelim.end + 1].token].content = '';\n      i--;\n    }\n  }\n};\n","/**\n* @namespace OCA.ReadmeMD\n*/\nOCA.ReadmeMD = {};\n\n/**\n * @namespace OCA.ReadmeMD.App\n */\nOCA.ReadmeMD.App = {\n    \n     /**\n     * Holds the MDs objects\n     */\n\theader: null,\n\treadme: null,\n    \n    /**\n     * Setup on page load\n     */\n    initialize: function (header,readme,mode) {\n\n\tvar self = this ;\n\n\t//public share or private view\n\tthis.mode = mode ;\n\n\t// container creation\n\tthis.header = header;\n\tthis.readme = readme;\n\t\n\tthis.createContainer(this.header) ;\n\tthis.createContainer(this.readme) ;\n\n\t// trigger on filetable to check if README/HEADER are present\n  \t$(\"#filestable\").on('updated',function() { self.checkMD() ; })\t    \t    \n\t    \n\t//trigger on multiselect to handle the infamous fixed position toolsbar\n\t$(\"#filestable\").on('updated',function() {\t\n\t\t$(\"#filestable input:checkbox\").change(function() {\n\t\t\t\tself.handleMultiselect() ;\n\t\t});\n\n\t});\n\n    },\n\n    /**\n     * check MD handler\n     */\n    checkMD: function() {\n\n\t\t\t//cleanup \"old\" MDs before checking for new ones\n\t\t\tthis.header.container.addClass(\"hidden\")  ;\n\t\t\tthis.header.container.children().remove() ;\n\t\t\tthis.header.content= null ;\n\t\n\t\t\tthis.readme.container.addClass(\"hidden\")  ;\n\t\t\tthis.readme.container.children().remove() ;\n\t\t\tthis.readme.content = null ;\n\n\t    \t\tif (this.mode == \"public\") {\n\t\t\t\tvar FL =  OCA.Sharing.PublicApp.fileList.files ;\n\t\t\t}else {\n\t\t\t\tvar FL =  OCA.Files.App.fileList.files ;\n\t\t\t}\n\n\t\t\t//list file from current dir and check     \n\t\t\tfor (var filenum in  FL ) {\n\t\t\t\t\t\t\t\t\n\t\t\t\tif ( FL[filenum].name == this.header.filename ) { \n\t\t\t\t\tthis.header.container.removeClass(\"hidden\") ;\n\t\t\t\t\tthis.fillContainer(OCA.ReadmeMD.header) ;\n\t\t\t\t} ;\n\n\t\t\t\tif ( FL[filenum].name == this.readme.filename ) { \n\t\t\t\t\tthis.readme.container.removeClass(\"hidden\") ;\n\t\t\t\t\tthis.fillContainer(OCA.ReadmeMD.readme) ;\n\t\t\t\t} ;\n\n\t\t\t\t//also check for dot files an prefer them.\n\t\t\t\tif ( FL[filenum].name == \".\" + this.header.filename ) {\n\t\t\t\t\tthis.header.filename = \".\" +this.header.filename ;\n\t\t\t\t\tthis.header.container.removeClass(\"hidden\") ;\n\t\t\t\t\tthis.fillContainer(OCA.ReadmeMD.header) ;\n\t\t\t\t} ;\n\n\t\t\t\tif ( FL[filenum].name == \".\" + this.readme.filename ) {\n\t\t\t\t\tthis.readme.filename = \".\" +this.readme.filename ;\n\t\t\t\t\tthis.readme.container.removeClass(\"hidden\") ;\n\t\t\t\t\tthis.fillContainer(OCA.ReadmeMD.readme) ;\n\t\t\t\t} ;\t\t\t\n\t\t\t} ;\n    },\n\n    /**\n     * show contenair\n     */\n   createContainer: function(zone) {\n\t   \n\t if (zone.position == \"before\")\n\t   { $('#filestable').before(zone.container)  ; }\n\n\t if (zone.position == \"after\")\n\t   { $('#filestable').after(zone.container) ; }\n   },\n\n\n  /**\n  * fill container\n  */\n  fillContainer: function(zone) {\n\t\n\tvar self=this ;\n\t\n\tif (this.mode == 'public') {\n\t\tvar token = $('#sharingToken').val()\n\t\tvar dir = OCA.Sharing.PublicApp.fileList._currentDirectory ;\n\t\tvar URL = OC.generateUrl('/s/{token}/download?path={path}&files={file}', {token: token, path: dir, file: zone.filename});\n\t}else{\n\t\tvar dir = OCA.Files.App.fileList._currentDirectory ;\n\t\tvar URL = OC.linkToRemoteBase('files'+ dir +\"/\" +zone.filename)\n\t} ;\n\t//load header file via remote call apps\n\t$.get(URL)\n\t\t.done(function(data) {\n\t\t\t//promise solved -> render MarkDown\n\t\t\tzone.content=data ;\n\t\t\tself.renderMD(zone) ;\n\t }) ;\n  },\n\n  /**\n   * Render Markdown\n   **/\n  renderMD: function(zone) {\n\t//render MD\n\tvar converter = require('markdown-it')() ;\n\tzone.container.html(converter.render(zone.content)) ;\n\t$(\"#filestable > tfoot > tr\").height(\"auto\") ;\n   },\n\n  /**\n   * Handle Multiselect\n   **/\n  handleMultiselect: function() {\n\t  // on checkbox change on filestable, check the multiselect class to hide header\n\t  // and move footer 70px down, see css\n\t  if ($(\"#filestable input:checked\").size() > 0 ) {\n\t\t  this.header.container.addClass(\"hidden\") ;\n\t\t  this.readme.container.addClass(\"down\")   ;\n\t  } else {\n\t\t if (this.header.content != null) {\n\t\t \tthis.header.container.removeClass(\"hidden\") ;\n\t\t }\n\t\t this.readme.container.removeClass(\"down\") ;\n\t  }\n  }\n\n};\n\nOCA.ReadmeMD = OCA.ReadmeMD.App ;\n\n$(document).ready(function () {\n \t// Don't load if not in the files app\n        if ($('#content.app-files').length) {\n            var mode = 'private';\n        } else {\n\t\tif ($('#content.app-files_sharing').length) {\n            \t\tvar mode = 'public';\n        \t} else {\n\t\t\treturn ;\n\t\t}\n\t} ;\n\n\tvar header = {\n\t\tcontainer: $('<div id=\"headerMD\" class=\"hidden markdown-body headermd\"></div>'),\n\t\tposition : \"before\",\n\t\tfilename : \"HEADER.md\",\n\t\tcontent  : null\n\t} ;\n\n\tvar footer = {\n\t\tcontainer: $('<div id=\"readmeMD\" class=\"hidden markdown-body readmemd\"></div>'),\n\t\tposition : \"after\",\n\t\tfilename : \"README.md\",\n\t\tcontent  :  null\n\t} ;\n\n\tOCA.ReadmeMD.initialize(header,footer,mode);\n\n});\n\n\n","'use strict';\n\n\nmodule.exports = require('./lib/');\n","// Main parser class\n\n'use strict';\n\n\nvar utils        = require('./common/utils');\nvar helpers      = require('./helpers');\nvar Renderer     = require('./renderer');\nvar ParserCore   = require('./parser_core');\nvar ParserBlock  = require('./parser_block');\nvar ParserInline = require('./parser_inline');\nvar LinkifyIt    = require('linkify-it');\nvar mdurl        = require('mdurl');\nvar punycode     = require('punycode');\n\n\nvar config = {\n  'default': require('./presets/default'),\n  zero: require('./presets/zero'),\n  commonmark: require('./presets/commonmark')\n};\n\n////////////////////////////////////////////////////////////////////////////////\n//\n// This validator can prohibit more than really needed to prevent XSS. It's a\n// tradeoff to keep code simple and to be secure by default.\n//\n// If you need different setup - override validator method as you wish. Or\n// replace it with dummy function and use external sanitizer.\n//\n\nvar BAD_PROTO_RE = /^(vbscript|javascript|file|data):/;\nvar GOOD_DATA_RE = /^data:image\\/(gif|png|jpeg|webp);/;\n\nfunction validateLink(url) {\n  // url should be normalized at this point, and existing entities are decoded\n  var str = url.trim().toLowerCase();\n\n  return BAD_PROTO_RE.test(str) ? (GOOD_DATA_RE.test(str) ? true : false) : true;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n\nvar RECODE_HOSTNAME_FOR = [ 'http:', 'https:', 'mailto:' ];\n\nfunction normalizeLink(url) {\n  var parsed = mdurl.parse(url, true);\n\n  if (parsed.hostname) {\n    // Encode hostnames in urls like:\n    // `http://host/`, `https://host/`, `mailto:user@host`, `//host/`\n    //\n    // We don't encode unknown schemas, because it's likely that we encode\n    // something we shouldn't (e.g. `skype:name` treated as `skype:host`)\n    //\n    if (!parsed.protocol || RECODE_HOSTNAME_FOR.indexOf(parsed.protocol) >= 0) {\n      try {\n        parsed.hostname = punycode.toASCII(parsed.hostname);\n      } catch (er) { /**/ }\n    }\n  }\n\n  return mdurl.encode(mdurl.format(parsed));\n}\n\nfunction normalizeLinkText(url) {\n  var parsed = mdurl.parse(url, true);\n\n  if (parsed.hostname) {\n    // Encode hostnames in urls like:\n    // `http://host/`, `https://host/`, `mailto:user@host`, `//host/`\n    //\n    // We don't encode unknown schemas, because it's likely that we encode\n    // something we shouldn't (e.g. `skype:name` treated as `skype:host`)\n    //\n    if (!parsed.protocol || RECODE_HOSTNAME_FOR.indexOf(parsed.protocol) >= 0) {\n      try {\n        parsed.hostname = punycode.toUnicode(parsed.hostname);\n      } catch (er) { /**/ }\n    }\n  }\n\n  return mdurl.decode(mdurl.format(parsed));\n}\n\n\n/**\n * class MarkdownIt\n *\n * Main parser/renderer class.\n *\n * ##### Usage\n *\n * ```javascript\n * // node.js, \"classic\" way:\n * var MarkdownIt = require('markdown-it'),\n *     md = new MarkdownIt();\n * var result = md.render('# markdown-it rulezz!');\n *\n * // node.js, the same, but with sugar:\n * var md = require('markdown-it')();\n * var result = md.render('# markdown-it rulezz!');\n *\n * // browser without AMD, added to \"window\" on script load\n * // Note, there are no dash.\n * var md = window.markdownit();\n * var result = md.render('# markdown-it rulezz!');\n * ```\n *\n * Single line rendering, without paragraph wrap:\n *\n * ```javascript\n * var md = require('markdown-it')();\n * var result = md.renderInline('__markdown-it__ rulezz!');\n * ```\n **/\n\n/**\n * new MarkdownIt([presetName, options])\n * - presetName (String): optional, `commonmark` / `zero`\n * - options (Object)\n *\n * Creates parser instanse with given config. Can be called without `new`.\n *\n * ##### presetName\n *\n * MarkdownIt provides named presets as a convenience to quickly\n * enable/disable active syntax rules and options for common use cases.\n *\n * - [\"commonmark\"](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/commonmark.js) -\n *   configures parser to strict [CommonMark](http://commonmark.org/) mode.\n * - [default](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/default.js) -\n *   similar to GFM, used when no preset name given. Enables all available rules,\n *   but still without html, typographer & autolinker.\n * - [\"zero\"](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/zero.js) -\n *   all rules disabled. Useful to quickly setup your config via `.enable()`.\n *   For example, when you need only `bold` and `italic` markup and nothing else.\n *\n * ##### options:\n *\n * - __html__ - `false`. Set `true` to enable HTML tags in source. Be careful!\n *   That's not safe! You may need external sanitizer to protect output from XSS.\n *   It's better to extend features via plugins, instead of enabling HTML.\n * - __xhtmlOut__ - `false`. Set `true` to add '/' when closing single tags\n *   (`<br />`). This is needed only for full CommonMark compatibility. In real\n *   world you will need HTML output.\n * - __breaks__ - `false`. Set `true` to convert `\\n` in paragraphs into `<br>`.\n * - __langPrefix__ - `language-`. CSS language class prefix for fenced blocks.\n *   Can be useful for external highlighters.\n * - __linkify__ - `false`. Set `true` to autoconvert URL-like text to links.\n * - __typographer__  - `false`. Set `true` to enable [some language-neutral\n *   replacement](https://github.com/markdown-it/markdown-it/blob/master/lib/rules_core/replacements.js) +\n *   quotes beautification (smartquotes).\n * - __quotes__ - `“”‘’`, String or Array. Double + single quotes replacement\n *   pairs, when typographer enabled and smartquotes on. For example, you can\n *   use `'«»„“'` for Russian, `'„“‚‘'` for German, and\n *   `['«\\xA0', '\\xA0»', '‹\\xA0', '\\xA0›']` for French (including nbsp).\n * - __highlight__ - `null`. Highlighter function for fenced code blocks.\n *   Highlighter `function (str, lang)` should return escaped HTML. It can also\n *   return empty string if the source was not changed and should be escaped\n *   externaly. If result starts with <pre... internal wrapper is skipped.\n *\n * ##### Example\n *\n * ```javascript\n * // commonmark mode\n * var md = require('markdown-it')('commonmark');\n *\n * // default mode\n * var md = require('markdown-it')();\n *\n * // enable everything\n * var md = require('markdown-it')({\n *   html: true,\n *   linkify: true,\n *   typographer: true\n * });\n * ```\n *\n * ##### Syntax highlighting\n *\n * ```js\n * var hljs = require('highlight.js') // https://highlightjs.org/\n *\n * var md = require('markdown-it')({\n *   highlight: function (str, lang) {\n *     if (lang && hljs.getLanguage(lang)) {\n *       try {\n *         return hljs.highlight(lang, str, true).value;\n *       } catch (__) {}\n *     }\n *\n *     return ''; // use external default escaping\n *   }\n * });\n * ```\n *\n * Or with full wrapper override (if you need assign class to `<pre>`):\n *\n * ```javascript\n * var hljs = require('highlight.js') // https://highlightjs.org/\n *\n * // Actual default values\n * var md = require('markdown-it')({\n *   highlight: function (str, lang) {\n *     if (lang && hljs.getLanguage(lang)) {\n *       try {\n *         return '<pre class=\"hljs\"><code>' +\n *                hljs.highlight(lang, str, true).value +\n *                '</code></pre>';\n *       } catch (__) {}\n *     }\n *\n *     return '<pre class=\"hljs\"><code>' + md.utils.escapeHtml(str) + '</code></pre>';\n *   }\n * });\n * ```\n *\n **/\nfunction MarkdownIt(presetName, options) {\n  if (!(this instanceof MarkdownIt)) {\n    return new MarkdownIt(presetName, options);\n  }\n\n  if (!options) {\n    if (!utils.isString(presetName)) {\n      options = presetName || {};\n      presetName = 'default';\n    }\n  }\n\n  /**\n   * MarkdownIt#inline -> ParserInline\n   *\n   * Instance of [[ParserInline]]. You may need it to add new rules when\n   * writing plugins. For simple rules control use [[MarkdownIt.disable]] and\n   * [[MarkdownIt.enable]].\n   **/\n  this.inline = new ParserInline();\n\n  /**\n   * MarkdownIt#block -> ParserBlock\n   *\n   * Instance of [[ParserBlock]]. You may need it to add new rules when\n   * writing plugins. For simple rules control use [[MarkdownIt.disable]] and\n   * [[MarkdownIt.enable]].\n   **/\n  this.block = new ParserBlock();\n\n  /**\n   * MarkdownIt#core -> Core\n   *\n   * Instance of [[Core]] chain executor. You may need it to add new rules when\n   * writing plugins. For simple rules control use [[MarkdownIt.disable]] and\n   * [[MarkdownIt.enable]].\n   **/\n  this.core = new ParserCore();\n\n  /**\n   * MarkdownIt#renderer -> Renderer\n   *\n   * Instance of [[Renderer]]. Use it to modify output look. Or to add rendering\n   * rules for new token types, generated by plugins.\n   *\n   * ##### Example\n   *\n   * ```javascript\n   * var md = require('markdown-it')();\n   *\n   * function myToken(tokens, idx, options, env, self) {\n   *   //...\n   *   return result;\n   * };\n   *\n   * md.renderer.rules['my_token'] = myToken\n   * ```\n   *\n   * See [[Renderer]] docs and [source code](https://github.com/markdown-it/markdown-it/blob/master/lib/renderer.js).\n   **/\n  this.renderer = new Renderer();\n\n  /**\n   * MarkdownIt#linkify -> LinkifyIt\n   *\n   * [linkify-it](https://github.com/markdown-it/linkify-it) instance.\n   * Used by [linkify](https://github.com/markdown-it/markdown-it/blob/master/lib/rules_core/linkify.js)\n   * rule.\n   **/\n  this.linkify = new LinkifyIt();\n\n  /**\n   * MarkdownIt#validateLink(url) -> Boolean\n   *\n   * Link validation function. CommonMark allows too much in links. By default\n   * we disable `javascript:`, `vbscript:`, `file:` schemas, and almost all `data:...` schemas\n   * except some embedded image types.\n   *\n   * You can change this behaviour:\n   *\n   * ```javascript\n   * var md = require('markdown-it')();\n   * // enable everything\n   * md.validateLink = function () { return true; }\n   * ```\n   **/\n  this.validateLink = validateLink;\n\n  /**\n   * MarkdownIt#normalizeLink(url) -> String\n   *\n   * Function used to encode link url to a machine-readable format,\n   * which includes url-encoding, punycode, etc.\n   **/\n  this.normalizeLink = normalizeLink;\n\n  /**\n   * MarkdownIt#normalizeLinkText(url) -> String\n   *\n   * Function used to decode link url to a human-readable format`\n   **/\n  this.normalizeLinkText = normalizeLinkText;\n\n\n  // Expose utils & helpers for easy acces from plugins\n\n  /**\n   * MarkdownIt#utils -> utils\n   *\n   * Assorted utility functions, useful to write plugins. See details\n   * [here](https://github.com/markdown-it/markdown-it/blob/master/lib/common/utils.js).\n   **/\n  this.utils = utils;\n\n  /**\n   * MarkdownIt#helpers -> helpers\n   *\n   * Link components parser functions, useful to write plugins. See details\n   * [here](https://github.com/markdown-it/markdown-it/blob/master/lib/helpers).\n   **/\n  this.helpers = utils.assign({}, helpers);\n\n\n  this.options = {};\n  this.configure(presetName);\n\n  if (options) { this.set(options); }\n}\n\n\n/** chainable\n * MarkdownIt.set(options)\n *\n * Set parser options (in the same format as in constructor). Probably, you\n * will never need it, but you can change options after constructor call.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')()\n *             .set({ html: true, breaks: true })\n *             .set({ typographer, true });\n * ```\n *\n * __Note:__ To achieve the best possible performance, don't modify a\n * `markdown-it` instance options on the fly. If you need multiple configurations\n * it's best to create multiple instances and initialize each with separate\n * config.\n **/\nMarkdownIt.prototype.set = function (options) {\n  utils.assign(this.options, options);\n  return this;\n};\n\n\n/** chainable, internal\n * MarkdownIt.configure(presets)\n *\n * Batch load of all options and compenent settings. This is internal method,\n * and you probably will not need it. But if you with - see available presets\n * and data structure [here](https://github.com/markdown-it/markdown-it/tree/master/lib/presets)\n *\n * We strongly recommend to use presets instead of direct config loads. That\n * will give better compatibility with next versions.\n **/\nMarkdownIt.prototype.configure = function (presets) {\n  var self = this, presetName;\n\n  if (utils.isString(presets)) {\n    presetName = presets;\n    presets = config[presetName];\n    if (!presets) { throw new Error('Wrong `markdown-it` preset \"' + presetName + '\", check name'); }\n  }\n\n  if (!presets) { throw new Error('Wrong `markdown-it` preset, can\\'t be empty'); }\n\n  if (presets.options) { self.set(presets.options); }\n\n  if (presets.components) {\n    Object.keys(presets.components).forEach(function (name) {\n      if (presets.components[name].rules) {\n        self[name].ruler.enableOnly(presets.components[name].rules);\n      }\n      if (presets.components[name].rules2) {\n        self[name].ruler2.enableOnly(presets.components[name].rules2);\n      }\n    });\n  }\n  return this;\n};\n\n\n/** chainable\n * MarkdownIt.enable(list, ignoreInvalid)\n * - list (String|Array): rule name or list of rule names to enable\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * Enable list or rules. It will automatically find appropriate components,\n * containing rules with given names. If rule not found, and `ignoreInvalid`\n * not set - throws exception.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')()\n *             .enable(['sub', 'sup'])\n *             .disable('smartquotes');\n * ```\n **/\nMarkdownIt.prototype.enable = function (list, ignoreInvalid) {\n  var result = [];\n\n  if (!Array.isArray(list)) { list = [ list ]; }\n\n  [ 'core', 'block', 'inline' ].forEach(function (chain) {\n    result = result.concat(this[chain].ruler.enable(list, true));\n  }, this);\n\n  result = result.concat(this.inline.ruler2.enable(list, true));\n\n  var missed = list.filter(function (name) { return result.indexOf(name) < 0; });\n\n  if (missed.length && !ignoreInvalid) {\n    throw new Error('MarkdownIt. Failed to enable unknown rule(s): ' + missed);\n  }\n\n  return this;\n};\n\n\n/** chainable\n * MarkdownIt.disable(list, ignoreInvalid)\n * - list (String|Array): rule name or list of rule names to disable.\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * The same as [[MarkdownIt.enable]], but turn specified rules off.\n **/\nMarkdownIt.prototype.disable = function (list, ignoreInvalid) {\n  var result = [];\n\n  if (!Array.isArray(list)) { list = [ list ]; }\n\n  [ 'core', 'block', 'inline' ].forEach(function (chain) {\n    result = result.concat(this[chain].ruler.disable(list, true));\n  }, this);\n\n  result = result.concat(this.inline.ruler2.disable(list, true));\n\n  var missed = list.filter(function (name) { return result.indexOf(name) < 0; });\n\n  if (missed.length && !ignoreInvalid) {\n    throw new Error('MarkdownIt. Failed to disable unknown rule(s): ' + missed);\n  }\n  return this;\n};\n\n\n/** chainable\n * MarkdownIt.use(plugin, params)\n *\n * Load specified plugin with given params into current parser instance.\n * It's just a sugar to call `plugin(md, params)` with curring.\n *\n * ##### Example\n *\n * ```javascript\n * var iterator = require('markdown-it-for-inline');\n * var md = require('markdown-it')()\n *             .use(iterator, 'foo_replace', 'text', function (tokens, idx) {\n *               tokens[idx].content = tokens[idx].content.replace(/foo/g, 'bar');\n *             });\n * ```\n **/\nMarkdownIt.prototype.use = function (plugin /*, params, ... */) {\n  var args = [ this ].concat(Array.prototype.slice.call(arguments, 1));\n  plugin.apply(plugin, args);\n  return this;\n};\n\n\n/** internal\n * MarkdownIt.parse(src, env) -> Array\n * - src (String): source string\n * - env (Object): environment sandbox\n *\n * Parse input string and returns list of block tokens (special token type\n * \"inline\" will contain list of inline tokens). You should not call this\n * method directly, until you write custom renderer (for example, to produce\n * AST).\n *\n * `env` is used to pass data between \"distributed\" rules and return additional\n * metadata like reference info, needed for the renderer. It also can be used to\n * inject data in specific cases. Usually, you will be ok to pass `{}`,\n * and then pass updated object to renderer.\n **/\nMarkdownIt.prototype.parse = function (src, env) {\n  if (typeof src !== 'string') {\n    throw new Error('Input data should be a String');\n  }\n\n  var state = new this.core.State(src, this, env);\n\n  this.core.process(state);\n\n  return state.tokens;\n};\n\n\n/**\n * MarkdownIt.render(src [, env]) -> String\n * - src (String): source string\n * - env (Object): environment sandbox\n *\n * Render markdown string into html. It does all magic for you :).\n *\n * `env` can be used to inject additional metadata (`{}` by default).\n * But you will not need it with high probability. See also comment\n * in [[MarkdownIt.parse]].\n **/\nMarkdownIt.prototype.render = function (src, env) {\n  env = env || {};\n\n  return this.renderer.render(this.parse(src, env), this.options, env);\n};\n\n\n/** internal\n * MarkdownIt.parseInline(src, env) -> Array\n * - src (String): source string\n * - env (Object): environment sandbox\n *\n * The same as [[MarkdownIt.parse]] but skip all block rules. It returns the\n * block tokens list with the single `inline` element, containing parsed inline\n * tokens in `children` property. Also updates `env` object.\n **/\nMarkdownIt.prototype.parseInline = function (src, env) {\n  var state = new this.core.State(src, this, env);\n\n  state.inlineMode = true;\n  this.core.process(state);\n\n  return state.tokens;\n};\n\n\n/**\n * MarkdownIt.renderInline(src [, env]) -> String\n * - src (String): source string\n * - env (Object): environment sandbox\n *\n * Similar to [[MarkdownIt.render]] but for single paragraph content. Result\n * will NOT be wrapped into `<p>` tags.\n **/\nMarkdownIt.prototype.renderInline = function (src, env) {\n  env = env || {};\n\n  return this.renderer.render(this.parseInline(src, env), this.options, env);\n};\n\n\nmodule.exports = MarkdownIt;\n","\n'use strict';\n\n\nvar encodeCache = {};\n\n\n// Create a lookup array where anything but characters in `chars` string\n// and alphanumeric chars is percent-encoded.\n//\nfunction getEncodeCache(exclude) {\n  var i, ch, cache = encodeCache[exclude];\n  if (cache) { return cache; }\n\n  cache = encodeCache[exclude] = [];\n\n  for (i = 0; i < 128; i++) {\n    ch = String.fromCharCode(i);\n\n    if (/^[0-9a-z]$/i.test(ch)) {\n      // always allow unencoded alphanumeric characters\n      cache.push(ch);\n    } else {\n      cache.push('%' + ('0' + i.toString(16).toUpperCase()).slice(-2));\n    }\n  }\n\n  for (i = 0; i < exclude.length; i++) {\n    cache[exclude.charCodeAt(i)] = exclude[i];\n  }\n\n  return cache;\n}\n\n\n// Encode unsafe characters with percent-encoding, skipping already\n// encoded sequences.\n//\n//  - string       - string to encode\n//  - exclude      - list of characters to ignore (in addition to a-zA-Z0-9)\n//  - keepEscaped  - don't encode '%' in a correct escape sequence (default: true)\n//\nfunction encode(string, exclude, keepEscaped) {\n  var i, l, code, nextCode, cache,\n      result = '';\n\n  if (typeof exclude !== 'string') {\n    // encode(string, keepEscaped)\n    keepEscaped  = exclude;\n    exclude = encode.defaultChars;\n  }\n\n  if (typeof keepEscaped === 'undefined') {\n    keepEscaped = true;\n  }\n\n  cache = getEncodeCache(exclude);\n\n  for (i = 0, l = string.length; i < l; i++) {\n    code = string.charCodeAt(i);\n\n    if (keepEscaped && code === 0x25 /* % */ && i + 2 < l) {\n      if (/^[0-9a-f]{2}$/i.test(string.slice(i + 1, i + 3))) {\n        result += string.slice(i, i + 3);\n        i += 2;\n        continue;\n      }\n    }\n\n    if (code < 128) {\n      result += cache[code];\n      continue;\n    }\n\n    if (code >= 0xD800 && code <= 0xDFFF) {\n      if (code >= 0xD800 && code <= 0xDBFF && i + 1 < l) {\n        nextCode = string.charCodeAt(i + 1);\n        if (nextCode >= 0xDC00 && nextCode <= 0xDFFF) {\n          result += encodeURIComponent(string[i] + string[i + 1]);\n          i++;\n          continue;\n        }\n      }\n      result += '%EF%BF%BD';\n      continue;\n    }\n\n    result += encodeURIComponent(string[i]);\n  }\n\n  return result;\n}\n\nencode.defaultChars   = \";/?:@&=+$,-_.!~*'()#\";\nencode.componentChars = \"-_.!~*'()\";\n\n\nmodule.exports = encode;\n","\n'use strict';\n\n\n/* eslint-disable no-bitwise */\n\nvar decodeCache = {};\n\nfunction getDecodeCache(exclude) {\n  var i, ch, cache = decodeCache[exclude];\n  if (cache) { return cache; }\n\n  cache = decodeCache[exclude] = [];\n\n  for (i = 0; i < 128; i++) {\n    ch = String.fromCharCode(i);\n    cache.push(ch);\n  }\n\n  for (i = 0; i < exclude.length; i++) {\n    ch = exclude.charCodeAt(i);\n    cache[ch] = '%' + ('0' + ch.toString(16).toUpperCase()).slice(-2);\n  }\n\n  return cache;\n}\n\n\n// Decode percent-encoded string.\n//\nfunction decode(string, exclude) {\n  var cache;\n\n  if (typeof exclude !== 'string') {\n    exclude = decode.defaultChars;\n  }\n\n  cache = getDecodeCache(exclude);\n\n  return string.replace(/(%[a-f0-9]{2})+/gi, function(seq) {\n    var i, l, b1, b2, b3, b4, chr,\n        result = '';\n\n    for (i = 0, l = seq.length; i < l; i += 3) {\n      b1 = parseInt(seq.slice(i + 1, i + 3), 16);\n\n      if (b1 < 0x80) {\n        result += cache[b1];\n        continue;\n      }\n\n      if ((b1 & 0xE0) === 0xC0 && (i + 3 < l)) {\n        // 110xxxxx 10xxxxxx\n        b2 = parseInt(seq.slice(i + 4, i + 6), 16);\n\n        if ((b2 & 0xC0) === 0x80) {\n          chr = ((b1 << 6) & 0x7C0) | (b2 & 0x3F);\n\n          if (chr < 0x80) {\n            result += '\\ufffd\\ufffd';\n          } else {\n            result += String.fromCharCode(chr);\n          }\n\n          i += 3;\n          continue;\n        }\n      }\n\n      if ((b1 & 0xF0) === 0xE0 && (i + 6 < l)) {\n        // 1110xxxx 10xxxxxx 10xxxxxx\n        b2 = parseInt(seq.slice(i + 4, i + 6), 16);\n        b3 = parseInt(seq.slice(i + 7, i + 9), 16);\n\n        if ((b2 & 0xC0) === 0x80 && (b3 & 0xC0) === 0x80) {\n          chr = ((b1 << 12) & 0xF000) | ((b2 << 6) & 0xFC0) | (b3 & 0x3F);\n\n          if (chr < 0x800 || (chr >= 0xD800 && chr <= 0xDFFF)) {\n            result += '\\ufffd\\ufffd\\ufffd';\n          } else {\n            result += String.fromCharCode(chr);\n          }\n\n          i += 6;\n          continue;\n        }\n      }\n\n      if ((b1 & 0xF8) === 0xF0 && (i + 9 < l)) {\n        // 111110xx 10xxxxxx 10xxxxxx 10xxxxxx\n        b2 = parseInt(seq.slice(i + 4, i + 6), 16);\n        b3 = parseInt(seq.slice(i + 7, i + 9), 16);\n        b4 = parseInt(seq.slice(i + 10, i + 12), 16);\n\n        if ((b2 & 0xC0) === 0x80 && (b3 & 0xC0) === 0x80 && (b4 & 0xC0) === 0x80) {\n          chr = ((b1 << 18) & 0x1C0000) | ((b2 << 12) & 0x3F000) | ((b3 << 6) & 0xFC0) | (b4 & 0x3F);\n\n          if (chr < 0x10000 || chr > 0x10FFFF) {\n            result += '\\ufffd\\ufffd\\ufffd\\ufffd';\n          } else {\n            chr -= 0x10000;\n            result += String.fromCharCode(0xD800 + (chr >> 10), 0xDC00 + (chr & 0x3FF));\n          }\n\n          i += 9;\n          continue;\n        }\n      }\n\n      result += '\\ufffd';\n    }\n\n    return result;\n  });\n}\n\n\ndecode.defaultChars   = ';/?:@&=+$,#';\ndecode.componentChars = '';\n\n\nmodule.exports = decode;\n","\n'use strict';\n\n\nmodule.exports = function format(url) {\n  var result = '';\n\n  result += url.protocol || '';\n  result += url.slashes ? '//' : '';\n  result += url.auth ? url.auth + '@' : '';\n\n  if (url.hostname && url.hostname.indexOf(':') !== -1) {\n    // ipv6 address\n    result += '[' + url.hostname + ']';\n  } else {\n    result += url.hostname || '';\n  }\n\n  result += url.port ? ':' + url.port : '';\n  result += url.pathname || '';\n  result += url.search || '';\n  result += url.hash || '';\n\n  return result;\n};\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\n//\n// Changes from joyent/node:\n//\n// 1. No leading slash in paths,\n//    e.g. in `url.parse('http://foo?bar')` pathname is ``, not `/`\n//\n// 2. Backslashes are not replaced with slashes,\n//    so `http:\\\\example.org\\` is treated like a relative path\n//\n// 3. Trailing colon is treated like a part of the path,\n//    i.e. in `http://example.org:foo` pathname is `:foo`\n//\n// 4. Nothing is URL-encoded in the resulting object,\n//    (in joyent/node some chars in auth and paths are encoded)\n//\n// 5. `url.parse()` does not have `parseQueryString` argument\n//\n// 6. Removed extraneous result properties: `host`, `path`, `query`, etc.,\n//    which can be constructed using other parts of the url.\n//\n\n\nfunction Url() {\n  this.protocol = null;\n  this.slashes = null;\n  this.auth = null;\n  this.port = null;\n  this.hostname = null;\n  this.hash = null;\n  this.search = null;\n  this.pathname = null;\n}\n\n// Reference: RFC 3986, RFC 1808, RFC 2396\n\n// define these here so at least they only have to be\n// compiled once on the first module load.\nvar protocolPattern = /^([a-z0-9.+-]+:)/i,\n    portPattern = /:[0-9]*$/,\n\n    // Special case for a simple path URL\n    simplePathPattern = /^(\\/\\/?(?!\\/)[^\\?\\s]*)(\\?[^\\s]*)?$/,\n\n    // RFC 2396: characters reserved for delimiting URLs.\n    // We actually just auto-escape these.\n    delims = [ '<', '>', '\"', '`', ' ', '\\r', '\\n', '\\t' ],\n\n    // RFC 2396: characters not allowed for various reasons.\n    unwise = [ '{', '}', '|', '\\\\', '^', '`' ].concat(delims),\n\n    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.\n    autoEscape = [ '\\'' ].concat(unwise),\n    // Characters that are never ever allowed in a hostname.\n    // Note that any invalid chars are also handled, but these\n    // are the ones that are *expected* to be seen, so we fast-path\n    // them.\n    nonHostChars = [ '%', '/', '?', ';', '#' ].concat(autoEscape),\n    hostEndingChars = [ '/', '?', '#' ],\n    hostnameMaxLen = 255,\n    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,\n    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,\n    // protocols that can allow \"unsafe\" and \"unwise\" chars.\n    /* eslint-disable no-script-url */\n    // protocols that never have a hostname.\n    hostlessProtocol = {\n      'javascript': true,\n      'javascript:': true\n    },\n    // protocols that always contain a // bit.\n    slashedProtocol = {\n      'http': true,\n      'https': true,\n      'ftp': true,\n      'gopher': true,\n      'file': true,\n      'http:': true,\n      'https:': true,\n      'ftp:': true,\n      'gopher:': true,\n      'file:': true\n    };\n    /* eslint-enable no-script-url */\n\nfunction urlParse(url, slashesDenoteHost) {\n  if (url && url instanceof Url) { return url; }\n\n  var u = new Url();\n  u.parse(url, slashesDenoteHost);\n  return u;\n}\n\nUrl.prototype.parse = function(url, slashesDenoteHost) {\n  var i, l, lowerProto, hec, slashes,\n      rest = url;\n\n  // trim before proceeding.\n  // This is to support parse stuff like \"  http://foo.com  \\n\"\n  rest = rest.trim();\n\n  if (!slashesDenoteHost && url.split('#').length === 1) {\n    // Try fast path regexp\n    var simplePath = simplePathPattern.exec(rest);\n    if (simplePath) {\n      this.pathname = simplePath[1];\n      if (simplePath[2]) {\n        this.search = simplePath[2];\n      }\n      return this;\n    }\n  }\n\n  var proto = protocolPattern.exec(rest);\n  if (proto) {\n    proto = proto[0];\n    lowerProto = proto.toLowerCase();\n    this.protocol = proto;\n    rest = rest.substr(proto.length);\n  }\n\n  // figure out if it's got a host\n  // user@server is *always* interpreted as a hostname, and url\n  // resolution will treat //foo/bar as host=foo,path=bar because that's\n  // how the browser resolves relative URLs.\n  if (slashesDenoteHost || proto || rest.match(/^\\/\\/[^@\\/]+@[^@\\/]+/)) {\n    slashes = rest.substr(0, 2) === '//';\n    if (slashes && !(proto && hostlessProtocol[proto])) {\n      rest = rest.substr(2);\n      this.slashes = true;\n    }\n  }\n\n  if (!hostlessProtocol[proto] &&\n      (slashes || (proto && !slashedProtocol[proto]))) {\n\n    // there's a hostname.\n    // the first instance of /, ?, ;, or # ends the host.\n    //\n    // If there is an @ in the hostname, then non-host chars *are* allowed\n    // to the left of the last @ sign, unless some host-ending character\n    // comes *before* the @-sign.\n    // URLs are obnoxious.\n    //\n    // ex:\n    // http://a@b@c/ => user:a@b host:c\n    // http://a@b?@c => user:a host:c path:/?@c\n\n    // v0.12 TODO(isaacs): This is not quite how Chrome does things.\n    // Review our test case against browsers more comprehensively.\n\n    // find the first instance of any hostEndingChars\n    var hostEnd = -1;\n    for (i = 0; i < hostEndingChars.length; i++) {\n      hec = rest.indexOf(hostEndingChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) {\n        hostEnd = hec;\n      }\n    }\n\n    // at this point, either we have an explicit point where the\n    // auth portion cannot go past, or the last @ char is the decider.\n    var auth, atSign;\n    if (hostEnd === -1) {\n      // atSign can be anywhere.\n      atSign = rest.lastIndexOf('@');\n    } else {\n      // atSign must be in auth portion.\n      // http://a@b/c@d => host:b auth:a path:/c@d\n      atSign = rest.lastIndexOf('@', hostEnd);\n    }\n\n    // Now we have a portion which is definitely the auth.\n    // Pull that off.\n    if (atSign !== -1) {\n      auth = rest.slice(0, atSign);\n      rest = rest.slice(atSign + 1);\n      this.auth = auth;\n    }\n\n    // the host is the remaining to the left of the first non-host char\n    hostEnd = -1;\n    for (i = 0; i < nonHostChars.length; i++) {\n      hec = rest.indexOf(nonHostChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) {\n        hostEnd = hec;\n      }\n    }\n    // if we still have not hit it, then the entire thing is a host.\n    if (hostEnd === -1) {\n      hostEnd = rest.length;\n    }\n\n    if (rest[hostEnd - 1] === ':') { hostEnd--; }\n    var host = rest.slice(0, hostEnd);\n    rest = rest.slice(hostEnd);\n\n    // pull out port.\n    this.parseHost(host);\n\n    // we've indicated that there is a hostname,\n    // so even if it's empty, it has to be present.\n    this.hostname = this.hostname || '';\n\n    // if hostname begins with [ and ends with ]\n    // assume that it's an IPv6 address.\n    var ipv6Hostname = this.hostname[0] === '[' &&\n        this.hostname[this.hostname.length - 1] === ']';\n\n    // validate a little.\n    if (!ipv6Hostname) {\n      var hostparts = this.hostname.split(/\\./);\n      for (i = 0, l = hostparts.length; i < l; i++) {\n        var part = hostparts[i];\n        if (!part) { continue; }\n        if (!part.match(hostnamePartPattern)) {\n          var newpart = '';\n          for (var j = 0, k = part.length; j < k; j++) {\n            if (part.charCodeAt(j) > 127) {\n              // we replace non-ASCII char with a temporary placeholder\n              // we need this to make sure size of hostname is not\n              // broken by replacing non-ASCII by nothing\n              newpart += 'x';\n            } else {\n              newpart += part[j];\n            }\n          }\n          // we test again with ASCII char only\n          if (!newpart.match(hostnamePartPattern)) {\n            var validParts = hostparts.slice(0, i);\n            var notHost = hostparts.slice(i + 1);\n            var bit = part.match(hostnamePartStart);\n            if (bit) {\n              validParts.push(bit[1]);\n              notHost.unshift(bit[2]);\n            }\n            if (notHost.length) {\n              rest = notHost.join('.') + rest;\n            }\n            this.hostname = validParts.join('.');\n            break;\n          }\n        }\n      }\n    }\n\n    if (this.hostname.length > hostnameMaxLen) {\n      this.hostname = '';\n    }\n\n    // strip [ and ] from the hostname\n    // the host field still retains them, though\n    if (ipv6Hostname) {\n      this.hostname = this.hostname.substr(1, this.hostname.length - 2);\n    }\n  }\n\n  // chop off from the tail first.\n  var hash = rest.indexOf('#');\n  if (hash !== -1) {\n    // got a fragment string.\n    this.hash = rest.substr(hash);\n    rest = rest.slice(0, hash);\n  }\n  var qm = rest.indexOf('?');\n  if (qm !== -1) {\n    this.search = rest.substr(qm);\n    rest = rest.slice(0, qm);\n  }\n  if (rest) { this.pathname = rest; }\n  if (slashedProtocol[lowerProto] &&\n      this.hostname && !this.pathname) {\n    this.pathname = '';\n  }\n\n  return this;\n};\n\nUrl.prototype.parseHost = function(host) {\n  var port = portPattern.exec(host);\n  if (port) {\n    port = port[0];\n    if (port !== ':') {\n      this.port = port.substr(1);\n    }\n    host = host.substr(0, host.length - port.length);\n  }\n  if (host) { this.hostname = host; }\n};\n\nmodule.exports = urlParse;\n","'use strict';\n\nexports.Any = require('./properties/Any/regex');\nexports.Cc  = require('./categories/Cc/regex');\nexports.Cf  = require('./categories/Cf/regex');\nexports.P   = require('./categories/P/regex');\nexports.Z   = require('./categories/Z/regex');\n","module.exports=/[\\xAD\\u0600-\\u0605\\u061C\\u06DD\\u070F\\u08E2\\u180E\\u200B-\\u200F\\u202A-\\u202E\\u2060-\\u2064\\u2066-\\u206F\\uFEFF\\uFFF9-\\uFFFB]|\\uD804[\\uDCBD\\uDCCD]|\\uD82F[\\uDCA0-\\uDCA3]|\\uD834[\\uDD73-\\uDD7A]|\\uDB40[\\uDC01\\uDC20-\\uDC7F]/","// Just a shortcut for bulk export\n'use strict';\n\n\nexports.parseLinkLabel       = require('./parse_link_label');\nexports.parseLinkDestination = require('./parse_link_destination');\nexports.parseLinkTitle       = require('./parse_link_title');\n","// Parse link label\n//\n// this function assumes that first character (\"[\") already matches;\n// returns the end of the label\n//\n'use strict';\n\nmodule.exports = function parseLinkLabel(state, start, disableNested) {\n  var level, found, marker, prevPos,\n      labelEnd = -1,\n      max = state.posMax,\n      oldPos = state.pos;\n\n  state.pos = start + 1;\n  level = 1;\n\n  while (state.pos < max) {\n    marker = state.src.charCodeAt(state.pos);\n    if (marker === 0x5D /* ] */) {\n      level--;\n      if (level === 0) {\n        found = true;\n        break;\n      }\n    }\n\n    prevPos = state.pos;\n    state.md.inline.skipToken(state);\n    if (marker === 0x5B /* [ */) {\n      if (prevPos === state.pos - 1) {\n        // increase level if we find text `[`, which is not a part of any token\n        level++;\n      } else if (disableNested) {\n        state.pos = oldPos;\n        return -1;\n      }\n    }\n  }\n\n  if (found) {\n    labelEnd = state.pos;\n  }\n\n  // restore old state\n  state.pos = oldPos;\n\n  return labelEnd;\n};\n","// Parse link destination\n//\n'use strict';\n\n\nvar isSpace     = require('../common/utils').isSpace;\nvar unescapeAll = require('../common/utils').unescapeAll;\n\n\nmodule.exports = function parseLinkDestination(str, pos, max) {\n  var code, level,\n      lines = 0,\n      start = pos,\n      result = {\n        ok: false,\n        pos: 0,\n        lines: 0,\n        str: ''\n      };\n\n  if (str.charCodeAt(pos) === 0x3C /* < */) {\n    pos++;\n    while (pos < max) {\n      code = str.charCodeAt(pos);\n      if (code === 0x0A /* \\n */ || isSpace(code)) { return result; }\n      if (code === 0x3E /* > */) {\n        result.pos = pos + 1;\n        result.str = unescapeAll(str.slice(start + 1, pos));\n        result.ok = true;\n        return result;\n      }\n      if (code === 0x5C /* \\ */ && pos + 1 < max) {\n        pos += 2;\n        continue;\n      }\n\n      pos++;\n    }\n\n    // no closing '>'\n    return result;\n  }\n\n  // this should be ... } else { ... branch\n\n  level = 0;\n  while (pos < max) {\n    code = str.charCodeAt(pos);\n\n    if (code === 0x20) { break; }\n\n    // ascii control characters\n    if (code < 0x20 || code === 0x7F) { break; }\n\n    if (code === 0x5C /* \\ */ && pos + 1 < max) {\n      pos += 2;\n      continue;\n    }\n\n    if (code === 0x28 /* ( */) {\n      level++;\n    }\n\n    if (code === 0x29 /* ) */) {\n      if (level === 0) { break; }\n      level--;\n    }\n\n    pos++;\n  }\n\n  if (start === pos) { return result; }\n  if (level !== 0) { return result; }\n\n  result.str = unescapeAll(str.slice(start, pos));\n  result.lines = lines;\n  result.pos = pos;\n  result.ok = true;\n  return result;\n};\n","// Parse link title\n//\n'use strict';\n\n\nvar unescapeAll = require('../common/utils').unescapeAll;\n\n\nmodule.exports = function parseLinkTitle(str, pos, max) {\n  var code,\n      marker,\n      lines = 0,\n      start = pos,\n      result = {\n        ok: false,\n        pos: 0,\n        lines: 0,\n        str: ''\n      };\n\n  if (pos >= max) { return result; }\n\n  marker = str.charCodeAt(pos);\n\n  if (marker !== 0x22 /* \" */ && marker !== 0x27 /* ' */ && marker !== 0x28 /* ( */) { return result; }\n\n  pos++;\n\n  // if opening marker is \"(\", switch it to closing marker \")\"\n  if (marker === 0x28) { marker = 0x29; }\n\n  while (pos < max) {\n    code = str.charCodeAt(pos);\n    if (code === marker) {\n      result.pos = pos + 1;\n      result.lines = lines;\n      result.str = unescapeAll(str.slice(start + 1, pos));\n      result.ok = true;\n      return result;\n    } else if (code === 0x0A) {\n      lines++;\n    } else if (code === 0x5C /* \\ */ && pos + 1 < max) {\n      pos++;\n      if (str.charCodeAt(pos) === 0x0A) {\n        lines++;\n      }\n    }\n\n    pos++;\n  }\n\n  return result;\n};\n","/**\n * class Renderer\n *\n * Generates HTML from parsed token stream. Each instance has independent\n * copy of rules. Those can be rewritten with ease. Also, you can add new\n * rules if you create plugin and adds new token types.\n **/\n'use strict';\n\n\nvar assign          = require('./common/utils').assign;\nvar unescapeAll     = require('./common/utils').unescapeAll;\nvar escapeHtml      = require('./common/utils').escapeHtml;\n\n\n////////////////////////////////////////////////////////////////////////////////\n\nvar default_rules = {};\n\n\ndefault_rules.code_inline = function (tokens, idx, options, env, slf) {\n  var token = tokens[idx];\n\n  return  '<code' + slf.renderAttrs(token) + '>' +\n          escapeHtml(tokens[idx].content) +\n          '</code>';\n};\n\n\ndefault_rules.code_block = function (tokens, idx, options, env, slf) {\n  var token = tokens[idx];\n\n  return  '<pre' + slf.renderAttrs(token) + '><code>' +\n          escapeHtml(tokens[idx].content) +\n          '</code></pre>\\n';\n};\n\n\ndefault_rules.fence = function (tokens, idx, options, env, slf) {\n  var token = tokens[idx],\n      info = token.info ? unescapeAll(token.info).trim() : '',\n      langName = '',\n      highlighted, i, tmpAttrs, tmpToken;\n\n  if (info) {\n    langName = info.split(/\\s+/g)[0];\n  }\n\n  if (options.highlight) {\n    highlighted = options.highlight(token.content, langName) || escapeHtml(token.content);\n  } else {\n    highlighted = escapeHtml(token.content);\n  }\n\n  if (highlighted.indexOf('<pre') === 0) {\n    return highlighted + '\\n';\n  }\n\n  // If language exists, inject class gently, without modifying original token.\n  // May be, one day we will add .clone() for token and simplify this part, but\n  // now we prefer to keep things local.\n  if (info) {\n    i        = token.attrIndex('class');\n    tmpAttrs = token.attrs ? token.attrs.slice() : [];\n\n    if (i < 0) {\n      tmpAttrs.push([ 'class', options.langPrefix + langName ]);\n    } else {\n      tmpAttrs[i][1] += ' ' + options.langPrefix + langName;\n    }\n\n    // Fake token just to render attributes\n    tmpToken = {\n      attrs: tmpAttrs\n    };\n\n    return  '<pre><code' + slf.renderAttrs(tmpToken) + '>'\n          + highlighted\n          + '</code></pre>\\n';\n  }\n\n\n  return  '<pre><code' + slf.renderAttrs(token) + '>'\n        + highlighted\n        + '</code></pre>\\n';\n};\n\n\ndefault_rules.image = function (tokens, idx, options, env, slf) {\n  var token = tokens[idx];\n\n  // \"alt\" attr MUST be set, even if empty. Because it's mandatory and\n  // should be placed on proper position for tests.\n  //\n  // Replace content with actual value\n\n  token.attrs[token.attrIndex('alt')][1] =\n    slf.renderInlineAsText(token.children, options, env);\n\n  return slf.renderToken(tokens, idx, options);\n};\n\n\ndefault_rules.hardbreak = function (tokens, idx, options /*, env */) {\n  return options.xhtmlOut ? '<br />\\n' : '<br>\\n';\n};\ndefault_rules.softbreak = function (tokens, idx, options /*, env */) {\n  return options.breaks ? (options.xhtmlOut ? '<br />\\n' : '<br>\\n') : '\\n';\n};\n\n\ndefault_rules.text = function (tokens, idx /*, options, env */) {\n  return escapeHtml(tokens[idx].content);\n};\n\n\ndefault_rules.html_block = function (tokens, idx /*, options, env */) {\n  return tokens[idx].content;\n};\ndefault_rules.html_inline = function (tokens, idx /*, options, env */) {\n  return tokens[idx].content;\n};\n\n\n/**\n * new Renderer()\n *\n * Creates new [[Renderer]] instance and fill [[Renderer#rules]] with defaults.\n **/\nfunction Renderer() {\n\n  /**\n   * Renderer#rules -> Object\n   *\n   * Contains render rules for tokens. Can be updated and extended.\n   *\n   * ##### Example\n   *\n   * ```javascript\n   * var md = require('markdown-it')();\n   *\n   * md.renderer.rules.strong_open  = function () { return '<b>'; };\n   * md.renderer.rules.strong_close = function () { return '</b>'; };\n   *\n   * var result = md.renderInline(...);\n   * ```\n   *\n   * Each rule is called as independent static function with fixed signature:\n   *\n   * ```javascript\n   * function my_token_render(tokens, idx, options, env, renderer) {\n   *   // ...\n   *   return renderedHTML;\n   * }\n   * ```\n   *\n   * See [source code](https://github.com/markdown-it/markdown-it/blob/master/lib/renderer.js)\n   * for more details and examples.\n   **/\n  this.rules = assign({}, default_rules);\n}\n\n\n/**\n * Renderer.renderAttrs(token) -> String\n *\n * Render token attributes to string.\n **/\nRenderer.prototype.renderAttrs = function renderAttrs(token) {\n  var i, l, result;\n\n  if (!token.attrs) { return ''; }\n\n  result = '';\n\n  for (i = 0, l = token.attrs.length; i < l; i++) {\n    result += ' ' + escapeHtml(token.attrs[i][0]) + '=\"' + escapeHtml(token.attrs[i][1]) + '\"';\n  }\n\n  return result;\n};\n\n\n/**\n * Renderer.renderToken(tokens, idx, options) -> String\n * - tokens (Array): list of tokens\n * - idx (Numbed): token index to render\n * - options (Object): params of parser instance\n *\n * Default token renderer. Can be overriden by custom function\n * in [[Renderer#rules]].\n **/\nRenderer.prototype.renderToken = function renderToken(tokens, idx, options) {\n  var nextToken,\n      result = '',\n      needLf = false,\n      token = tokens[idx];\n\n  // Tight list paragraphs\n  if (token.hidden) {\n    return '';\n  }\n\n  // Insert a newline between hidden paragraph and subsequent opening\n  // block-level tag.\n  //\n  // For example, here we should insert a newline before blockquote:\n  //  - a\n  //    >\n  //\n  if (token.block && token.nesting !== -1 && idx && tokens[idx - 1].hidden) {\n    result += '\\n';\n  }\n\n  // Add token name, e.g. `<img`\n  result += (token.nesting === -1 ? '</' : '<') + token.tag;\n\n  // Encode attributes, e.g. `<img src=\"foo\"`\n  result += this.renderAttrs(token);\n\n  // Add a slash for self-closing tags, e.g. `<img src=\"foo\" /`\n  if (token.nesting === 0 && options.xhtmlOut) {\n    result += ' /';\n  }\n\n  // Check if we need to add a newline after this tag\n  if (token.block) {\n    needLf = true;\n\n    if (token.nesting === 1) {\n      if (idx + 1 < tokens.length) {\n        nextToken = tokens[idx + 1];\n\n        if (nextToken.type === 'inline' || nextToken.hidden) {\n          // Block-level tag containing an inline tag.\n          //\n          needLf = false;\n\n        } else if (nextToken.nesting === -1 && nextToken.tag === token.tag) {\n          // Opening tag + closing tag of the same type. E.g. `<li></li>`.\n          //\n          needLf = false;\n        }\n      }\n    }\n  }\n\n  result += needLf ? '>\\n' : '>';\n\n  return result;\n};\n\n\n/**\n * Renderer.renderInline(tokens, options, env) -> String\n * - tokens (Array): list on block tokens to renter\n * - options (Object): params of parser instance\n * - env (Object): additional data from parsed input (references, for example)\n *\n * The same as [[Renderer.render]], but for single token of `inline` type.\n **/\nRenderer.prototype.renderInline = function (tokens, options, env) {\n  var type,\n      result = '',\n      rules = this.rules;\n\n  for (var i = 0, len = tokens.length; i < len; i++) {\n    type = tokens[i].type;\n\n    if (typeof rules[type] !== 'undefined') {\n      result += rules[type](tokens, i, options, env, this);\n    } else {\n      result += this.renderToken(tokens, i, options);\n    }\n  }\n\n  return result;\n};\n\n\n/** internal\n * Renderer.renderInlineAsText(tokens, options, env) -> String\n * - tokens (Array): list on block tokens to renter\n * - options (Object): params of parser instance\n * - env (Object): additional data from parsed input (references, for example)\n *\n * Special kludge for image `alt` attributes to conform CommonMark spec.\n * Don't try to use it! Spec requires to show `alt` content with stripped markup,\n * instead of simple escaping.\n **/\nRenderer.prototype.renderInlineAsText = function (tokens, options, env) {\n  var result = '';\n\n  for (var i = 0, len = tokens.length; i < len; i++) {\n    if (tokens[i].type === 'text') {\n      result += tokens[i].content;\n    } else if (tokens[i].type === 'image') {\n      result += this.renderInlineAsText(tokens[i].children, options, env);\n    }\n  }\n\n  return result;\n};\n\n\n/**\n * Renderer.render(tokens, options, env) -> String\n * - tokens (Array): list on block tokens to renter\n * - options (Object): params of parser instance\n * - env (Object): additional data from parsed input (references, for example)\n *\n * Takes token stream and generates HTML. Probably, you will never need to call\n * this method directly.\n **/\nRenderer.prototype.render = function (tokens, options, env) {\n  var i, len, type,\n      result = '',\n      rules = this.rules;\n\n  for (i = 0, len = tokens.length; i < len; i++) {\n    type = tokens[i].type;\n\n    if (type === 'inline') {\n      result += this.renderInline(tokens[i].children, options, env);\n    } else if (typeof rules[type] !== 'undefined') {\n      result += rules[tokens[i].type](tokens, i, options, env, this);\n    } else {\n      result += this.renderToken(tokens, i, options, env);\n    }\n  }\n\n  return result;\n};\n\nmodule.exports = Renderer;\n","/** internal\n * class Core\n *\n * Top-level rules executor. Glues block/inline parsers and does intermediate\n * transformations.\n **/\n'use strict';\n\n\nvar Ruler  = require('./ruler');\n\n\nvar _rules = [\n  [ 'normalize',      require('./rules_core/normalize')      ],\n  [ 'block',          require('./rules_core/block')          ],\n  [ 'inline',         require('./rules_core/inline')         ],\n  [ 'linkify',        require('./rules_core/linkify')        ],\n  [ 'replacements',   require('./rules_core/replacements')   ],\n  [ 'smartquotes',    require('./rules_core/smartquotes')    ]\n];\n\n\n/**\n * new Core()\n **/\nfunction Core() {\n  /**\n   * Core#ruler -> Ruler\n   *\n   * [[Ruler]] instance. Keep configuration of core rules.\n   **/\n  this.ruler = new Ruler();\n\n  for (var i = 0; i < _rules.length; i++) {\n    this.ruler.push(_rules[i][0], _rules[i][1]);\n  }\n}\n\n\n/**\n * Core.process(state)\n *\n * Executes core chain rules.\n **/\nCore.prototype.process = function (state) {\n  var i, l, rules;\n\n  rules = this.ruler.getRules('');\n\n  for (i = 0, l = rules.length; i < l; i++) {\n    rules[i](state);\n  }\n};\n\nCore.prototype.State = require('./rules_core/state_core');\n\n\nmodule.exports = Core;\n","// Normalize input string\n\n'use strict';\n\n\nvar NEWLINES_RE  = /\\r[\\n\\u0085]?|[\\u2424\\u2028\\u0085]/g;\nvar NULL_RE      = /\\u0000/g;\n\n\nmodule.exports = function inline(state) {\n  var str;\n\n  // Normalize newlines\n  str = state.src.replace(NEWLINES_RE, '\\n');\n\n  // Replace NULL characters\n  str = str.replace(NULL_RE, '\\uFFFD');\n\n  state.src = str;\n};\n","'use strict';\n\n\nmodule.exports = function block(state) {\n  var token;\n\n  if (state.inlineMode) {\n    token          = new state.Token('inline', '', 0);\n    token.content  = state.src;\n    token.map      = [ 0, 1 ];\n    token.children = [];\n    state.tokens.push(token);\n  } else {\n    state.md.block.parse(state.src, state.md, state.env, state.tokens);\n  }\n};\n","'use strict';\n\nmodule.exports = function inline(state) {\n  var tokens = state.tokens, tok, i, l;\n\n  // Parse inlines\n  for (i = 0, l = tokens.length; i < l; i++) {\n    tok = tokens[i];\n    if (tok.type === 'inline') {\n      state.md.inline.parse(tok.content, state.md, state.env, tok.children);\n    }\n  }\n};\n","// Replace link-like texts with link nodes.\n//\n// Currently restricted by `md.validateLink()` to http/https/ftp\n//\n'use strict';\n\n\nvar arrayReplaceAt = require('../common/utils').arrayReplaceAt;\n\n\nfunction isLinkOpen(str) {\n  return /^<a[>\\s]/i.test(str);\n}\nfunction isLinkClose(str) {\n  return /^<\\/a\\s*>/i.test(str);\n}\n\n\nmodule.exports = function linkify(state) {\n  var i, j, l, tokens, token, currentToken, nodes, ln, text, pos, lastPos,\n      level, htmlLinkLevel, url, fullUrl, urlText,\n      blockTokens = state.tokens,\n      links;\n\n  if (!state.md.options.linkify) { return; }\n\n  for (j = 0, l = blockTokens.length; j < l; j++) {\n    if (blockTokens[j].type !== 'inline' ||\n        !state.md.linkify.pretest(blockTokens[j].content)) {\n      continue;\n    }\n\n    tokens = blockTokens[j].children;\n\n    htmlLinkLevel = 0;\n\n    // We scan from the end, to keep position when new tags added.\n    // Use reversed logic in links start/end match\n    for (i = tokens.length - 1; i >= 0; i--) {\n      currentToken = tokens[i];\n\n      // Skip content of markdown links\n      if (currentToken.type === 'link_close') {\n        i--;\n        while (tokens[i].level !== currentToken.level && tokens[i].type !== 'link_open') {\n          i--;\n        }\n        continue;\n      }\n\n      // Skip content of html tag links\n      if (currentToken.type === 'html_inline') {\n        if (isLinkOpen(currentToken.content) && htmlLinkLevel > 0) {\n          htmlLinkLevel--;\n        }\n        if (isLinkClose(currentToken.content)) {\n          htmlLinkLevel++;\n        }\n      }\n      if (htmlLinkLevel > 0) { continue; }\n\n      if (currentToken.type === 'text' && state.md.linkify.test(currentToken.content)) {\n\n        text = currentToken.content;\n        links = state.md.linkify.match(text);\n\n        // Now split string to nodes\n        nodes = [];\n        level = currentToken.level;\n        lastPos = 0;\n\n        for (ln = 0; ln < links.length; ln++) {\n\n          url = links[ln].url;\n          fullUrl = state.md.normalizeLink(url);\n          if (!state.md.validateLink(fullUrl)) { continue; }\n\n          urlText = links[ln].text;\n\n          // Linkifier might send raw hostnames like \"example.com\", where url\n          // starts with domain name. So we prepend http:// in those cases,\n          // and remove it afterwards.\n          //\n          if (!links[ln].schema) {\n            urlText = state.md.normalizeLinkText('http://' + urlText).replace(/^http:\\/\\//, '');\n          } else if (links[ln].schema === 'mailto:' && !/^mailto:/i.test(urlText)) {\n            urlText = state.md.normalizeLinkText('mailto:' + urlText).replace(/^mailto:/, '');\n          } else {\n            urlText = state.md.normalizeLinkText(urlText);\n          }\n\n          pos = links[ln].index;\n\n          if (pos > lastPos) {\n            token         = new state.Token('text', '', 0);\n            token.content = text.slice(lastPos, pos);\n            token.level   = level;\n            nodes.push(token);\n          }\n\n          token         = new state.Token('link_open', 'a', 1);\n          token.attrs   = [ [ 'href', fullUrl ] ];\n          token.level   = level++;\n          token.markup  = 'linkify';\n          token.info    = 'auto';\n          nodes.push(token);\n\n          token         = new state.Token('text', '', 0);\n          token.content = urlText;\n          token.level   = level;\n          nodes.push(token);\n\n          token         = new state.Token('link_close', 'a', -1);\n          token.level   = --level;\n          token.markup  = 'linkify';\n          token.info    = 'auto';\n          nodes.push(token);\n\n          lastPos = links[ln].lastIndex;\n        }\n        if (lastPos < text.length) {\n          token         = new state.Token('text', '', 0);\n          token.content = text.slice(lastPos);\n          token.level   = level;\n          nodes.push(token);\n        }\n\n        // replace current node\n        blockTokens[j].children = tokens = arrayReplaceAt(tokens, i, nodes);\n      }\n    }\n  }\n};\n","// Simple typographyc replacements\n//\n// (c) (C) → ©\n// (tm) (TM) → ™\n// (r) (R) → ®\n// +- → ±\n// (p) (P) -> §\n// ... → … (also ?.... → ?.., !.... → !..)\n// ???????? → ???, !!!!! → !!!, `,,` → `,`\n// -- → &ndash;, --- → &mdash;\n//\n'use strict';\n\n// TODO:\n// - fractionals 1/2, 1/4, 3/4 -> ½, ¼, ¾\n// - miltiplication 2 x 4 -> 2 × 4\n\nvar RARE_RE = /\\+-|\\.\\.|\\?\\?\\?\\?|!!!!|,,|--/;\n\n// Workaround for phantomjs - need regex without /g flag,\n// or root check will fail every second time\nvar SCOPED_ABBR_TEST_RE = /\\((c|tm|r|p)\\)/i;\n\nvar SCOPED_ABBR_RE = /\\((c|tm|r|p)\\)/ig;\nvar SCOPED_ABBR = {\n  c: '©',\n  r: '®',\n  p: '§',\n  tm: '™'\n};\n\nfunction replaceFn(match, name) {\n  return SCOPED_ABBR[name.toLowerCase()];\n}\n\nfunction replace_scoped(inlineTokens) {\n  var i, token, inside_autolink = 0;\n\n  for (i = inlineTokens.length - 1; i >= 0; i--) {\n    token = inlineTokens[i];\n\n    if (token.type === 'text' && !inside_autolink) {\n      token.content = token.content.replace(SCOPED_ABBR_RE, replaceFn);\n    }\n\n    if (token.type === 'link_open' && token.info === 'auto') {\n      inside_autolink--;\n    }\n\n    if (token.type === 'link_close' && token.info === 'auto') {\n      inside_autolink++;\n    }\n  }\n}\n\nfunction replace_rare(inlineTokens) {\n  var i, token, inside_autolink = 0;\n\n  for (i = inlineTokens.length - 1; i >= 0; i--) {\n    token = inlineTokens[i];\n\n    if (token.type === 'text' && !inside_autolink) {\n      if (RARE_RE.test(token.content)) {\n        token.content = token.content\n                    .replace(/\\+-/g, '±')\n                    // .., ..., ....... -> …\n                    // but ?..... & !..... -> ?.. & !..\n                    .replace(/\\.{2,}/g, '…').replace(/([?!])…/g, '$1..')\n                    .replace(/([?!]){4,}/g, '$1$1$1').replace(/,{2,}/g, ',')\n                    // em-dash\n                    .replace(/(^|[^-])---([^-]|$)/mg, '$1\\u2014$2')\n                    // en-dash\n                    .replace(/(^|\\s)--(\\s|$)/mg, '$1\\u2013$2')\n                    .replace(/(^|[^-\\s])--([^-\\s]|$)/mg, '$1\\u2013$2');\n      }\n    }\n\n    if (token.type === 'link_open' && token.info === 'auto') {\n      inside_autolink--;\n    }\n\n    if (token.type === 'link_close' && token.info === 'auto') {\n      inside_autolink++;\n    }\n  }\n}\n\n\nmodule.exports = function replace(state) {\n  var blkIdx;\n\n  if (!state.md.options.typographer) { return; }\n\n  for (blkIdx = state.tokens.length - 1; blkIdx >= 0; blkIdx--) {\n\n    if (state.tokens[blkIdx].type !== 'inline') { continue; }\n\n    if (SCOPED_ABBR_TEST_RE.test(state.tokens[blkIdx].content)) {\n      replace_scoped(state.tokens[blkIdx].children);\n    }\n\n    if (RARE_RE.test(state.tokens[blkIdx].content)) {\n      replace_rare(state.tokens[blkIdx].children);\n    }\n\n  }\n};\n","// Convert straight quotation marks to typographic ones\n//\n'use strict';\n\n\nvar isWhiteSpace   = require('../common/utils').isWhiteSpace;\nvar isPunctChar    = require('../common/utils').isPunctChar;\nvar isMdAsciiPunct = require('../common/utils').isMdAsciiPunct;\n\nvar QUOTE_TEST_RE = /['\"]/;\nvar QUOTE_RE = /['\"]/g;\nvar APOSTROPHE = '\\u2019'; /* ’ */\n\n\nfunction replaceAt(str, index, ch) {\n  return str.substr(0, index) + ch + str.substr(index + 1);\n}\n\nfunction process_inlines(tokens, state) {\n  var i, token, text, t, pos, max, thisLevel, item, lastChar, nextChar,\n      isLastPunctChar, isNextPunctChar, isLastWhiteSpace, isNextWhiteSpace,\n      canOpen, canClose, j, isSingle, stack, openQuote, closeQuote;\n\n  stack = [];\n\n  for (i = 0; i < tokens.length; i++) {\n    token = tokens[i];\n\n    thisLevel = tokens[i].level;\n\n    for (j = stack.length - 1; j >= 0; j--) {\n      if (stack[j].level <= thisLevel) { break; }\n    }\n    stack.length = j + 1;\n\n    if (token.type !== 'text') { continue; }\n\n    text = token.content;\n    pos = 0;\n    max = text.length;\n\n    /*eslint no-labels:0,block-scoped-var:0*/\n    OUTER:\n    while (pos < max) {\n      QUOTE_RE.lastIndex = pos;\n      t = QUOTE_RE.exec(text);\n      if (!t) { break; }\n\n      canOpen = canClose = true;\n      pos = t.index + 1;\n      isSingle = (t[0] === \"'\");\n\n      // Find previous character,\n      // default to space if it's the beginning of the line\n      //\n      lastChar = 0x20;\n\n      if (t.index - 1 >= 0) {\n        lastChar = text.charCodeAt(t.index - 1);\n      } else {\n        for (j = i - 1; j >= 0; j--) {\n          if (tokens[j].type === 'softbreak' || tokens[j].type === 'hardbreak') break; // lastChar defaults to 0x20\n          if (tokens[j].type !== 'text') continue;\n\n          lastChar = tokens[j].content.charCodeAt(tokens[j].content.length - 1);\n          break;\n        }\n      }\n\n      // Find next character,\n      // default to space if it's the end of the line\n      //\n      nextChar = 0x20;\n\n      if (pos < max) {\n        nextChar = text.charCodeAt(pos);\n      } else {\n        for (j = i + 1; j < tokens.length; j++) {\n          if (tokens[j].type === 'softbreak' || tokens[j].type === 'hardbreak') break; // nextChar defaults to 0x20\n          if (tokens[j].type !== 'text') continue;\n\n          nextChar = tokens[j].content.charCodeAt(0);\n          break;\n        }\n      }\n\n      isLastPunctChar = isMdAsciiPunct(lastChar) || isPunctChar(String.fromCharCode(lastChar));\n      isNextPunctChar = isMdAsciiPunct(nextChar) || isPunctChar(String.fromCharCode(nextChar));\n\n      isLastWhiteSpace = isWhiteSpace(lastChar);\n      isNextWhiteSpace = isWhiteSpace(nextChar);\n\n      if (isNextWhiteSpace) {\n        canOpen = false;\n      } else if (isNextPunctChar) {\n        if (!(isLastWhiteSpace || isLastPunctChar)) {\n          canOpen = false;\n        }\n      }\n\n      if (isLastWhiteSpace) {\n        canClose = false;\n      } else if (isLastPunctChar) {\n        if (!(isNextWhiteSpace || isNextPunctChar)) {\n          canClose = false;\n        }\n      }\n\n      if (nextChar === 0x22 /* \" */ && t[0] === '\"') {\n        if (lastChar >= 0x30 /* 0 */ && lastChar <= 0x39 /* 9 */) {\n          // special case: 1\"\" - count first quote as an inch\n          canClose = canOpen = false;\n        }\n      }\n\n      if (canOpen && canClose) {\n        // treat this as the middle of the word\n        canOpen = false;\n        canClose = isNextPunctChar;\n      }\n\n      if (!canOpen && !canClose) {\n        // middle of word\n        if (isSingle) {\n          token.content = replaceAt(token.content, t.index, APOSTROPHE);\n        }\n        continue;\n      }\n\n      if (canClose) {\n        // this could be a closing quote, rewind the stack to get a match\n        for (j = stack.length - 1; j >= 0; j--) {\n          item = stack[j];\n          if (stack[j].level < thisLevel) { break; }\n          if (item.single === isSingle && stack[j].level === thisLevel) {\n            item = stack[j];\n\n            if (isSingle) {\n              openQuote = state.md.options.quotes[2];\n              closeQuote = state.md.options.quotes[3];\n            } else {\n              openQuote = state.md.options.quotes[0];\n              closeQuote = state.md.options.quotes[1];\n            }\n\n            // replace token.content *before* tokens[item.token].content,\n            // because, if they are pointing at the same token, replaceAt\n            // could mess up indices when quote length != 1\n            token.content = replaceAt(token.content, t.index, closeQuote);\n            tokens[item.token].content = replaceAt(\n              tokens[item.token].content, item.pos, openQuote);\n\n            pos += closeQuote.length - 1;\n            if (item.token === i) { pos += openQuote.length - 1; }\n\n            text = token.content;\n            max = text.length;\n\n            stack.length = j;\n            continue OUTER;\n          }\n        }\n      }\n\n      if (canOpen) {\n        stack.push({\n          token: i,\n          pos: t.index,\n          single: isSingle,\n          level: thisLevel\n        });\n      } else if (canClose && isSingle) {\n        token.content = replaceAt(token.content, t.index, APOSTROPHE);\n      }\n    }\n  }\n}\n\n\nmodule.exports = function smartquotes(state) {\n  /*eslint max-depth:0*/\n  var blkIdx;\n\n  if (!state.md.options.typographer) { return; }\n\n  for (blkIdx = state.tokens.length - 1; blkIdx >= 0; blkIdx--) {\n\n    if (state.tokens[blkIdx].type !== 'inline' ||\n        !QUOTE_TEST_RE.test(state.tokens[blkIdx].content)) {\n      continue;\n    }\n\n    process_inlines(state.tokens[blkIdx].children, state);\n  }\n};\n","// Core state object\n//\n'use strict';\n\nvar Token = require('../token');\n\n\nfunction StateCore(src, md, env) {\n  this.src = src;\n  this.env = env;\n  this.tokens = [];\n  this.inlineMode = false;\n  this.md = md; // link to parser instance\n}\n\n// re-export Token class to use in core rules\nStateCore.prototype.Token = Token;\n\n\nmodule.exports = StateCore;\n","/** internal\n * class ParserBlock\n *\n * Block-level tokenizer.\n **/\n'use strict';\n\n\nvar Ruler           = require('./ruler');\n\n\nvar _rules = [\n  // First 2 params - rule name & source. Secondary array - list of rules,\n  // which can be terminated by this one.\n  [ 'table',      require('./rules_block/table'),      [ 'paragraph', 'reference' ] ],\n  [ 'code',       require('./rules_block/code') ],\n  [ 'fence',      require('./rules_block/fence'),      [ 'paragraph', 'reference', 'blockquote', 'list' ] ],\n  [ 'blockquote', require('./rules_block/blockquote'), [ 'paragraph', 'reference', 'blockquote', 'list' ] ],\n  [ 'hr',         require('./rules_block/hr'),         [ 'paragraph', 'reference', 'blockquote', 'list' ] ],\n  [ 'list',       require('./rules_block/list'),       [ 'paragraph', 'reference', 'blockquote' ] ],\n  [ 'reference',  require('./rules_block/reference') ],\n  [ 'heading',    require('./rules_block/heading'),    [ 'paragraph', 'reference', 'blockquote' ] ],\n  [ 'lheading',   require('./rules_block/lheading') ],\n  [ 'html_block', require('./rules_block/html_block'), [ 'paragraph', 'reference', 'blockquote' ] ],\n  [ 'paragraph',  require('./rules_block/paragraph') ]\n];\n\n\n/**\n * new ParserBlock()\n **/\nfunction ParserBlock() {\n  /**\n   * ParserBlock#ruler -> Ruler\n   *\n   * [[Ruler]] instance. Keep configuration of block rules.\n   **/\n  this.ruler = new Ruler();\n\n  for (var i = 0; i < _rules.length; i++) {\n    this.ruler.push(_rules[i][0], _rules[i][1], { alt: (_rules[i][2] || []).slice() });\n  }\n}\n\n\n// Generate tokens for input range\n//\nParserBlock.prototype.tokenize = function (state, startLine, endLine) {\n  var ok, i,\n      rules = this.ruler.getRules(''),\n      len = rules.length,\n      line = startLine,\n      hasEmptyLines = false,\n      maxNesting = state.md.options.maxNesting;\n\n  while (line < endLine) {\n    state.line = line = state.skipEmptyLines(line);\n    if (line >= endLine) { break; }\n\n    // Termination condition for nested calls.\n    // Nested calls currently used for blockquotes & lists\n    if (state.sCount[line] < state.blkIndent) { break; }\n\n    // If nesting level exceeded - skip tail to the end. That's not ordinary\n    // situation and we should not care about content.\n    if (state.level >= maxNesting) {\n      state.line = endLine;\n      break;\n    }\n\n    // Try all possible rules.\n    // On success, rule should:\n    //\n    // - update `state.line`\n    // - update `state.tokens`\n    // - return true\n\n    for (i = 0; i < len; i++) {\n      ok = rules[i](state, line, endLine, false);\n      if (ok) { break; }\n    }\n\n    // set state.tight if we had an empty line before current tag\n    // i.e. latest empty line should not count\n    state.tight = !hasEmptyLines;\n\n    // paragraph might \"eat\" one newline after it in nested lists\n    if (state.isEmpty(state.line - 1)) {\n      hasEmptyLines = true;\n    }\n\n    line = state.line;\n\n    if (line < endLine && state.isEmpty(line)) {\n      hasEmptyLines = true;\n      line++;\n      state.line = line;\n    }\n  }\n};\n\n\n/**\n * ParserBlock.parse(str, md, env, outTokens)\n *\n * Process input string and push block tokens into `outTokens`\n **/\nParserBlock.prototype.parse = function (src, md, env, outTokens) {\n  var state;\n\n  if (!src) { return; }\n\n  state = new this.State(src, md, env, outTokens);\n\n  this.tokenize(state, state.line, state.lineMax);\n};\n\n\nParserBlock.prototype.State = require('./rules_block/state_block');\n\n\nmodule.exports = ParserBlock;\n","// GFM table, non-standard\n\n'use strict';\n\nvar isSpace = require('../common/utils').isSpace;\n\n\nfunction getLine(state, line) {\n  var pos = state.bMarks[line] + state.blkIndent,\n      max = state.eMarks[line];\n\n  return state.src.substr(pos, max - pos);\n}\n\nfunction escapedSplit(str) {\n  var result = [],\n      pos = 0,\n      max = str.length,\n      ch,\n      escapes = 0,\n      lastPos = 0,\n      backTicked = false,\n      lastBackTick = 0;\n\n  ch  = str.charCodeAt(pos);\n\n  while (pos < max) {\n    if (ch === 0x60/* ` */) {\n      if (backTicked) {\n        // make \\` close code sequence, but not open it;\n        // the reason is: `\\` is correct code block\n        backTicked = false;\n        lastBackTick = pos;\n      } else if (escapes % 2 === 0) {\n        backTicked = true;\n        lastBackTick = pos;\n      }\n    } else if (ch === 0x7c/* | */ && (escapes % 2 === 0) && !backTicked) {\n      result.push(str.substring(lastPos, pos));\n      lastPos = pos + 1;\n    }\n\n    if (ch === 0x5c/* \\ */) {\n      escapes++;\n    } else {\n      escapes = 0;\n    }\n\n    pos++;\n\n    // If there was an un-closed backtick, go back to just after\n    // the last backtick, but as if it was a normal character\n    if (pos === max && backTicked) {\n      backTicked = false;\n      pos = lastBackTick + 1;\n    }\n\n    ch = str.charCodeAt(pos);\n  }\n\n  result.push(str.substring(lastPos));\n\n  return result;\n}\n\n\nmodule.exports = function table(state, startLine, endLine, silent) {\n  var ch, lineText, pos, i, nextLine, columns, columnCount, token,\n      aligns, t, tableLines, tbodyLines;\n\n  // should have at least two lines\n  if (startLine + 2 > endLine) { return false; }\n\n  nextLine = startLine + 1;\n\n  if (state.sCount[nextLine] < state.blkIndent) { return false; }\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[nextLine] - state.blkIndent >= 4) { return false; }\n\n  // first character of the second line should be '|', '-', ':',\n  // and no other characters are allowed but spaces;\n  // basically, this is the equivalent of /^[-:|][-:|\\s]*$/ regexp\n\n  pos = state.bMarks[nextLine] + state.tShift[nextLine];\n  if (pos >= state.eMarks[nextLine]) { return false; }\n\n  ch = state.src.charCodeAt(pos++);\n  if (ch !== 0x7C/* | */ && ch !== 0x2D/* - */ && ch !== 0x3A/* : */) { return false; }\n\n  while (pos < state.eMarks[nextLine]) {\n    ch = state.src.charCodeAt(pos);\n\n    if (ch !== 0x7C/* | */ && ch !== 0x2D/* - */ && ch !== 0x3A/* : */ && !isSpace(ch)) { return false; }\n\n    pos++;\n  }\n\n  lineText = getLine(state, startLine + 1);\n\n  columns = lineText.split('|');\n  aligns = [];\n  for (i = 0; i < columns.length; i++) {\n    t = columns[i].trim();\n    if (!t) {\n      // allow empty columns before and after table, but not in between columns;\n      // e.g. allow ` |---| `, disallow ` ---||--- `\n      if (i === 0 || i === columns.length - 1) {\n        continue;\n      } else {\n        return false;\n      }\n    }\n\n    if (!/^:?-+:?$/.test(t)) { return false; }\n    if (t.charCodeAt(t.length - 1) === 0x3A/* : */) {\n      aligns.push(t.charCodeAt(0) === 0x3A/* : */ ? 'center' : 'right');\n    } else if (t.charCodeAt(0) === 0x3A/* : */) {\n      aligns.push('left');\n    } else {\n      aligns.push('');\n    }\n  }\n\n  lineText = getLine(state, startLine).trim();\n  if (lineText.indexOf('|') === -1) { return false; }\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n  columns = escapedSplit(lineText.replace(/^\\||\\|$/g, ''));\n\n  // header row will define an amount of columns in the entire table,\n  // and align row shouldn't be smaller than that (the rest of the rows can)\n  columnCount = columns.length;\n  if (columnCount > aligns.length) { return false; }\n\n  if (silent) { return true; }\n\n  token     = state.push('table_open', 'table', 1);\n  token.map = tableLines = [ startLine, 0 ];\n\n  token     = state.push('thead_open', 'thead', 1);\n  token.map = [ startLine, startLine + 1 ];\n\n  token     = state.push('tr_open', 'tr', 1);\n  token.map = [ startLine, startLine + 1 ];\n\n  for (i = 0; i < columns.length; i++) {\n    token          = state.push('th_open', 'th', 1);\n    token.map      = [ startLine, startLine + 1 ];\n    if (aligns[i]) {\n      token.attrs  = [ [ 'style', 'text-align:' + aligns[i] ] ];\n    }\n\n    token          = state.push('inline', '', 0);\n    token.content  = columns[i].trim();\n    token.map      = [ startLine, startLine + 1 ];\n    token.children = [];\n\n    token          = state.push('th_close', 'th', -1);\n  }\n\n  token     = state.push('tr_close', 'tr', -1);\n  token     = state.push('thead_close', 'thead', -1);\n\n  token     = state.push('tbody_open', 'tbody', 1);\n  token.map = tbodyLines = [ startLine + 2, 0 ];\n\n  for (nextLine = startLine + 2; nextLine < endLine; nextLine++) {\n    if (state.sCount[nextLine] < state.blkIndent) { break; }\n\n    lineText = getLine(state, nextLine).trim();\n    if (lineText.indexOf('|') === -1) { break; }\n    if (state.sCount[nextLine] - state.blkIndent >= 4) { break; }\n    columns = escapedSplit(lineText.replace(/^\\||\\|$/g, ''));\n\n    token = state.push('tr_open', 'tr', 1);\n    for (i = 0; i < columnCount; i++) {\n      token          = state.push('td_open', 'td', 1);\n      if (aligns[i]) {\n        token.attrs  = [ [ 'style', 'text-align:' + aligns[i] ] ];\n      }\n\n      token          = state.push('inline', '', 0);\n      token.content  = columns[i] ? columns[i].trim() : '';\n      token.children = [];\n\n      token          = state.push('td_close', 'td', -1);\n    }\n    token = state.push('tr_close', 'tr', -1);\n  }\n  token = state.push('tbody_close', 'tbody', -1);\n  token = state.push('table_close', 'table', -1);\n\n  tableLines[1] = tbodyLines[1] = nextLine;\n  state.line = nextLine;\n  return true;\n};\n","// Code block (4 spaces padded)\n\n'use strict';\n\n\nmodule.exports = function code(state, startLine, endLine/*, silent*/) {\n  var nextLine, last, token;\n\n  if (state.sCount[startLine] - state.blkIndent < 4) { return false; }\n\n  last = nextLine = startLine + 1;\n\n  while (nextLine < endLine) {\n    if (state.isEmpty(nextLine)) {\n      nextLine++;\n      continue;\n    }\n\n    if (state.sCount[nextLine] - state.blkIndent >= 4) {\n      nextLine++;\n      last = nextLine;\n      continue;\n    }\n    break;\n  }\n\n  state.line = last;\n\n  token         = state.push('code_block', 'code', 0);\n  token.content = state.getLines(startLine, last, 4 + state.blkIndent, true);\n  token.map     = [ startLine, state.line ];\n\n  return true;\n};\n","// fences (``` lang, ~~~ lang)\n\n'use strict';\n\n\nmodule.exports = function fence(state, startLine, endLine, silent) {\n  var marker, len, params, nextLine, mem, token, markup,\n      haveEndMarker = false,\n      pos = state.bMarks[startLine] + state.tShift[startLine],\n      max = state.eMarks[startLine];\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n\n  if (pos + 3 > max) { return false; }\n\n  marker = state.src.charCodeAt(pos);\n\n  if (marker !== 0x7E/* ~ */ && marker !== 0x60 /* ` */) {\n    return false;\n  }\n\n  // scan marker length\n  mem = pos;\n  pos = state.skipChars(pos, marker);\n\n  len = pos - mem;\n\n  if (len < 3) { return false; }\n\n  markup = state.src.slice(mem, pos);\n  params = state.src.slice(pos, max);\n\n  if (params.indexOf(String.fromCharCode(marker)) >= 0) { return false; }\n\n  // Since start is found, we can report success here in validation mode\n  if (silent) { return true; }\n\n  // search end of block\n  nextLine = startLine;\n\n  for (;;) {\n    nextLine++;\n    if (nextLine >= endLine) {\n      // unclosed block should be autoclosed by end of document.\n      // also block seems to be autoclosed by end of parent\n      break;\n    }\n\n    pos = mem = state.bMarks[nextLine] + state.tShift[nextLine];\n    max = state.eMarks[nextLine];\n\n    if (pos < max && state.sCount[nextLine] < state.blkIndent) {\n      // non-empty line with negative indent should stop the list:\n      // - ```\n      //  test\n      break;\n    }\n\n    if (state.src.charCodeAt(pos) !== marker) { continue; }\n\n    if (state.sCount[nextLine] - state.blkIndent >= 4) {\n      // closing fence should be indented less than 4 spaces\n      continue;\n    }\n\n    pos = state.skipChars(pos, marker);\n\n    // closing code fence must be at least as long as the opening one\n    if (pos - mem < len) { continue; }\n\n    // make sure tail has spaces only\n    pos = state.skipSpaces(pos);\n\n    if (pos < max) { continue; }\n\n    haveEndMarker = true;\n    // found!\n    break;\n  }\n\n  // If a fence has heading spaces, they should be removed from its inner block\n  len = state.sCount[startLine];\n\n  state.line = nextLine + (haveEndMarker ? 1 : 0);\n\n  token         = state.push('fence', 'code', 0);\n  token.info    = params;\n  token.content = state.getLines(startLine + 1, nextLine, len, true);\n  token.markup  = markup;\n  token.map     = [ startLine, state.line ];\n\n  return true;\n};\n","// Block quotes\n\n'use strict';\n\nvar isSpace = require('../common/utils').isSpace;\n\n\nmodule.exports = function blockquote(state, startLine, endLine, silent) {\n  var adjustTab,\n      ch,\n      i,\n      initial,\n      l,\n      lastLineEmpty,\n      lines,\n      nextLine,\n      offset,\n      oldBMarks,\n      oldBSCount,\n      oldIndent,\n      oldParentType,\n      oldSCount,\n      oldTShift,\n      spaceAfterMarker,\n      terminate,\n      terminatorRules,\n      token,\n      wasOutdented,\n      oldLineMax = state.lineMax,\n      pos = state.bMarks[startLine] + state.tShift[startLine],\n      max = state.eMarks[startLine];\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n\n  // check the block quote marker\n  if (state.src.charCodeAt(pos++) !== 0x3E/* > */) { return false; }\n\n  // we know that it's going to be a valid blockquote,\n  // so no point trying to find the end of it in silent mode\n  if (silent) { return true; }\n\n  // skip spaces after \">\" and re-calculate offset\n  initial = offset = state.sCount[startLine] + pos - (state.bMarks[startLine] + state.tShift[startLine]);\n\n  // skip one optional space after '>'\n  if (state.src.charCodeAt(pos) === 0x20 /* space */) {\n    // ' >   test '\n    //     ^ -- position start of line here:\n    pos++;\n    initial++;\n    offset++;\n    adjustTab = false;\n    spaceAfterMarker = true;\n  } else if (state.src.charCodeAt(pos) === 0x09 /* tab */) {\n    spaceAfterMarker = true;\n\n    if ((state.bsCount[startLine] + offset) % 4 === 3) {\n      // '  >\\t  test '\n      //       ^ -- position start of line here (tab has width===1)\n      pos++;\n      initial++;\n      offset++;\n      adjustTab = false;\n    } else {\n      // ' >\\t  test '\n      //    ^ -- position start of line here + shift bsCount slightly\n      //         to make extra space appear\n      adjustTab = true;\n    }\n  } else {\n    spaceAfterMarker = false;\n  }\n\n  oldBMarks = [ state.bMarks[startLine] ];\n  state.bMarks[startLine] = pos;\n\n  while (pos < max) {\n    ch = state.src.charCodeAt(pos);\n\n    if (isSpace(ch)) {\n      if (ch === 0x09) {\n        offset += 4 - (offset + state.bsCount[startLine] + (adjustTab ? 1 : 0)) % 4;\n      } else {\n        offset++;\n      }\n    } else {\n      break;\n    }\n\n    pos++;\n  }\n\n  oldBSCount = [ state.bsCount[startLine] ];\n  state.bsCount[startLine] = state.sCount[startLine] + 1 + (spaceAfterMarker ? 1 : 0);\n\n  lastLineEmpty = pos >= max;\n\n  oldSCount = [ state.sCount[startLine] ];\n  state.sCount[startLine] = offset - initial;\n\n  oldTShift = [ state.tShift[startLine] ];\n  state.tShift[startLine] = pos - state.bMarks[startLine];\n\n  terminatorRules = state.md.block.ruler.getRules('blockquote');\n\n  oldParentType = state.parentType;\n  state.parentType = 'blockquote';\n  wasOutdented = false;\n\n  // Search the end of the block\n  //\n  // Block ends with either:\n  //  1. an empty line outside:\n  //     ```\n  //     > test\n  //\n  //     ```\n  //  2. an empty line inside:\n  //     ```\n  //     >\n  //     test\n  //     ```\n  //  3. another tag:\n  //     ```\n  //     > test\n  //      - - -\n  //     ```\n  for (nextLine = startLine + 1; nextLine < endLine; nextLine++) {\n    // check if it's outdented, i.e. it's inside list item and indented\n    // less than said list item:\n    //\n    // ```\n    // 1. anything\n    //    > current blockquote\n    // 2. checking this line\n    // ```\n    if (state.sCount[nextLine] < state.blkIndent) wasOutdented = true;\n\n    pos = state.bMarks[nextLine] + state.tShift[nextLine];\n    max = state.eMarks[nextLine];\n\n    if (pos >= max) {\n      // Case 1: line is not inside the blockquote, and this line is empty.\n      break;\n    }\n\n    if (state.src.charCodeAt(pos++) === 0x3E/* > */ && !wasOutdented) {\n      // This line is inside the blockquote.\n\n      // skip spaces after \">\" and re-calculate offset\n      initial = offset = state.sCount[nextLine] + pos - (state.bMarks[nextLine] + state.tShift[nextLine]);\n\n      // skip one optional space after '>'\n      if (state.src.charCodeAt(pos) === 0x20 /* space */) {\n        // ' >   test '\n        //     ^ -- position start of line here:\n        pos++;\n        initial++;\n        offset++;\n        adjustTab = false;\n        spaceAfterMarker = true;\n      } else if (state.src.charCodeAt(pos) === 0x09 /* tab */) {\n        spaceAfterMarker = true;\n\n        if ((state.bsCount[nextLine] + offset) % 4 === 3) {\n          // '  >\\t  test '\n          //       ^ -- position start of line here (tab has width===1)\n          pos++;\n          initial++;\n          offset++;\n          adjustTab = false;\n        } else {\n          // ' >\\t  test '\n          //    ^ -- position start of line here + shift bsCount slightly\n          //         to make extra space appear\n          adjustTab = true;\n        }\n      } else {\n        spaceAfterMarker = false;\n      }\n\n      oldBMarks.push(state.bMarks[nextLine]);\n      state.bMarks[nextLine] = pos;\n\n      while (pos < max) {\n        ch = state.src.charCodeAt(pos);\n\n        if (isSpace(ch)) {\n          if (ch === 0x09) {\n            offset += 4 - (offset + state.bsCount[nextLine] + (adjustTab ? 1 : 0)) % 4;\n          } else {\n            offset++;\n          }\n        } else {\n          break;\n        }\n\n        pos++;\n      }\n\n      lastLineEmpty = pos >= max;\n\n      oldBSCount.push(state.bsCount[nextLine]);\n      state.bsCount[nextLine] = state.sCount[nextLine] + 1 + (spaceAfterMarker ? 1 : 0);\n\n      oldSCount.push(state.sCount[nextLine]);\n      state.sCount[nextLine] = offset - initial;\n\n      oldTShift.push(state.tShift[nextLine]);\n      state.tShift[nextLine] = pos - state.bMarks[nextLine];\n      continue;\n    }\n\n    // Case 2: line is not inside the blockquote, and the last line was empty.\n    if (lastLineEmpty) { break; }\n\n    // Case 3: another tag found.\n    terminate = false;\n    for (i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true;\n        break;\n      }\n    }\n\n    if (terminate) {\n      // Quirk to enforce \"hard termination mode\" for paragraphs;\n      // normally if you call `tokenize(state, startLine, nextLine)`,\n      // paragraphs will look below nextLine for paragraph continuation,\n      // but if blockquote is terminated by another tag, they shouldn't\n      state.lineMax = nextLine;\n\n      if (state.blkIndent !== 0) {\n        // state.blkIndent was non-zero, we now set it to zero,\n        // so we need to re-calculate all offsets to appear as\n        // if indent wasn't changed\n        oldBMarks.push(state.bMarks[nextLine]);\n        oldBSCount.push(state.bsCount[nextLine]);\n        oldTShift.push(state.tShift[nextLine]);\n        oldSCount.push(state.sCount[nextLine]);\n        state.sCount[nextLine] -= state.blkIndent;\n      }\n\n      break;\n    }\n\n    oldBMarks.push(state.bMarks[nextLine]);\n    oldBSCount.push(state.bsCount[nextLine]);\n    oldTShift.push(state.tShift[nextLine]);\n    oldSCount.push(state.sCount[nextLine]);\n\n    // A negative indentation means that this is a paragraph continuation\n    //\n    state.sCount[nextLine] = -1;\n  }\n\n  oldIndent = state.blkIndent;\n  state.blkIndent = 0;\n\n  token        = state.push('blockquote_open', 'blockquote', 1);\n  token.markup = '>';\n  token.map    = lines = [ startLine, 0 ];\n\n  state.md.block.tokenize(state, startLine, nextLine);\n\n  token        = state.push('blockquote_close', 'blockquote', -1);\n  token.markup = '>';\n\n  state.lineMax = oldLineMax;\n  state.parentType = oldParentType;\n  lines[1] = state.line;\n\n  // Restore original tShift; this might not be necessary since the parser\n  // has already been here, but just to make sure we can do that.\n  for (i = 0; i < oldTShift.length; i++) {\n    state.bMarks[i + startLine] = oldBMarks[i];\n    state.tShift[i + startLine] = oldTShift[i];\n    state.sCount[i + startLine] = oldSCount[i];\n    state.bsCount[i + startLine] = oldBSCount[i];\n  }\n  state.blkIndent = oldIndent;\n\n  return true;\n};\n","// Horizontal rule\n\n'use strict';\n\nvar isSpace = require('../common/utils').isSpace;\n\n\nmodule.exports = function hr(state, startLine, endLine, silent) {\n  var marker, cnt, ch, token,\n      pos = state.bMarks[startLine] + state.tShift[startLine],\n      max = state.eMarks[startLine];\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n\n  marker = state.src.charCodeAt(pos++);\n\n  // Check hr marker\n  if (marker !== 0x2A/* * */ &&\n      marker !== 0x2D/* - */ &&\n      marker !== 0x5F/* _ */) {\n    return false;\n  }\n\n  // markers can be mixed with spaces, but there should be at least 3 of them\n\n  cnt = 1;\n  while (pos < max) {\n    ch = state.src.charCodeAt(pos++);\n    if (ch !== marker && !isSpace(ch)) { return false; }\n    if (ch === marker) { cnt++; }\n  }\n\n  if (cnt < 3) { return false; }\n\n  if (silent) { return true; }\n\n  state.line = startLine + 1;\n\n  token        = state.push('hr', 'hr', 0);\n  token.map    = [ startLine, state.line ];\n  token.markup = Array(cnt + 1).join(String.fromCharCode(marker));\n\n  return true;\n};\n","// Lists\n\n'use strict';\n\nvar isSpace = require('../common/utils').isSpace;\n\n\n// Search `[-+*][\\n ]`, returns next pos after marker on success\n// or -1 on fail.\nfunction skipBulletListMarker(state, startLine) {\n  var marker, pos, max, ch;\n\n  pos = state.bMarks[startLine] + state.tShift[startLine];\n  max = state.eMarks[startLine];\n\n  marker = state.src.charCodeAt(pos++);\n  // Check bullet\n  if (marker !== 0x2A/* * */ &&\n      marker !== 0x2D/* - */ &&\n      marker !== 0x2B/* + */) {\n    return -1;\n  }\n\n  if (pos < max) {\n    ch = state.src.charCodeAt(pos);\n\n    if (!isSpace(ch)) {\n      // \" -test \" - is not a list item\n      return -1;\n    }\n  }\n\n  return pos;\n}\n\n// Search `\\d+[.)][\\n ]`, returns next pos after marker on success\n// or -1 on fail.\nfunction skipOrderedListMarker(state, startLine) {\n  var ch,\n      start = state.bMarks[startLine] + state.tShift[startLine],\n      pos = start,\n      max = state.eMarks[startLine];\n\n  // List marker should have at least 2 chars (digit + dot)\n  if (pos + 1 >= max) { return -1; }\n\n  ch = state.src.charCodeAt(pos++);\n\n  if (ch < 0x30/* 0 */ || ch > 0x39/* 9 */) { return -1; }\n\n  for (;;) {\n    // EOL -> fail\n    if (pos >= max) { return -1; }\n\n    ch = state.src.charCodeAt(pos++);\n\n    if (ch >= 0x30/* 0 */ && ch <= 0x39/* 9 */) {\n\n      // List marker should have no more than 9 digits\n      // (prevents integer overflow in browsers)\n      if (pos - start >= 10) { return -1; }\n\n      continue;\n    }\n\n    // found valid marker\n    if (ch === 0x29/* ) */ || ch === 0x2e/* . */) {\n      break;\n    }\n\n    return -1;\n  }\n\n\n  if (pos < max) {\n    ch = state.src.charCodeAt(pos);\n\n    if (!isSpace(ch)) {\n      // \" 1.test \" - is not a list item\n      return -1;\n    }\n  }\n  return pos;\n}\n\nfunction markTightParagraphs(state, idx) {\n  var i, l,\n      level = state.level + 2;\n\n  for (i = idx + 2, l = state.tokens.length - 2; i < l; i++) {\n    if (state.tokens[i].level === level && state.tokens[i].type === 'paragraph_open') {\n      state.tokens[i + 2].hidden = true;\n      state.tokens[i].hidden = true;\n      i += 2;\n    }\n  }\n}\n\n\nmodule.exports = function list(state, startLine, endLine, silent) {\n  var ch,\n      contentStart,\n      i,\n      indent,\n      indentAfterMarker,\n      initial,\n      isOrdered,\n      itemLines,\n      l,\n      listLines,\n      listTokIdx,\n      markerCharCode,\n      markerValue,\n      max,\n      nextLine,\n      offset,\n      oldIndent,\n      oldLIndent,\n      oldParentType,\n      oldTShift,\n      oldTight,\n      pos,\n      posAfterMarker,\n      prevEmptyEnd,\n      start,\n      terminate,\n      terminatorRules,\n      token,\n      isTerminatingParagraph = false,\n      tight = true;\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n\n  // limit conditions when list can interrupt\n  // a paragraph (validation mode only)\n  if (silent && state.parentType === 'paragraph') {\n    // Next list item should still terminate previous list item;\n    //\n    // This code can fail if plugins use blkIndent as well as lists,\n    // but I hope the spec gets fixed long before that happens.\n    //\n    if (state.tShift[startLine] >= state.blkIndent) {\n      isTerminatingParagraph = true;\n    }\n  }\n\n  // Detect list type and position after marker\n  if ((posAfterMarker = skipOrderedListMarker(state, startLine)) >= 0) {\n    isOrdered = true;\n    start = state.bMarks[startLine] + state.tShift[startLine];\n    markerValue = Number(state.src.substr(start, posAfterMarker - start - 1));\n\n    // If we're starting a new ordered list right after\n    // a paragraph, it should start with 1.\n    if (isTerminatingParagraph && markerValue !== 1) return false;\n\n  } else if ((posAfterMarker = skipBulletListMarker(state, startLine)) >= 0) {\n    isOrdered = false;\n\n  } else {\n    return false;\n  }\n\n  // If we're starting a new unordered list right after\n  // a paragraph, first line should not be empty.\n  if (isTerminatingParagraph) {\n    if (state.skipSpaces(posAfterMarker) >= state.eMarks[startLine]) return false;\n  }\n\n  // We should terminate list on style change. Remember first one to compare.\n  markerCharCode = state.src.charCodeAt(posAfterMarker - 1);\n\n  // For validation mode we can terminate immediately\n  if (silent) { return true; }\n\n  // Start list\n  listTokIdx = state.tokens.length;\n\n  if (isOrdered) {\n    token       = state.push('ordered_list_open', 'ol', 1);\n    if (markerValue !== 1) {\n      token.attrs = [ [ 'start', markerValue ] ];\n    }\n\n  } else {\n    token       = state.push('bullet_list_open', 'ul', 1);\n  }\n\n  token.map    = listLines = [ startLine, 0 ];\n  token.markup = String.fromCharCode(markerCharCode);\n\n  //\n  // Iterate list items\n  //\n\n  nextLine = startLine;\n  prevEmptyEnd = false;\n  terminatorRules = state.md.block.ruler.getRules('list');\n\n  oldParentType = state.parentType;\n  state.parentType = 'list';\n\n  while (nextLine < endLine) {\n    pos = posAfterMarker;\n    max = state.eMarks[nextLine];\n\n    initial = offset = state.sCount[nextLine] + posAfterMarker - (state.bMarks[startLine] + state.tShift[startLine]);\n\n    while (pos < max) {\n      ch = state.src.charCodeAt(pos);\n\n      if (ch === 0x09) {\n        offset += 4 - (offset + state.bsCount[nextLine]) % 4;\n      } else if (ch === 0x20) {\n        offset++;\n      } else {\n        break;\n      }\n\n      pos++;\n    }\n\n    contentStart = pos;\n\n    if (contentStart >= max) {\n      // trimming space in \"-    \\n  3\" case, indent is 1 here\n      indentAfterMarker = 1;\n    } else {\n      indentAfterMarker = offset - initial;\n    }\n\n    // If we have more than 4 spaces, the indent is 1\n    // (the rest is just indented code block)\n    if (indentAfterMarker > 4) { indentAfterMarker = 1; }\n\n    // \"  -  test\"\n    //  ^^^^^ - calculating total length of this thing\n    indent = initial + indentAfterMarker;\n\n    // Run subparser & write tokens\n    token        = state.push('list_item_open', 'li', 1);\n    token.markup = String.fromCharCode(markerCharCode);\n    token.map    = itemLines = [ startLine, 0 ];\n\n    oldIndent = state.blkIndent;\n    oldTight = state.tight;\n    oldTShift = state.tShift[startLine];\n    oldLIndent = state.sCount[startLine];\n    state.blkIndent = indent;\n    state.tight = true;\n    state.tShift[startLine] = contentStart - state.bMarks[startLine];\n    state.sCount[startLine] = offset;\n\n    if (contentStart >= max && state.isEmpty(startLine + 1)) {\n      // workaround for this case\n      // (list item is empty, list terminates before \"foo\"):\n      // ~~~~~~~~\n      //   -\n      //\n      //     foo\n      // ~~~~~~~~\n      state.line = Math.min(state.line + 2, endLine);\n    } else {\n      state.md.block.tokenize(state, startLine, endLine, true);\n    }\n\n    // If any of list item is tight, mark list as tight\n    if (!state.tight || prevEmptyEnd) {\n      tight = false;\n    }\n    // Item become loose if finish with empty line,\n    // but we should filter last element, because it means list finish\n    prevEmptyEnd = (state.line - startLine) > 1 && state.isEmpty(state.line - 1);\n\n    state.blkIndent = oldIndent;\n    state.tShift[startLine] = oldTShift;\n    state.sCount[startLine] = oldLIndent;\n    state.tight = oldTight;\n\n    token        = state.push('list_item_close', 'li', -1);\n    token.markup = String.fromCharCode(markerCharCode);\n\n    nextLine = startLine = state.line;\n    itemLines[1] = nextLine;\n    contentStart = state.bMarks[startLine];\n\n    if (nextLine >= endLine) { break; }\n\n    //\n    // Try to check if list is terminated or continued.\n    //\n    if (state.sCount[nextLine] < state.blkIndent) { break; }\n\n    // fail if terminating block found\n    terminate = false;\n    for (i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true;\n        break;\n      }\n    }\n    if (terminate) { break; }\n\n    // fail if list has another type\n    if (isOrdered) {\n      posAfterMarker = skipOrderedListMarker(state, nextLine);\n      if (posAfterMarker < 0) { break; }\n    } else {\n      posAfterMarker = skipBulletListMarker(state, nextLine);\n      if (posAfterMarker < 0) { break; }\n    }\n\n    if (markerCharCode !== state.src.charCodeAt(posAfterMarker - 1)) { break; }\n  }\n\n  // Finalize list\n  if (isOrdered) {\n    token = state.push('ordered_list_close', 'ol', -1);\n  } else {\n    token = state.push('bullet_list_close', 'ul', -1);\n  }\n  token.markup = String.fromCharCode(markerCharCode);\n\n  listLines[1] = nextLine;\n  state.line = nextLine;\n\n  state.parentType = oldParentType;\n\n  // mark paragraphs tight if needed\n  if (tight) {\n    markTightParagraphs(state, listTokIdx);\n  }\n\n  return true;\n};\n","'use strict';\n\n\nvar normalizeReference   = require('../common/utils').normalizeReference;\nvar isSpace              = require('../common/utils').isSpace;\n\n\nmodule.exports = function reference(state, startLine, _endLine, silent) {\n  var ch,\n      destEndPos,\n      destEndLineNo,\n      endLine,\n      href,\n      i,\n      l,\n      label,\n      labelEnd,\n      oldParentType,\n      res,\n      start,\n      str,\n      terminate,\n      terminatorRules,\n      title,\n      lines = 0,\n      pos = state.bMarks[startLine] + state.tShift[startLine],\n      max = state.eMarks[startLine],\n      nextLine = startLine + 1;\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n\n  if (state.src.charCodeAt(pos) !== 0x5B/* [ */) { return false; }\n\n  // Simple check to quickly interrupt scan on [link](url) at the start of line.\n  // Can be useful on practice: https://github.com/markdown-it/markdown-it/issues/54\n  while (++pos < max) {\n    if (state.src.charCodeAt(pos) === 0x5D /* ] */ &&\n        state.src.charCodeAt(pos - 1) !== 0x5C/* \\ */) {\n      if (pos + 1 === max) { return false; }\n      if (state.src.charCodeAt(pos + 1) !== 0x3A/* : */) { return false; }\n      break;\n    }\n  }\n\n  endLine = state.lineMax;\n\n  // jump line-by-line until empty one or EOF\n  terminatorRules = state.md.block.ruler.getRules('reference');\n\n  oldParentType = state.parentType;\n  state.parentType = 'reference';\n\n  for (; nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {\n    // this would be a code block normally, but after paragraph\n    // it's considered a lazy continuation regardless of what's there\n    if (state.sCount[nextLine] - state.blkIndent > 3) { continue; }\n\n    // quirk for blockquotes, this line should already be checked by that rule\n    if (state.sCount[nextLine] < 0) { continue; }\n\n    // Some tags can terminate paragraph without empty line.\n    terminate = false;\n    for (i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true;\n        break;\n      }\n    }\n    if (terminate) { break; }\n  }\n\n  str = state.getLines(startLine, nextLine, state.blkIndent, false).trim();\n  max = str.length;\n\n  for (pos = 1; pos < max; pos++) {\n    ch = str.charCodeAt(pos);\n    if (ch === 0x5B /* [ */) {\n      return false;\n    } else if (ch === 0x5D /* ] */) {\n      labelEnd = pos;\n      break;\n    } else if (ch === 0x0A /* \\n */) {\n      lines++;\n    } else if (ch === 0x5C /* \\ */) {\n      pos++;\n      if (pos < max && str.charCodeAt(pos) === 0x0A) {\n        lines++;\n      }\n    }\n  }\n\n  if (labelEnd < 0 || str.charCodeAt(labelEnd + 1) !== 0x3A/* : */) { return false; }\n\n  // [label]:   destination   'title'\n  //         ^^^ skip optional whitespace here\n  for (pos = labelEnd + 2; pos < max; pos++) {\n    ch = str.charCodeAt(pos);\n    if (ch === 0x0A) {\n      lines++;\n    } else if (isSpace(ch)) {\n      /*eslint no-empty:0*/\n    } else {\n      break;\n    }\n  }\n\n  // [label]:   destination   'title'\n  //            ^^^^^^^^^^^ parse this\n  res = state.md.helpers.parseLinkDestination(str, pos, max);\n  if (!res.ok) { return false; }\n\n  href = state.md.normalizeLink(res.str);\n  if (!state.md.validateLink(href)) { return false; }\n\n  pos = res.pos;\n  lines += res.lines;\n\n  // save cursor state, we could require to rollback later\n  destEndPos = pos;\n  destEndLineNo = lines;\n\n  // [label]:   destination   'title'\n  //                       ^^^ skipping those spaces\n  start = pos;\n  for (; pos < max; pos++) {\n    ch = str.charCodeAt(pos);\n    if (ch === 0x0A) {\n      lines++;\n    } else if (isSpace(ch)) {\n      /*eslint no-empty:0*/\n    } else {\n      break;\n    }\n  }\n\n  // [label]:   destination   'title'\n  //                          ^^^^^^^ parse this\n  res = state.md.helpers.parseLinkTitle(str, pos, max);\n  if (pos < max && start !== pos && res.ok) {\n    title = res.str;\n    pos = res.pos;\n    lines += res.lines;\n  } else {\n    title = '';\n    pos = destEndPos;\n    lines = destEndLineNo;\n  }\n\n  // skip trailing spaces until the rest of the line\n  while (pos < max) {\n    ch = str.charCodeAt(pos);\n    if (!isSpace(ch)) { break; }\n    pos++;\n  }\n\n  if (pos < max && str.charCodeAt(pos) !== 0x0A) {\n    if (title) {\n      // garbage at the end of the line after title,\n      // but it could still be a valid reference if we roll back\n      title = '';\n      pos = destEndPos;\n      lines = destEndLineNo;\n      while (pos < max) {\n        ch = str.charCodeAt(pos);\n        if (!isSpace(ch)) { break; }\n        pos++;\n      }\n    }\n  }\n\n  if (pos < max && str.charCodeAt(pos) !== 0x0A) {\n    // garbage at the end of the line\n    return false;\n  }\n\n  label = normalizeReference(str.slice(1, labelEnd));\n  if (!label) {\n    // CommonMark 0.20 disallows empty labels\n    return false;\n  }\n\n  // Reference can not terminate anything. This check is for safety only.\n  /*istanbul ignore if*/\n  if (silent) { return true; }\n\n  if (typeof state.env.references === 'undefined') {\n    state.env.references = {};\n  }\n  if (typeof state.env.references[label] === 'undefined') {\n    state.env.references[label] = { title: title, href: href };\n  }\n\n  state.parentType = oldParentType;\n\n  state.line = startLine + lines + 1;\n  return true;\n};\n","// heading (#, ##, ...)\n\n'use strict';\n\nvar isSpace = require('../common/utils').isSpace;\n\n\nmodule.exports = function heading(state, startLine, endLine, silent) {\n  var ch, level, tmp, token,\n      pos = state.bMarks[startLine] + state.tShift[startLine],\n      max = state.eMarks[startLine];\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n\n  ch  = state.src.charCodeAt(pos);\n\n  if (ch !== 0x23/* # */ || pos >= max) { return false; }\n\n  // count heading level\n  level = 1;\n  ch = state.src.charCodeAt(++pos);\n  while (ch === 0x23/* # */ && pos < max && level <= 6) {\n    level++;\n    ch = state.src.charCodeAt(++pos);\n  }\n\n  if (level > 6 || (pos < max && !isSpace(ch))) { return false; }\n\n  if (silent) { return true; }\n\n  // Let's cut tails like '    ###  ' from the end of string\n\n  max = state.skipSpacesBack(max, pos);\n  tmp = state.skipCharsBack(max, 0x23, pos); // #\n  if (tmp > pos && isSpace(state.src.charCodeAt(tmp - 1))) {\n    max = tmp;\n  }\n\n  state.line = startLine + 1;\n\n  token        = state.push('heading_open', 'h' + String(level), 1);\n  token.markup = '########'.slice(0, level);\n  token.map    = [ startLine, state.line ];\n\n  token          = state.push('inline', '', 0);\n  token.content  = state.src.slice(pos, max).trim();\n  token.map      = [ startLine, state.line ];\n  token.children = [];\n\n  token        = state.push('heading_close', 'h' + String(level), -1);\n  token.markup = '########'.slice(0, level);\n\n  return true;\n};\n","// lheading (---, ===)\n\n'use strict';\n\n\nmodule.exports = function lheading(state, startLine, endLine/*, silent*/) {\n  var content, terminate, i, l, token, pos, max, level, marker,\n      nextLine = startLine + 1, oldParentType,\n      terminatorRules = state.md.block.ruler.getRules('paragraph');\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n\n  oldParentType = state.parentType;\n  state.parentType = 'paragraph'; // use paragraph to match terminatorRules\n\n  // jump line-by-line until empty one or EOF\n  for (; nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {\n    // this would be a code block normally, but after paragraph\n    // it's considered a lazy continuation regardless of what's there\n    if (state.sCount[nextLine] - state.blkIndent > 3) { continue; }\n\n    //\n    // Check for underline in setext header\n    //\n    if (state.sCount[nextLine] >= state.blkIndent) {\n      pos = state.bMarks[nextLine] + state.tShift[nextLine];\n      max = state.eMarks[nextLine];\n\n      if (pos < max) {\n        marker = state.src.charCodeAt(pos);\n\n        if (marker === 0x2D/* - */ || marker === 0x3D/* = */) {\n          pos = state.skipChars(pos, marker);\n          pos = state.skipSpaces(pos);\n\n          if (pos >= max) {\n            level = (marker === 0x3D/* = */ ? 1 : 2);\n            break;\n          }\n        }\n      }\n    }\n\n    // quirk for blockquotes, this line should already be checked by that rule\n    if (state.sCount[nextLine] < 0) { continue; }\n\n    // Some tags can terminate paragraph without empty line.\n    terminate = false;\n    for (i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true;\n        break;\n      }\n    }\n    if (terminate) { break; }\n  }\n\n  if (!level) {\n    // Didn't find valid underline\n    return false;\n  }\n\n  content = state.getLines(startLine, nextLine, state.blkIndent, false).trim();\n\n  state.line = nextLine + 1;\n\n  token          = state.push('heading_open', 'h' + String(level), 1);\n  token.markup   = String.fromCharCode(marker);\n  token.map      = [ startLine, state.line ];\n\n  token          = state.push('inline', '', 0);\n  token.content  = content;\n  token.map      = [ startLine, state.line - 1 ];\n  token.children = [];\n\n  token          = state.push('heading_close', 'h' + String(level), -1);\n  token.markup   = String.fromCharCode(marker);\n\n  state.parentType = oldParentType;\n\n  return true;\n};\n","// HTML block\n\n'use strict';\n\n\nvar block_names = require('../common/html_blocks');\nvar HTML_OPEN_CLOSE_TAG_RE = require('../common/html_re').HTML_OPEN_CLOSE_TAG_RE;\n\n// An array of opening and corresponding closing sequences for html tags,\n// last argument defines whether it can terminate a paragraph or not\n//\nvar HTML_SEQUENCES = [\n  [ /^<(script|pre|style)(?=(\\s|>|$))/i, /<\\/(script|pre|style)>/i, true ],\n  [ /^<!--/,        /-->/,   true ],\n  [ /^<\\?/,         /\\?>/,   true ],\n  [ /^<![A-Z]/,     />/,     true ],\n  [ /^<!\\[CDATA\\[/, /\\]\\]>/, true ],\n  [ new RegExp('^</?(' + block_names.join('|') + ')(?=(\\\\s|/?>|$))', 'i'), /^$/, true ],\n  [ new RegExp(HTML_OPEN_CLOSE_TAG_RE.source + '\\\\s*$'),  /^$/, false ]\n];\n\n\nmodule.exports = function html_block(state, startLine, endLine, silent) {\n  var i, nextLine, token, lineText,\n      pos = state.bMarks[startLine] + state.tShift[startLine],\n      max = state.eMarks[startLine];\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n\n  if (!state.md.options.html) { return false; }\n\n  if (state.src.charCodeAt(pos) !== 0x3C/* < */) { return false; }\n\n  lineText = state.src.slice(pos, max);\n\n  for (i = 0; i < HTML_SEQUENCES.length; i++) {\n    if (HTML_SEQUENCES[i][0].test(lineText)) { break; }\n  }\n\n  if (i === HTML_SEQUENCES.length) { return false; }\n\n  if (silent) {\n    // true if this sequence can be a terminator, false otherwise\n    return HTML_SEQUENCES[i][2];\n  }\n\n  nextLine = startLine + 1;\n\n  // If we are here - we detected HTML block.\n  // Let's roll down till block end.\n  if (!HTML_SEQUENCES[i][1].test(lineText)) {\n    for (; nextLine < endLine; nextLine++) {\n      if (state.sCount[nextLine] < state.blkIndent) { break; }\n\n      pos = state.bMarks[nextLine] + state.tShift[nextLine];\n      max = state.eMarks[nextLine];\n      lineText = state.src.slice(pos, max);\n\n      if (HTML_SEQUENCES[i][1].test(lineText)) {\n        if (lineText.length !== 0) { nextLine++; }\n        break;\n      }\n    }\n  }\n\n  state.line = nextLine;\n\n  token         = state.push('html_block', '', 0);\n  token.map     = [ startLine, nextLine ];\n  token.content = state.getLines(startLine, nextLine, state.blkIndent, true);\n\n  return true;\n};\n","// List of valid html blocks names, accorting to commonmark spec\n// http://jgm.github.io/CommonMark/spec.html#html-blocks\n\n'use strict';\n\n\nmodule.exports = [\n  'address',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'blockquote',\n  'body',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hr',\n  'html',\n  'iframe',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'menu',\n  'menuitem',\n  'meta',\n  'nav',\n  'noframes',\n  'ol',\n  'optgroup',\n  'option',\n  'p',\n  'param',\n  'section',\n  'source',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul'\n];\n","// Paragraph\n\n'use strict';\n\n\nmodule.exports = function paragraph(state, startLine/*, endLine*/) {\n  var content, terminate, i, l, token, oldParentType,\n      nextLine = startLine + 1,\n      terminatorRules = state.md.block.ruler.getRules('paragraph'),\n      endLine = state.lineMax;\n\n  oldParentType = state.parentType;\n  state.parentType = 'paragraph';\n\n  // jump line-by-line until empty one or EOF\n  for (; nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {\n    // this would be a code block normally, but after paragraph\n    // it's considered a lazy continuation regardless of what's there\n    if (state.sCount[nextLine] - state.blkIndent > 3) { continue; }\n\n    // quirk for blockquotes, this line should already be checked by that rule\n    if (state.sCount[nextLine] < 0) { continue; }\n\n    // Some tags can terminate paragraph without empty line.\n    terminate = false;\n    for (i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true;\n        break;\n      }\n    }\n    if (terminate) { break; }\n  }\n\n  content = state.getLines(startLine, nextLine, state.blkIndent, false).trim();\n\n  state.line = nextLine;\n\n  token          = state.push('paragraph_open', 'p', 1);\n  token.map      = [ startLine, state.line ];\n\n  token          = state.push('inline', '', 0);\n  token.content  = content;\n  token.map      = [ startLine, state.line ];\n  token.children = [];\n\n  token          = state.push('paragraph_close', 'p', -1);\n\n  state.parentType = oldParentType;\n\n  return true;\n};\n","// Parser state class\n\n'use strict';\n\nvar Token = require('../token');\nvar isSpace = require('../common/utils').isSpace;\n\n\nfunction StateBlock(src, md, env, tokens) {\n  var ch, s, start, pos, len, indent, offset, indent_found;\n\n  this.src = src;\n\n  // link to parser instance\n  this.md     = md;\n\n  this.env = env;\n\n  //\n  // Internal state vartiables\n  //\n\n  this.tokens = tokens;\n\n  this.bMarks = [];  // line begin offsets for fast jumps\n  this.eMarks = [];  // line end offsets for fast jumps\n  this.tShift = [];  // offsets of the first non-space characters (tabs not expanded)\n  this.sCount = [];  // indents for each line (tabs expanded)\n\n  // An amount of virtual spaces (tabs expanded) between beginning\n  // of each line (bMarks) and real beginning of that line.\n  //\n  // It exists only as a hack because blockquotes override bMarks\n  // losing information in the process.\n  //\n  // It's used only when expanding tabs, you can think about it as\n  // an initial tab length, e.g. bsCount=21 applied to string `\\t123`\n  // means first tab should be expanded to 4-21%4 === 3 spaces.\n  //\n  this.bsCount = [];\n\n  // block parser variables\n  this.blkIndent  = 0; // required block content indent\n                       // (for example, if we are in list)\n  this.line       = 0; // line index in src\n  this.lineMax    = 0; // lines count\n  this.tight      = false;  // loose/tight mode for lists\n  this.ddIndent   = -1; // indent of the current dd block (-1 if there isn't any)\n\n  // can be 'blockquote', 'list', 'root', 'paragraph' or 'reference'\n  // used in lists to determine if they interrupt a paragraph\n  this.parentType = 'root';\n\n  this.level = 0;\n\n  // renderer\n  this.result = '';\n\n  // Create caches\n  // Generate markers.\n  s = this.src;\n  indent_found = false;\n\n  for (start = pos = indent = offset = 0, len = s.length; pos < len; pos++) {\n    ch = s.charCodeAt(pos);\n\n    if (!indent_found) {\n      if (isSpace(ch)) {\n        indent++;\n\n        if (ch === 0x09) {\n          offset += 4 - offset % 4;\n        } else {\n          offset++;\n        }\n        continue;\n      } else {\n        indent_found = true;\n      }\n    }\n\n    if (ch === 0x0A || pos === len - 1) {\n      if (ch !== 0x0A) { pos++; }\n      this.bMarks.push(start);\n      this.eMarks.push(pos);\n      this.tShift.push(indent);\n      this.sCount.push(offset);\n      this.bsCount.push(0);\n\n      indent_found = false;\n      indent = 0;\n      offset = 0;\n      start = pos + 1;\n    }\n  }\n\n  // Push fake entry to simplify cache bounds checks\n  this.bMarks.push(s.length);\n  this.eMarks.push(s.length);\n  this.tShift.push(0);\n  this.sCount.push(0);\n  this.bsCount.push(0);\n\n  this.lineMax = this.bMarks.length - 1; // don't count last fake line\n}\n\n// Push new token to \"stream\".\n//\nStateBlock.prototype.push = function (type, tag, nesting) {\n  var token = new Token(type, tag, nesting);\n  token.block = true;\n\n  if (nesting < 0) { this.level--; }\n  token.level = this.level;\n  if (nesting > 0) { this.level++; }\n\n  this.tokens.push(token);\n  return token;\n};\n\nStateBlock.prototype.isEmpty = function isEmpty(line) {\n  return this.bMarks[line] + this.tShift[line] >= this.eMarks[line];\n};\n\nStateBlock.prototype.skipEmptyLines = function skipEmptyLines(from) {\n  for (var max = this.lineMax; from < max; from++) {\n    if (this.bMarks[from] + this.tShift[from] < this.eMarks[from]) {\n      break;\n    }\n  }\n  return from;\n};\n\n// Skip spaces from given position.\nStateBlock.prototype.skipSpaces = function skipSpaces(pos) {\n  var ch;\n\n  for (var max = this.src.length; pos < max; pos++) {\n    ch = this.src.charCodeAt(pos);\n    if (!isSpace(ch)) { break; }\n  }\n  return pos;\n};\n\n// Skip spaces from given position in reverse.\nStateBlock.prototype.skipSpacesBack = function skipSpacesBack(pos, min) {\n  if (pos <= min) { return pos; }\n\n  while (pos > min) {\n    if (!isSpace(this.src.charCodeAt(--pos))) { return pos + 1; }\n  }\n  return pos;\n};\n\n// Skip char codes from given position\nStateBlock.prototype.skipChars = function skipChars(pos, code) {\n  for (var max = this.src.length; pos < max; pos++) {\n    if (this.src.charCodeAt(pos) !== code) { break; }\n  }\n  return pos;\n};\n\n// Skip char codes reverse from given position - 1\nStateBlock.prototype.skipCharsBack = function skipCharsBack(pos, code, min) {\n  if (pos <= min) { return pos; }\n\n  while (pos > min) {\n    if (code !== this.src.charCodeAt(--pos)) { return pos + 1; }\n  }\n  return pos;\n};\n\n// cut lines range from source.\nStateBlock.prototype.getLines = function getLines(begin, end, indent, keepLastLF) {\n  var i, lineIndent, ch, first, last, queue, lineStart,\n      line = begin;\n\n  if (begin >= end) {\n    return '';\n  }\n\n  queue = new Array(end - begin);\n\n  for (i = 0; line < end; line++, i++) {\n    lineIndent = 0;\n    lineStart = first = this.bMarks[line];\n\n    if (line + 1 < end || keepLastLF) {\n      // No need for bounds check because we have fake entry on tail.\n      last = this.eMarks[line] + 1;\n    } else {\n      last = this.eMarks[line];\n    }\n\n    while (first < last && lineIndent < indent) {\n      ch = this.src.charCodeAt(first);\n\n      if (isSpace(ch)) {\n        if (ch === 0x09) {\n          lineIndent += 4 - (lineIndent + this.bsCount[line]) % 4;\n        } else {\n          lineIndent++;\n        }\n      } else if (first - lineStart < this.tShift[line]) {\n        // patched tShift masked characters to look like spaces (blockquotes, list markers)\n        lineIndent++;\n      } else {\n        break;\n      }\n\n      first++;\n    }\n\n    if (lineIndent > indent) {\n      // partially expanding tabs in code blocks, e.g '\\t\\tfoobar'\n      // with indent=2 becomes '  \\tfoobar'\n      queue[i] = new Array(lineIndent - indent + 1).join(' ') + this.src.slice(first, last);\n    } else {\n      queue[i] = this.src.slice(first, last);\n    }\n  }\n\n  return queue.join('');\n};\n\n// re-export Token class to use in block rules\nStateBlock.prototype.Token = Token;\n\n\nmodule.exports = StateBlock;\n","/** internal\n * class ParserInline\n *\n * Tokenizes paragraph content.\n **/\n'use strict';\n\n\nvar Ruler           = require('./ruler');\n\n\n////////////////////////////////////////////////////////////////////////////////\n// Parser rules\n\nvar _rules = [\n  [ 'text',            require('./rules_inline/text') ],\n  [ 'newline',         require('./rules_inline/newline') ],\n  [ 'escape',          require('./rules_inline/escape') ],\n  [ 'backticks',       require('./rules_inline/backticks') ],\n  [ 'strikethrough',   require('./rules_inline/strikethrough').tokenize ],\n  [ 'emphasis',        require('./rules_inline/emphasis').tokenize ],\n  [ 'link',            require('./rules_inline/link') ],\n  [ 'image',           require('./rules_inline/image') ],\n  [ 'autolink',        require('./rules_inline/autolink') ],\n  [ 'html_inline',     require('./rules_inline/html_inline') ],\n  [ 'entity',          require('./rules_inline/entity') ]\n];\n\nvar _rules2 = [\n  [ 'balance_pairs',   require('./rules_inline/balance_pairs') ],\n  [ 'strikethrough',   require('./rules_inline/strikethrough').postProcess ],\n  [ 'emphasis',        require('./rules_inline/emphasis').postProcess ],\n  [ 'text_collapse',   require('./rules_inline/text_collapse') ]\n];\n\n\n/**\n * new ParserInline()\n **/\nfunction ParserInline() {\n  var i;\n\n  /**\n   * ParserInline#ruler -> Ruler\n   *\n   * [[Ruler]] instance. Keep configuration of inline rules.\n   **/\n  this.ruler = new Ruler();\n\n  for (i = 0; i < _rules.length; i++) {\n    this.ruler.push(_rules[i][0], _rules[i][1]);\n  }\n\n  /**\n   * ParserInline#ruler2 -> Ruler\n   *\n   * [[Ruler]] instance. Second ruler used for post-processing\n   * (e.g. in emphasis-like rules).\n   **/\n  this.ruler2 = new Ruler();\n\n  for (i = 0; i < _rules2.length; i++) {\n    this.ruler2.push(_rules2[i][0], _rules2[i][1]);\n  }\n}\n\n\n// Skip single token by running all rules in validation mode;\n// returns `true` if any rule reported success\n//\nParserInline.prototype.skipToken = function (state) {\n  var ok, i, pos = state.pos,\n      rules = this.ruler.getRules(''),\n      len = rules.length,\n      maxNesting = state.md.options.maxNesting,\n      cache = state.cache;\n\n\n  if (typeof cache[pos] !== 'undefined') {\n    state.pos = cache[pos];\n    return;\n  }\n\n  if (state.level < maxNesting) {\n    for (i = 0; i < len; i++) {\n      // Increment state.level and decrement it later to limit recursion.\n      // It's harmless to do here, because no tokens are created. But ideally,\n      // we'd need a separate private state variable for this purpose.\n      //\n      state.level++;\n      ok = rules[i](state, true);\n      state.level--;\n\n      if (ok) { break; }\n    }\n  } else {\n    // Too much nesting, just skip until the end of the paragraph.\n    //\n    // NOTE: this will cause links to behave incorrectly in the following case,\n    //       when an amount of `[` is exactly equal to `maxNesting + 1`:\n    //\n    //       [[[[[[[[[[[[[[[[[[[[[foo]()\n    //\n    // TODO: remove this workaround when CM standard will allow nested links\n    //       (we can replace it by preventing links from being parsed in\n    //       validation mode)\n    //\n    state.pos = state.posMax;\n  }\n\n  if (!ok) { state.pos++; }\n  cache[pos] = state.pos;\n};\n\n\n// Generate tokens for input range\n//\nParserInline.prototype.tokenize = function (state) {\n  var ok, i,\n      rules = this.ruler.getRules(''),\n      len = rules.length,\n      end = state.posMax,\n      maxNesting = state.md.options.maxNesting;\n\n  while (state.pos < end) {\n    // Try all possible rules.\n    // On success, rule should:\n    //\n    // - update `state.pos`\n    // - update `state.tokens`\n    // - return true\n\n    if (state.level < maxNesting) {\n      for (i = 0; i < len; i++) {\n        ok = rules[i](state, false);\n        if (ok) { break; }\n      }\n    }\n\n    if (ok) {\n      if (state.pos >= end) { break; }\n      continue;\n    }\n\n    state.pending += state.src[state.pos++];\n  }\n\n  if (state.pending) {\n    state.pushPending();\n  }\n};\n\n\n/**\n * ParserInline.parse(str, md, env, outTokens)\n *\n * Process input string and push inline tokens into `outTokens`\n **/\nParserInline.prototype.parse = function (str, md, env, outTokens) {\n  var i, rules, len;\n  var state = new this.State(str, md, env, outTokens);\n\n  this.tokenize(state);\n\n  rules = this.ruler2.getRules('');\n  len = rules.length;\n\n  for (i = 0; i < len; i++) {\n    rules[i](state);\n  }\n};\n\n\nParserInline.prototype.State = require('./rules_inline/state_inline');\n\n\nmodule.exports = ParserInline;\n","// Skip text characters for text token, place those to pending buffer\n// and increment current pos\n\n'use strict';\n\n\n// Rule to skip pure text\n// '{}$%@~+=:' reserved for extentions\n\n// !, \", #, $, %, &, ', (, ), *, +, ,, -, ., /, :, ;, <, =, >, ?, @, [, \\, ], ^, _, `, {, |, }, or ~\n\n// !!!! Don't confuse with \"Markdown ASCII Punctuation\" chars\n// http://spec.commonmark.org/0.15/#ascii-punctuation-character\nfunction isTerminatorChar(ch) {\n  switch (ch) {\n    case 0x0A/* \\n */:\n    case 0x21/* ! */:\n    case 0x23/* # */:\n    case 0x24/* $ */:\n    case 0x25/* % */:\n    case 0x26/* & */:\n    case 0x2A/* * */:\n    case 0x2B/* + */:\n    case 0x2D/* - */:\n    case 0x3A/* : */:\n    case 0x3C/* < */:\n    case 0x3D/* = */:\n    case 0x3E/* > */:\n    case 0x40/* @ */:\n    case 0x5B/* [ */:\n    case 0x5C/* \\ */:\n    case 0x5D/* ] */:\n    case 0x5E/* ^ */:\n    case 0x5F/* _ */:\n    case 0x60/* ` */:\n    case 0x7B/* { */:\n    case 0x7D/* } */:\n    case 0x7E/* ~ */:\n      return true;\n    default:\n      return false;\n  }\n}\n\nmodule.exports = function text(state, silent) {\n  var pos = state.pos;\n\n  while (pos < state.posMax && !isTerminatorChar(state.src.charCodeAt(pos))) {\n    pos++;\n  }\n\n  if (pos === state.pos) { return false; }\n\n  if (!silent) { state.pending += state.src.slice(state.pos, pos); }\n\n  state.pos = pos;\n\n  return true;\n};\n\n// Alternative implementation, for memory.\n//\n// It costs 10% of performance, but allows extend terminators list, if place it\n// to `ParcerInline` property. Probably, will switch to it sometime, such\n// flexibility required.\n\n/*\nvar TERMINATOR_RE = /[\\n!#$%&*+\\-:<=>@[\\\\\\]^_`{}~]/;\n\nmodule.exports = function text(state, silent) {\n  var pos = state.pos,\n      idx = state.src.slice(pos).search(TERMINATOR_RE);\n\n  // first char is terminator -> empty text\n  if (idx === 0) { return false; }\n\n  // no terminator -> text till end of string\n  if (idx < 0) {\n    if (!silent) { state.pending += state.src.slice(pos); }\n    state.pos = state.src.length;\n    return true;\n  }\n\n  if (!silent) { state.pending += state.src.slice(pos, pos + idx); }\n\n  state.pos += idx;\n\n  return true;\n};*/\n","// Proceess '\\n'\n\n'use strict';\n\nvar isSpace = require('../common/utils').isSpace;\n\n\nmodule.exports = function newline(state, silent) {\n  var pmax, max, pos = state.pos;\n\n  if (state.src.charCodeAt(pos) !== 0x0A/* \\n */) { return false; }\n\n  pmax = state.pending.length - 1;\n  max = state.posMax;\n\n  // '  \\n' -> hardbreak\n  // Lookup in pending chars is bad practice! Don't copy to other rules!\n  // Pending string is stored in concat mode, indexed lookups will cause\n  // convertion to flat mode.\n  if (!silent) {\n    if (pmax >= 0 && state.pending.charCodeAt(pmax) === 0x20) {\n      if (pmax >= 1 && state.pending.charCodeAt(pmax - 1) === 0x20) {\n        state.pending = state.pending.replace(/ +$/, '');\n        state.push('hardbreak', 'br', 0);\n      } else {\n        state.pending = state.pending.slice(0, -1);\n        state.push('softbreak', 'br', 0);\n      }\n\n    } else {\n      state.push('softbreak', 'br', 0);\n    }\n  }\n\n  pos++;\n\n  // skip heading spaces for next line\n  while (pos < max && isSpace(state.src.charCodeAt(pos))) { pos++; }\n\n  state.pos = pos;\n  return true;\n};\n","// Process escaped chars and hardbreaks\n\n'use strict';\n\nvar isSpace = require('../common/utils').isSpace;\n\nvar ESCAPED = [];\n\nfor (var i = 0; i < 256; i++) { ESCAPED.push(0); }\n\n'\\\\!\"#$%&\\'()*+,./:;<=>?@[]^_`{|}~-'\n  .split('').forEach(function (ch) { ESCAPED[ch.charCodeAt(0)] = 1; });\n\n\nmodule.exports = function escape(state, silent) {\n  var ch, pos = state.pos, max = state.posMax;\n\n  if (state.src.charCodeAt(pos) !== 0x5C/* \\ */) { return false; }\n\n  pos++;\n\n  if (pos < max) {\n    ch = state.src.charCodeAt(pos);\n\n    if (ch < 256 && ESCAPED[ch] !== 0) {\n      if (!silent) { state.pending += state.src[pos]; }\n      state.pos += 2;\n      return true;\n    }\n\n    if (ch === 0x0A) {\n      if (!silent) {\n        state.push('hardbreak', 'br', 0);\n      }\n\n      pos++;\n      // skip leading whitespaces from next line\n      while (pos < max) {\n        ch = state.src.charCodeAt(pos);\n        if (!isSpace(ch)) { break; }\n        pos++;\n      }\n\n      state.pos = pos;\n      return true;\n    }\n  }\n\n  if (!silent) { state.pending += '\\\\'; }\n  state.pos++;\n  return true;\n};\n","// Parse backticks\n\n'use strict';\n\nmodule.exports = function backtick(state, silent) {\n  var start, max, marker, matchStart, matchEnd, token,\n      pos = state.pos,\n      ch = state.src.charCodeAt(pos);\n\n  if (ch !== 0x60/* ` */) { return false; }\n\n  start = pos;\n  pos++;\n  max = state.posMax;\n\n  while (pos < max && state.src.charCodeAt(pos) === 0x60/* ` */) { pos++; }\n\n  marker = state.src.slice(start, pos);\n\n  matchStart = matchEnd = pos;\n\n  while ((matchStart = state.src.indexOf('`', matchEnd)) !== -1) {\n    matchEnd = matchStart + 1;\n\n    while (matchEnd < max && state.src.charCodeAt(matchEnd) === 0x60/* ` */) { matchEnd++; }\n\n    if (matchEnd - matchStart === marker.length) {\n      if (!silent) {\n        token         = state.push('code_inline', 'code', 0);\n        token.markup  = marker;\n        token.content = state.src.slice(pos, matchStart)\n                                 .replace(/[ \\n]+/g, ' ')\n                                 .trim();\n      }\n      state.pos = matchEnd;\n      return true;\n    }\n  }\n\n  if (!silent) { state.pending += marker; }\n  state.pos += marker.length;\n  return true;\n};\n","// Process [link](<to> \"stuff\")\n\n'use strict';\n\nvar normalizeReference   = require('../common/utils').normalizeReference;\nvar isSpace              = require('../common/utils').isSpace;\n\n\nmodule.exports = function link(state, silent) {\n  var attrs,\n      code,\n      label,\n      labelEnd,\n      labelStart,\n      pos,\n      res,\n      ref,\n      title,\n      token,\n      href = '',\n      oldPos = state.pos,\n      max = state.posMax,\n      start = state.pos,\n      parseReference = true;\n\n  if (state.src.charCodeAt(state.pos) !== 0x5B/* [ */) { return false; }\n\n  labelStart = state.pos + 1;\n  labelEnd = state.md.helpers.parseLinkLabel(state, state.pos, true);\n\n  // parser failed to find ']', so it's not a valid link\n  if (labelEnd < 0) { return false; }\n\n  pos = labelEnd + 1;\n  if (pos < max && state.src.charCodeAt(pos) === 0x28/* ( */) {\n    //\n    // Inline link\n    //\n\n    // might have found a valid shortcut link, disable reference parsing\n    parseReference = false;\n\n    // [link](  <href>  \"title\"  )\n    //        ^^ skipping these spaces\n    pos++;\n    for (; pos < max; pos++) {\n      code = state.src.charCodeAt(pos);\n      if (!isSpace(code) && code !== 0x0A) { break; }\n    }\n    if (pos >= max) { return false; }\n\n    // [link](  <href>  \"title\"  )\n    //          ^^^^^^ parsing link destination\n    start = pos;\n    res = state.md.helpers.parseLinkDestination(state.src, pos, state.posMax);\n    if (res.ok) {\n      href = state.md.normalizeLink(res.str);\n      if (state.md.validateLink(href)) {\n        pos = res.pos;\n      } else {\n        href = '';\n      }\n    }\n\n    // [link](  <href>  \"title\"  )\n    //                ^^ skipping these spaces\n    start = pos;\n    for (; pos < max; pos++) {\n      code = state.src.charCodeAt(pos);\n      if (!isSpace(code) && code !== 0x0A) { break; }\n    }\n\n    // [link](  <href>  \"title\"  )\n    //                  ^^^^^^^ parsing link title\n    res = state.md.helpers.parseLinkTitle(state.src, pos, state.posMax);\n    if (pos < max && start !== pos && res.ok) {\n      title = res.str;\n      pos = res.pos;\n\n      // [link](  <href>  \"title\"  )\n      //                         ^^ skipping these spaces\n      for (; pos < max; pos++) {\n        code = state.src.charCodeAt(pos);\n        if (!isSpace(code) && code !== 0x0A) { break; }\n      }\n    } else {\n      title = '';\n    }\n\n    if (pos >= max || state.src.charCodeAt(pos) !== 0x29/* ) */) {\n      // parsing a valid shortcut link failed, fallback to reference\n      parseReference = true;\n    }\n    pos++;\n  }\n\n  if (parseReference) {\n    //\n    // Link reference\n    //\n    if (typeof state.env.references === 'undefined') { return false; }\n\n    if (pos < max && state.src.charCodeAt(pos) === 0x5B/* [ */) {\n      start = pos + 1;\n      pos = state.md.helpers.parseLinkLabel(state, pos);\n      if (pos >= 0) {\n        label = state.src.slice(start, pos++);\n      } else {\n        pos = labelEnd + 1;\n      }\n    } else {\n      pos = labelEnd + 1;\n    }\n\n    // covers label === '' and label === undefined\n    // (collapsed reference link and shortcut reference link respectively)\n    if (!label) { label = state.src.slice(labelStart, labelEnd); }\n\n    ref = state.env.references[normalizeReference(label)];\n    if (!ref) {\n      state.pos = oldPos;\n      return false;\n    }\n    href = ref.href;\n    title = ref.title;\n  }\n\n  //\n  // We found the end of the link, and know for a fact it's a valid link;\n  // so all that's left to do is to call tokenizer.\n  //\n  if (!silent) {\n    state.pos = labelStart;\n    state.posMax = labelEnd;\n\n    token        = state.push('link_open', 'a', 1);\n    token.attrs  = attrs = [ [ 'href', href ] ];\n    if (title) {\n      attrs.push([ 'title', title ]);\n    }\n\n    state.md.inline.tokenize(state);\n\n    token        = state.push('link_close', 'a', -1);\n  }\n\n  state.pos = pos;\n  state.posMax = max;\n  return true;\n};\n","// Process ![image](<src> \"title\")\n\n'use strict';\n\nvar normalizeReference   = require('../common/utils').normalizeReference;\nvar isSpace              = require('../common/utils').isSpace;\n\n\nmodule.exports = function image(state, silent) {\n  var attrs,\n      code,\n      content,\n      label,\n      labelEnd,\n      labelStart,\n      pos,\n      ref,\n      res,\n      title,\n      token,\n      tokens,\n      start,\n      href = '',\n      oldPos = state.pos,\n      max = state.posMax;\n\n  if (state.src.charCodeAt(state.pos) !== 0x21/* ! */) { return false; }\n  if (state.src.charCodeAt(state.pos + 1) !== 0x5B/* [ */) { return false; }\n\n  labelStart = state.pos + 2;\n  labelEnd = state.md.helpers.parseLinkLabel(state, state.pos + 1, false);\n\n  // parser failed to find ']', so it's not a valid link\n  if (labelEnd < 0) { return false; }\n\n  pos = labelEnd + 1;\n  if (pos < max && state.src.charCodeAt(pos) === 0x28/* ( */) {\n    //\n    // Inline link\n    //\n\n    // [link](  <href>  \"title\"  )\n    //        ^^ skipping these spaces\n    pos++;\n    for (; pos < max; pos++) {\n      code = state.src.charCodeAt(pos);\n      if (!isSpace(code) && code !== 0x0A) { break; }\n    }\n    if (pos >= max) { return false; }\n\n    // [link](  <href>  \"title\"  )\n    //          ^^^^^^ parsing link destination\n    start = pos;\n    res = state.md.helpers.parseLinkDestination(state.src, pos, state.posMax);\n    if (res.ok) {\n      href = state.md.normalizeLink(res.str);\n      if (state.md.validateLink(href)) {\n        pos = res.pos;\n      } else {\n        href = '';\n      }\n    }\n\n    // [link](  <href>  \"title\"  )\n    //                ^^ skipping these spaces\n    start = pos;\n    for (; pos < max; pos++) {\n      code = state.src.charCodeAt(pos);\n      if (!isSpace(code) && code !== 0x0A) { break; }\n    }\n\n    // [link](  <href>  \"title\"  )\n    //                  ^^^^^^^ parsing link title\n    res = state.md.helpers.parseLinkTitle(state.src, pos, state.posMax);\n    if (pos < max && start !== pos && res.ok) {\n      title = res.str;\n      pos = res.pos;\n\n      // [link](  <href>  \"title\"  )\n      //                         ^^ skipping these spaces\n      for (; pos < max; pos++) {\n        code = state.src.charCodeAt(pos);\n        if (!isSpace(code) && code !== 0x0A) { break; }\n      }\n    } else {\n      title = '';\n    }\n\n    if (pos >= max || state.src.charCodeAt(pos) !== 0x29/* ) */) {\n      state.pos = oldPos;\n      return false;\n    }\n    pos++;\n  } else {\n    //\n    // Link reference\n    //\n    if (typeof state.env.references === 'undefined') { return false; }\n\n    if (pos < max && state.src.charCodeAt(pos) === 0x5B/* [ */) {\n      start = pos + 1;\n      pos = state.md.helpers.parseLinkLabel(state, pos);\n      if (pos >= 0) {\n        label = state.src.slice(start, pos++);\n      } else {\n        pos = labelEnd + 1;\n      }\n    } else {\n      pos = labelEnd + 1;\n    }\n\n    // covers label === '' and label === undefined\n    // (collapsed reference link and shortcut reference link respectively)\n    if (!label) { label = state.src.slice(labelStart, labelEnd); }\n\n    ref = state.env.references[normalizeReference(label)];\n    if (!ref) {\n      state.pos = oldPos;\n      return false;\n    }\n    href = ref.href;\n    title = ref.title;\n  }\n\n  //\n  // We found the end of the link, and know for a fact it's a valid link;\n  // so all that's left to do is to call tokenizer.\n  //\n  if (!silent) {\n    content = state.src.slice(labelStart, labelEnd);\n\n    state.md.inline.parse(\n      content,\n      state.md,\n      state.env,\n      tokens = []\n    );\n\n    token          = state.push('image', 'img', 0);\n    token.attrs    = attrs = [ [ 'src', href ], [ 'alt', '' ] ];\n    token.children = tokens;\n    token.content  = content;\n\n    if (title) {\n      attrs.push([ 'title', title ]);\n    }\n  }\n\n  state.pos = pos;\n  state.posMax = max;\n  return true;\n};\n","// Process autolinks '<protocol:...>'\n\n'use strict';\n\n\n/*eslint max-len:0*/\nvar EMAIL_RE    = /^<([a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*)>/;\nvar AUTOLINK_RE = /^<([a-zA-Z][a-zA-Z0-9+.\\-]{1,31}):([^<>\\x00-\\x20]*)>/;\n\n\nmodule.exports = function autolink(state, silent) {\n  var tail, linkMatch, emailMatch, url, fullUrl, token,\n      pos = state.pos;\n\n  if (state.src.charCodeAt(pos) !== 0x3C/* < */) { return false; }\n\n  tail = state.src.slice(pos);\n\n  if (tail.indexOf('>') < 0) { return false; }\n\n  if (AUTOLINK_RE.test(tail)) {\n    linkMatch = tail.match(AUTOLINK_RE);\n\n    url = linkMatch[0].slice(1, -1);\n    fullUrl = state.md.normalizeLink(url);\n    if (!state.md.validateLink(fullUrl)) { return false; }\n\n    if (!silent) {\n      token         = state.push('link_open', 'a', 1);\n      token.attrs   = [ [ 'href', fullUrl ] ];\n      token.markup  = 'autolink';\n      token.info    = 'auto';\n\n      token         = state.push('text', '', 0);\n      token.content = state.md.normalizeLinkText(url);\n\n      token         = state.push('link_close', 'a', -1);\n      token.markup  = 'autolink';\n      token.info    = 'auto';\n    }\n\n    state.pos += linkMatch[0].length;\n    return true;\n  }\n\n  if (EMAIL_RE.test(tail)) {\n    emailMatch = tail.match(EMAIL_RE);\n\n    url = emailMatch[0].slice(1, -1);\n    fullUrl = state.md.normalizeLink('mailto:' + url);\n    if (!state.md.validateLink(fullUrl)) { return false; }\n\n    if (!silent) {\n      token         = state.push('link_open', 'a', 1);\n      token.attrs   = [ [ 'href', fullUrl ] ];\n      token.markup  = 'autolink';\n      token.info    = 'auto';\n\n      token         = state.push('text', '', 0);\n      token.content = state.md.normalizeLinkText(url);\n\n      token         = state.push('link_close', 'a', -1);\n      token.markup  = 'autolink';\n      token.info    = 'auto';\n    }\n\n    state.pos += emailMatch[0].length;\n    return true;\n  }\n\n  return false;\n};\n","// Process html tags\n\n'use strict';\n\n\nvar HTML_TAG_RE = require('../common/html_re').HTML_TAG_RE;\n\n\nfunction isLetter(ch) {\n  /*eslint no-bitwise:0*/\n  var lc = ch | 0x20; // to lower case\n  return (lc >= 0x61/* a */) && (lc <= 0x7a/* z */);\n}\n\n\nmodule.exports = function html_inline(state, silent) {\n  var ch, match, max, token,\n      pos = state.pos;\n\n  if (!state.md.options.html) { return false; }\n\n  // Check start\n  max = state.posMax;\n  if (state.src.charCodeAt(pos) !== 0x3C/* < */ ||\n      pos + 2 >= max) {\n    return false;\n  }\n\n  // Quick fail on second char\n  ch = state.src.charCodeAt(pos + 1);\n  if (ch !== 0x21/* ! */ &&\n      ch !== 0x3F/* ? */ &&\n      ch !== 0x2F/* / */ &&\n      !isLetter(ch)) {\n    return false;\n  }\n\n  match = state.src.slice(pos).match(HTML_TAG_RE);\n  if (!match) { return false; }\n\n  if (!silent) {\n    token         = state.push('html_inline', '', 0);\n    token.content = state.src.slice(pos, pos + match[0].length);\n  }\n  state.pos += match[0].length;\n  return true;\n};\n","// Process html entity - &#123;, &#xAF;, &quot;, ...\n\n'use strict';\n\nvar entities          = require('../common/entities');\nvar has               = require('../common/utils').has;\nvar isValidEntityCode = require('../common/utils').isValidEntityCode;\nvar fromCodePoint     = require('../common/utils').fromCodePoint;\n\n\nvar DIGITAL_RE = /^&#((?:x[a-f0-9]{1,8}|[0-9]{1,8}));/i;\nvar NAMED_RE   = /^&([a-z][a-z0-9]{1,31});/i;\n\n\nmodule.exports = function entity(state, silent) {\n  var ch, code, match, pos = state.pos, max = state.posMax;\n\n  if (state.src.charCodeAt(pos) !== 0x26/* & */) { return false; }\n\n  if (pos + 1 < max) {\n    ch = state.src.charCodeAt(pos + 1);\n\n    if (ch === 0x23 /* # */) {\n      match = state.src.slice(pos).match(DIGITAL_RE);\n      if (match) {\n        if (!silent) {\n          code = match[1][0].toLowerCase() === 'x' ? parseInt(match[1].slice(1), 16) : parseInt(match[1], 10);\n          state.pending += isValidEntityCode(code) ? fromCodePoint(code) : fromCodePoint(0xFFFD);\n        }\n        state.pos += match[0].length;\n        return true;\n      }\n    } else {\n      match = state.src.slice(pos).match(NAMED_RE);\n      if (match) {\n        if (has(entities, match[1])) {\n          if (!silent) { state.pending += entities[match[1]]; }\n          state.pos += match[0].length;\n          return true;\n        }\n      }\n    }\n  }\n\n  if (!silent) { state.pending += '&'; }\n  state.pos++;\n  return true;\n};\n","// For each opening emphasis-like marker find a matching closing one\n//\n'use strict';\n\n\nmodule.exports = function link_pairs(state) {\n  var i, j, lastDelim, currDelim,\n      delimiters = state.delimiters,\n      max = state.delimiters.length;\n\n  for (i = 0; i < max; i++) {\n    lastDelim = delimiters[i];\n\n    if (!lastDelim.close) { continue; }\n\n    j = i - lastDelim.jump - 1;\n\n    while (j >= 0) {\n      currDelim = delimiters[j];\n\n      if (currDelim.open &&\n          currDelim.marker === lastDelim.marker &&\n          currDelim.end < 0 &&\n          currDelim.level === lastDelim.level) {\n\n        // typeofs are for backward compatibility with plugins\n        var odd_match = (currDelim.close || lastDelim.open) &&\n                        typeof currDelim.length !== 'undefined' &&\n                        typeof lastDelim.length !== 'undefined' &&\n                        (currDelim.length + lastDelim.length) % 3 === 0;\n\n        if (!odd_match) {\n          lastDelim.jump = i - j;\n          lastDelim.open = false;\n          currDelim.end  = i;\n          currDelim.jump = 0;\n          break;\n        }\n      }\n\n      j -= currDelim.jump + 1;\n    }\n  }\n};\n","// Merge adjacent text nodes into one, and re-calculate all token levels\n//\n'use strict';\n\n\nmodule.exports = function text_collapse(state) {\n  var curr, last,\n      level = 0,\n      tokens = state.tokens,\n      max = state.tokens.length;\n\n  for (curr = last = 0; curr < max; curr++) {\n    // re-calculate levels\n    level += tokens[curr].nesting;\n    tokens[curr].level = level;\n\n    if (tokens[curr].type === 'text' &&\n        curr + 1 < max &&\n        tokens[curr + 1].type === 'text') {\n\n      // collapse two adjacent text nodes\n      tokens[curr + 1].content = tokens[curr].content + tokens[curr + 1].content;\n    } else {\n      if (curr !== last) { tokens[last] = tokens[curr]; }\n\n      last++;\n    }\n  }\n\n  if (curr !== last) {\n    tokens.length = last;\n  }\n};\n","// Inline parser state\n\n'use strict';\n\n\nvar Token          = require('../token');\nvar isWhiteSpace   = require('../common/utils').isWhiteSpace;\nvar isPunctChar    = require('../common/utils').isPunctChar;\nvar isMdAsciiPunct = require('../common/utils').isMdAsciiPunct;\n\n\nfunction StateInline(src, md, env, outTokens) {\n  this.src = src;\n  this.env = env;\n  this.md = md;\n  this.tokens = outTokens;\n\n  this.pos = 0;\n  this.posMax = this.src.length;\n  this.level = 0;\n  this.pending = '';\n  this.pendingLevel = 0;\n\n  this.cache = {};        // Stores { start: end } pairs. Useful for backtrack\n                          // optimization of pairs parse (emphasis, strikes).\n\n  this.delimiters = [];   // Emphasis-like delimiters\n}\n\n\n// Flush pending text\n//\nStateInline.prototype.pushPending = function () {\n  var token = new Token('text', '', 0);\n  token.content = this.pending;\n  token.level = this.pendingLevel;\n  this.tokens.push(token);\n  this.pending = '';\n  return token;\n};\n\n\n// Push new token to \"stream\".\n// If pending text exists - flush it as text token\n//\nStateInline.prototype.push = function (type, tag, nesting) {\n  if (this.pending) {\n    this.pushPending();\n  }\n\n  var token = new Token(type, tag, nesting);\n\n  if (nesting < 0) { this.level--; }\n  token.level = this.level;\n  if (nesting > 0) { this.level++; }\n\n  this.pendingLevel = this.level;\n  this.tokens.push(token);\n  return token;\n};\n\n\n// Scan a sequence of emphasis-like markers, and determine whether\n// it can start an emphasis sequence or end an emphasis sequence.\n//\n//  - start - position to scan from (it should point at a valid marker);\n//  - canSplitWord - determine if these markers can be found inside a word\n//\nStateInline.prototype.scanDelims = function (start, canSplitWord) {\n  var pos = start, lastChar, nextChar, count, can_open, can_close,\n      isLastWhiteSpace, isLastPunctChar,\n      isNextWhiteSpace, isNextPunctChar,\n      left_flanking = true,\n      right_flanking = true,\n      max = this.posMax,\n      marker = this.src.charCodeAt(start);\n\n  // treat beginning of the line as a whitespace\n  lastChar = start > 0 ? this.src.charCodeAt(start - 1) : 0x20;\n\n  while (pos < max && this.src.charCodeAt(pos) === marker) { pos++; }\n\n  count = pos - start;\n\n  // treat end of the line as a whitespace\n  nextChar = pos < max ? this.src.charCodeAt(pos) : 0x20;\n\n  isLastPunctChar = isMdAsciiPunct(lastChar) || isPunctChar(String.fromCharCode(lastChar));\n  isNextPunctChar = isMdAsciiPunct(nextChar) || isPunctChar(String.fromCharCode(nextChar));\n\n  isLastWhiteSpace = isWhiteSpace(lastChar);\n  isNextWhiteSpace = isWhiteSpace(nextChar);\n\n  if (isNextWhiteSpace) {\n    left_flanking = false;\n  } else if (isNextPunctChar) {\n    if (!(isLastWhiteSpace || isLastPunctChar)) {\n      left_flanking = false;\n    }\n  }\n\n  if (isLastWhiteSpace) {\n    right_flanking = false;\n  } else if (isLastPunctChar) {\n    if (!(isNextWhiteSpace || isNextPunctChar)) {\n      right_flanking = false;\n    }\n  }\n\n  if (!canSplitWord) {\n    can_open  = left_flanking  && (!right_flanking || isLastPunctChar);\n    can_close = right_flanking && (!left_flanking  || isNextPunctChar);\n  } else {\n    can_open  = left_flanking;\n    can_close = right_flanking;\n  }\n\n  return {\n    can_open:  can_open,\n    can_close: can_close,\n    length:    count\n  };\n};\n\n\n// re-export Token class to use in block rules\nStateInline.prototype.Token = Token;\n\n\nmodule.exports = StateInline;\n","'use strict';\n\n\n////////////////////////////////////////////////////////////////////////////////\n// Helpers\n\n// Merge objects\n//\nfunction assign(obj /*from1, from2, from3, ...*/) {\n  var sources = Array.prototype.slice.call(arguments, 1);\n\n  sources.forEach(function (source) {\n    if (!source) { return; }\n\n    Object.keys(source).forEach(function (key) {\n      obj[key] = source[key];\n    });\n  });\n\n  return obj;\n}\n\nfunction _class(obj) { return Object.prototype.toString.call(obj); }\nfunction isString(obj) { return _class(obj) === '[object String]'; }\nfunction isObject(obj) { return _class(obj) === '[object Object]'; }\nfunction isRegExp(obj) { return _class(obj) === '[object RegExp]'; }\nfunction isFunction(obj) { return _class(obj) === '[object Function]'; }\n\n\nfunction escapeRE(str) { return str.replace(/[.?*+^$[\\]\\\\(){}|-]/g, '\\\\$&'); }\n\n////////////////////////////////////////////////////////////////////////////////\n\n\nvar defaultOptions = {\n  fuzzyLink: true,\n  fuzzyEmail: true,\n  fuzzyIP: false\n};\n\n\nfunction isOptionsObj(obj) {\n  return Object.keys(obj || {}).reduce(function (acc, k) {\n    return acc || defaultOptions.hasOwnProperty(k);\n  }, false);\n}\n\n\nvar defaultSchemas = {\n  'http:': {\n    validate: function (text, pos, self) {\n      var tail = text.slice(pos);\n\n      if (!self.re.http) {\n        // compile lazily, because \"host\"-containing variables can change on tlds update.\n        self.re.http =  new RegExp(\n          '^\\\\/\\\\/' + self.re.src_auth + self.re.src_host_port_strict + self.re.src_path, 'i'\n        );\n      }\n      if (self.re.http.test(tail)) {\n        return tail.match(self.re.http)[0].length;\n      }\n      return 0;\n    }\n  },\n  'https:':  'http:',\n  'ftp:':    'http:',\n  '//':      {\n    validate: function (text, pos, self) {\n      var tail = text.slice(pos);\n\n      if (!self.re.no_http) {\n      // compile lazily, because \"host\"-containing variables can change on tlds update.\n        self.re.no_http =  new RegExp(\n          '^' +\n          self.re.src_auth +\n          // Don't allow single-level domains, because of false positives like '//test'\n          // with code comments\n          '(?:localhost|(?:(?:' + self.re.src_domain + ')\\\\.)+' + self.re.src_domain_root + ')' +\n          self.re.src_port +\n          self.re.src_host_terminator +\n          self.re.src_path,\n\n          'i'\n        );\n      }\n\n      if (self.re.no_http.test(tail)) {\n        // should not be `://` & `///`, that protects from errors in protocol name\n        if (pos >= 3 && text[pos - 3] === ':') { return 0; }\n        if (pos >= 3 && text[pos - 3] === '/') { return 0; }\n        return tail.match(self.re.no_http)[0].length;\n      }\n      return 0;\n    }\n  },\n  'mailto:': {\n    validate: function (text, pos, self) {\n      var tail = text.slice(pos);\n\n      if (!self.re.mailto) {\n        self.re.mailto =  new RegExp(\n          '^' + self.re.src_email_name + '@' + self.re.src_host_strict, 'i'\n        );\n      }\n      if (self.re.mailto.test(tail)) {\n        return tail.match(self.re.mailto)[0].length;\n      }\n      return 0;\n    }\n  }\n};\n\n/*eslint-disable max-len*/\n\n// RE pattern for 2-character tlds (autogenerated by ./support/tlds_2char_gen.js)\nvar tlds_2ch_src_re = 'a[cdefgilmnoqrstuwxz]|b[abdefghijmnorstvwyz]|c[acdfghiklmnoruvwxyz]|d[ejkmoz]|e[cegrstu]|f[ijkmor]|g[abdefghilmnpqrstuwy]|h[kmnrtu]|i[delmnoqrst]|j[emop]|k[eghimnprwyz]|l[abcikrstuvy]|m[acdeghklmnopqrstuvwxyz]|n[acefgilopruz]|om|p[aefghklmnrstwy]|qa|r[eosuw]|s[abcdeghijklmnortuvxyz]|t[cdfghjklmnortvwz]|u[agksyz]|v[aceginu]|w[fs]|y[et]|z[amw]';\n\n// DON'T try to make PRs with changes. Extend TLDs with LinkifyIt.tlds() instead\nvar tlds_default = 'biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|рф'.split('|');\n\n/*eslint-enable max-len*/\n\n////////////////////////////////////////////////////////////////////////////////\n\nfunction resetScanCache(self) {\n  self.__index__ = -1;\n  self.__text_cache__   = '';\n}\n\nfunction createValidator(re) {\n  return function (text, pos) {\n    var tail = text.slice(pos);\n\n    if (re.test(tail)) {\n      return tail.match(re)[0].length;\n    }\n    return 0;\n  };\n}\n\nfunction createNormalizer() {\n  return function (match, self) {\n    self.normalize(match);\n  };\n}\n\n// Schemas compiler. Build regexps.\n//\nfunction compile(self) {\n\n  // Load & clone RE patterns.\n  var re = self.re = require('./lib/re')(self.__opts__);\n\n  // Define dynamic patterns\n  var tlds = self.__tlds__.slice();\n\n  self.onCompile();\n\n  if (!self.__tlds_replaced__) {\n    tlds.push(tlds_2ch_src_re);\n  }\n  tlds.push(re.src_xn);\n\n  re.src_tlds = tlds.join('|');\n\n  function untpl(tpl) { return tpl.replace('%TLDS%', re.src_tlds); }\n\n  re.email_fuzzy      = RegExp(untpl(re.tpl_email_fuzzy), 'i');\n  re.link_fuzzy       = RegExp(untpl(re.tpl_link_fuzzy), 'i');\n  re.link_no_ip_fuzzy = RegExp(untpl(re.tpl_link_no_ip_fuzzy), 'i');\n  re.host_fuzzy_test  = RegExp(untpl(re.tpl_host_fuzzy_test), 'i');\n\n  //\n  // Compile each schema\n  //\n\n  var aliases = [];\n\n  self.__compiled__ = {}; // Reset compiled data\n\n  function schemaError(name, val) {\n    throw new Error('(LinkifyIt) Invalid schema \"' + name + '\": ' + val);\n  }\n\n  Object.keys(self.__schemas__).forEach(function (name) {\n    var val = self.__schemas__[name];\n\n    // skip disabled methods\n    if (val === null) { return; }\n\n    var compiled = { validate: null, link: null };\n\n    self.__compiled__[name] = compiled;\n\n    if (isObject(val)) {\n      if (isRegExp(val.validate)) {\n        compiled.validate = createValidator(val.validate);\n      } else if (isFunction(val.validate)) {\n        compiled.validate = val.validate;\n      } else {\n        schemaError(name, val);\n      }\n\n      if (isFunction(val.normalize)) {\n        compiled.normalize = val.normalize;\n      } else if (!val.normalize) {\n        compiled.normalize = createNormalizer();\n      } else {\n        schemaError(name, val);\n      }\n\n      return;\n    }\n\n    if (isString(val)) {\n      aliases.push(name);\n      return;\n    }\n\n    schemaError(name, val);\n  });\n\n  //\n  // Compile postponed aliases\n  //\n\n  aliases.forEach(function (alias) {\n    if (!self.__compiled__[self.__schemas__[alias]]) {\n      // Silently fail on missed schemas to avoid errons on disable.\n      // schemaError(alias, self.__schemas__[alias]);\n      return;\n    }\n\n    self.__compiled__[alias].validate =\n      self.__compiled__[self.__schemas__[alias]].validate;\n    self.__compiled__[alias].normalize =\n      self.__compiled__[self.__schemas__[alias]].normalize;\n  });\n\n  //\n  // Fake record for guessed links\n  //\n  self.__compiled__[''] = { validate: null, normalize: createNormalizer() };\n\n  //\n  // Build schema condition\n  //\n  var slist = Object.keys(self.__compiled__)\n                      .filter(function (name) {\n                        // Filter disabled & fake schemas\n                        return name.length > 0 && self.__compiled__[name];\n                      })\n                      .map(escapeRE)\n                      .join('|');\n  // (?!_) cause 1.5x slowdown\n  self.re.schema_test   = RegExp('(^|(?!_)(?:[><\\uff5c]|' + re.src_ZPCc + '))(' + slist + ')', 'i');\n  self.re.schema_search = RegExp('(^|(?!_)(?:[><\\uff5c]|' + re.src_ZPCc + '))(' + slist + ')', 'ig');\n\n  self.re.pretest = RegExp(\n    '(' + self.re.schema_test.source + ')|(' + self.re.host_fuzzy_test.source + ')|@',\n    'i'\n  );\n\n  //\n  // Cleanup\n  //\n\n  resetScanCache(self);\n}\n\n/**\n * class Match\n *\n * Match result. Single element of array, returned by [[LinkifyIt#match]]\n **/\nfunction Match(self, shift) {\n  var start = self.__index__,\n      end   = self.__last_index__,\n      text  = self.__text_cache__.slice(start, end);\n\n  /**\n   * Match#schema -> String\n   *\n   * Prefix (protocol) for matched string.\n   **/\n  this.schema    = self.__schema__.toLowerCase();\n  /**\n   * Match#index -> Number\n   *\n   * First position of matched string.\n   **/\n  this.index     = start + shift;\n  /**\n   * Match#lastIndex -> Number\n   *\n   * Next position after matched string.\n   **/\n  this.lastIndex = end + shift;\n  /**\n   * Match#raw -> String\n   *\n   * Matched string.\n   **/\n  this.raw       = text;\n  /**\n   * Match#text -> String\n   *\n   * Notmalized text of matched string.\n   **/\n  this.text      = text;\n  /**\n   * Match#url -> String\n   *\n   * Normalized url of matched string.\n   **/\n  this.url       = text;\n}\n\nfunction createMatch(self, shift) {\n  var match = new Match(self, shift);\n\n  self.__compiled__[match.schema].normalize(match, self);\n\n  return match;\n}\n\n\n/**\n * class LinkifyIt\n **/\n\n/**\n * new LinkifyIt(schemas, options)\n * - schemas (Object): Optional. Additional schemas to validate (prefix/validator)\n * - options (Object): { fuzzyLink|fuzzyEmail|fuzzyIP: true|false }\n *\n * Creates new linkifier instance with optional additional schemas.\n * Can be called without `new` keyword for convenience.\n *\n * By default understands:\n *\n * - `http(s)://...` , `ftp://...`, `mailto:...` & `//...` links\n * - \"fuzzy\" links and emails (example.com, foo@bar.com).\n *\n * `schemas` is an object, where each key/value describes protocol/rule:\n *\n * - __key__ - link prefix (usually, protocol name with `:` at the end, `skype:`\n *   for example). `linkify-it` makes shure that prefix is not preceeded with\n *   alphanumeric char and symbols. Only whitespaces and punctuation allowed.\n * - __value__ - rule to check tail after link prefix\n *   - _String_ - just alias to existing rule\n *   - _Object_\n *     - _validate_ - validator function (should return matched length on success),\n *       or `RegExp`.\n *     - _normalize_ - optional function to normalize text & url of matched result\n *       (for example, for @twitter mentions).\n *\n * `options`:\n *\n * - __fuzzyLink__ - recognige URL-s without `http(s):` prefix. Default `true`.\n * - __fuzzyIP__ - allow IPs in fuzzy links above. Can conflict with some texts\n *   like version numbers. Default `false`.\n * - __fuzzyEmail__ - recognize emails without `mailto:` prefix.\n *\n **/\nfunction LinkifyIt(schemas, options) {\n  if (!(this instanceof LinkifyIt)) {\n    return new LinkifyIt(schemas, options);\n  }\n\n  if (!options) {\n    if (isOptionsObj(schemas)) {\n      options = schemas;\n      schemas = {};\n    }\n  }\n\n  this.__opts__           = assign({}, defaultOptions, options);\n\n  // Cache last tested result. Used to skip repeating steps on next `match` call.\n  this.__index__          = -1;\n  this.__last_index__     = -1; // Next scan position\n  this.__schema__         = '';\n  this.__text_cache__     = '';\n\n  this.__schemas__        = assign({}, defaultSchemas, schemas);\n  this.__compiled__       = {};\n\n  this.__tlds__           = tlds_default;\n  this.__tlds_replaced__  = false;\n\n  this.re = {};\n\n  compile(this);\n}\n\n\n/** chainable\n * LinkifyIt#add(schema, definition)\n * - schema (String): rule name (fixed pattern prefix)\n * - definition (String|RegExp|Object): schema definition\n *\n * Add new rule definition. See constructor description for details.\n **/\nLinkifyIt.prototype.add = function add(schema, definition) {\n  this.__schemas__[schema] = definition;\n  compile(this);\n  return this;\n};\n\n\n/** chainable\n * LinkifyIt#set(options)\n * - options (Object): { fuzzyLink|fuzzyEmail|fuzzyIP: true|false }\n *\n * Set recognition options for links without schema.\n **/\nLinkifyIt.prototype.set = function set(options) {\n  this.__opts__ = assign(this.__opts__, options);\n  return this;\n};\n\n\n/**\n * LinkifyIt#test(text) -> Boolean\n *\n * Searches linkifiable pattern and returns `true` on success or `false` on fail.\n **/\nLinkifyIt.prototype.test = function test(text) {\n  // Reset scan cache\n  this.__text_cache__ = text;\n  this.__index__      = -1;\n\n  if (!text.length) { return false; }\n\n  var m, ml, me, len, shift, next, re, tld_pos, at_pos;\n\n  // try to scan for link with schema - that's the most simple rule\n  if (this.re.schema_test.test(text)) {\n    re = this.re.schema_search;\n    re.lastIndex = 0;\n    while ((m = re.exec(text)) !== null) {\n      len = this.testSchemaAt(text, m[2], re.lastIndex);\n      if (len) {\n        this.__schema__     = m[2];\n        this.__index__      = m.index + m[1].length;\n        this.__last_index__ = m.index + m[0].length + len;\n        break;\n      }\n    }\n  }\n\n  if (this.__opts__.fuzzyLink && this.__compiled__['http:']) {\n    // guess schemaless links\n    tld_pos = text.search(this.re.host_fuzzy_test);\n    if (tld_pos >= 0) {\n      // if tld is located after found link - no need to check fuzzy pattern\n      if (this.__index__ < 0 || tld_pos < this.__index__) {\n        if ((ml = text.match(this.__opts__.fuzzyIP ? this.re.link_fuzzy : this.re.link_no_ip_fuzzy)) !== null) {\n\n          shift = ml.index + ml[1].length;\n\n          if (this.__index__ < 0 || shift < this.__index__) {\n            this.__schema__     = '';\n            this.__index__      = shift;\n            this.__last_index__ = ml.index + ml[0].length;\n          }\n        }\n      }\n    }\n  }\n\n  if (this.__opts__.fuzzyEmail && this.__compiled__['mailto:']) {\n    // guess schemaless emails\n    at_pos = text.indexOf('@');\n    if (at_pos >= 0) {\n      // We can't skip this check, because this cases are possible:\n      // 192.168.1.1@gmail.com, my.in@example.com\n      if ((me = text.match(this.re.email_fuzzy)) !== null) {\n\n        shift = me.index + me[1].length;\n        next  = me.index + me[0].length;\n\n        if (this.__index__ < 0 || shift < this.__index__ ||\n            (shift === this.__index__ && next > this.__last_index__)) {\n          this.__schema__     = 'mailto:';\n          this.__index__      = shift;\n          this.__last_index__ = next;\n        }\n      }\n    }\n  }\n\n  return this.__index__ >= 0;\n};\n\n\n/**\n * LinkifyIt#pretest(text) -> Boolean\n *\n * Very quick check, that can give false positives. Returns true if link MAY BE\n * can exists. Can be used for speed optimization, when you need to check that\n * link NOT exists.\n **/\nLinkifyIt.prototype.pretest = function pretest(text) {\n  return this.re.pretest.test(text);\n};\n\n\n/**\n * LinkifyIt#testSchemaAt(text, name, position) -> Number\n * - text (String): text to scan\n * - name (String): rule (schema) name\n * - position (Number): text offset to check from\n *\n * Similar to [[LinkifyIt#test]] but checks only specific protocol tail exactly\n * at given position. Returns length of found pattern (0 on fail).\n **/\nLinkifyIt.prototype.testSchemaAt = function testSchemaAt(text, schema, pos) {\n  // If not supported schema check requested - terminate\n  if (!this.__compiled__[schema.toLowerCase()]) {\n    return 0;\n  }\n  return this.__compiled__[schema.toLowerCase()].validate(text, pos, this);\n};\n\n\n/**\n * LinkifyIt#match(text) -> Array|null\n *\n * Returns array of found link descriptions or `null` on fail. We strongly\n * recommend to use [[LinkifyIt#test]] first, for best speed.\n *\n * ##### Result match description\n *\n * - __schema__ - link schema, can be empty for fuzzy links, or `//` for\n *   protocol-neutral  links.\n * - __index__ - offset of matched text\n * - __lastIndex__ - index of next char after mathch end\n * - __raw__ - matched text\n * - __text__ - normalized text\n * - __url__ - link, generated from matched text\n **/\nLinkifyIt.prototype.match = function match(text) {\n  var shift = 0, result = [];\n\n  // Try to take previous element from cache, if .test() called before\n  if (this.__index__ >= 0 && this.__text_cache__ === text) {\n    result.push(createMatch(this, shift));\n    shift = this.__last_index__;\n  }\n\n  // Cut head if cache was used\n  var tail = shift ? text.slice(shift) : text;\n\n  // Scan string until end reached\n  while (this.test(tail)) {\n    result.push(createMatch(this, shift));\n\n    tail = tail.slice(this.__last_index__);\n    shift += this.__last_index__;\n  }\n\n  if (result.length) {\n    return result;\n  }\n\n  return null;\n};\n\n\n/** chainable\n * LinkifyIt#tlds(list [, keepOld]) -> this\n * - list (Array): list of tlds\n * - keepOld (Boolean): merge with current list if `true` (`false` by default)\n *\n * Load (or merge) new tlds list. Those are user for fuzzy links (without prefix)\n * to avoid false positives. By default this algorythm used:\n *\n * - hostname with any 2-letter root zones are ok.\n * - biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|рф\n *   are ok.\n * - encoded (`xn--...`) root zones are ok.\n *\n * If list is replaced, then exact match for 2-chars root zones will be checked.\n **/\nLinkifyIt.prototype.tlds = function tlds(list, keepOld) {\n  list = Array.isArray(list) ? list : [ list ];\n\n  if (!keepOld) {\n    this.__tlds__ = list.slice();\n    this.__tlds_replaced__ = true;\n    compile(this);\n    return this;\n  }\n\n  this.__tlds__ = this.__tlds__.concat(list)\n                                  .sort()\n                                  .filter(function (el, idx, arr) {\n                                    return el !== arr[idx - 1];\n                                  })\n                                  .reverse();\n\n  compile(this);\n  return this;\n};\n\n/**\n * LinkifyIt#normalize(match)\n *\n * Default normalizer (if schema does not define it's own).\n **/\nLinkifyIt.prototype.normalize = function normalize(match) {\n\n  // Do minimal possible changes by default. Need to collect feedback prior\n  // to move forward https://github.com/markdown-it/linkify-it/issues/1\n\n  if (!match.schema) { match.url = 'http://' + match.url; }\n\n  if (match.schema === 'mailto:' && !/^mailto:/i.test(match.url)) {\n    match.url = 'mailto:' + match.url;\n  }\n};\n\n\n/**\n * LinkifyIt#onCompile()\n *\n * Override to modify basic RegExp-s.\n **/\nLinkifyIt.prototype.onCompile = function onCompile() {\n};\n\n\nmodule.exports = LinkifyIt;\n","'use strict';\n\n\nmodule.exports = function (opts) {\n  var re = {};\n\n  // Use direct extract instead of `regenerate` to reduse browserified size\n  re.src_Any = require('uc.micro/properties/Any/regex').source;\n  re.src_Cc  = require('uc.micro/categories/Cc/regex').source;\n  re.src_Z   = require('uc.micro/categories/Z/regex').source;\n  re.src_P   = require('uc.micro/categories/P/regex').source;\n\n  // \\p{\\Z\\P\\Cc\\CF} (white spaces + control + format + punctuation)\n  re.src_ZPCc = [ re.src_Z, re.src_P, re.src_Cc ].join('|');\n\n  // \\p{\\Z\\Cc} (white spaces + control)\n  re.src_ZCc = [ re.src_Z, re.src_Cc ].join('|');\n\n  // Experimental. List of chars, completely prohibited in links\n  // because can separate it from other part of text\n  var text_separators = '[><\\uff5c]';\n\n  // All possible word characters (everything without punctuation, spaces & controls)\n  // Defined via punctuation & spaces to save space\n  // Should be something like \\p{\\L\\N\\S\\M} (\\w but without `_`)\n  re.src_pseudo_letter       = '(?:(?!' + text_separators + '|' + re.src_ZPCc + ')' + re.src_Any + ')';\n  // The same as abothe but without [0-9]\n  // var src_pseudo_letter_non_d = '(?:(?![0-9]|' + src_ZPCc + ')' + src_Any + ')';\n\n  ////////////////////////////////////////////////////////////////////////////////\n\n  re.src_ip4 =\n\n    '(?:(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)';\n\n  // Prohibit any of \"@/[]()\" in user/pass to avoid wrong domain fetch.\n  re.src_auth    = '(?:(?:(?!' + re.src_ZCc + '|[@/\\\\[\\\\]()]).)+@)?';\n\n  re.src_port =\n\n    '(?::(?:6(?:[0-4]\\\\d{3}|5(?:[0-4]\\\\d{2}|5(?:[0-2]\\\\d|3[0-5])))|[1-5]?\\\\d{1,4}))?';\n\n  re.src_host_terminator =\n\n    '(?=$|' + text_separators + '|' + re.src_ZPCc + ')(?!-|_|:\\\\d|\\\\.-|\\\\.(?!$|' + re.src_ZPCc + '))';\n\n  re.src_path =\n\n    '(?:' +\n      '[/?#]' +\n        '(?:' +\n          '(?!' + re.src_ZCc + '|' + text_separators + '|[()[\\\\]{}.,\"\\'?!\\\\-]).|' +\n          '\\\\[(?:(?!' + re.src_ZCc + '|\\\\]).)*\\\\]|' +\n          '\\\\((?:(?!' + re.src_ZCc + '|[)]).)*\\\\)|' +\n          '\\\\{(?:(?!' + re.src_ZCc + '|[}]).)*\\\\}|' +\n          '\\\\\"(?:(?!' + re.src_ZCc + '|[\"]).)+\\\\\"|' +\n          \"\\\\'(?:(?!\" + re.src_ZCc + \"|[']).)+\\\\'|\" +\n          \"\\\\'(?=\" + re.src_pseudo_letter + '|[-]).|' +  // allow `I'm_king` if no pair found\n          '\\\\.{2,3}[a-zA-Z0-9%/]|' + // github has ... in commit range links. Restrict to\n                                     // - english\n                                     // - percent-encoded\n                                     // - parts of file path\n                                     // until more examples found.\n          '\\\\.(?!' + re.src_ZCc + '|[.]).|' +\n          (opts && opts['---'] ?\n            '\\\\-(?!--(?:[^-]|$))(?:-*)|' // `---` => long dash, terminate\n            :\n            '\\\\-+|'\n          ) +\n          '\\\\,(?!' + re.src_ZCc + ').|' +      // allow `,,,` in paths\n          '\\\\!(?!' + re.src_ZCc + '|[!]).|' +\n          '\\\\?(?!' + re.src_ZCc + '|[?]).' +\n        ')+' +\n      '|\\\\/' +\n    ')?';\n\n  re.src_email_name =\n\n    '[\\\\-;:&=\\\\+\\\\$,\\\\\"\\\\.a-zA-Z0-9_]+';\n\n  re.src_xn =\n\n    'xn--[a-z0-9\\\\-]{1,59}';\n\n  // More to read about domain names\n  // http://serverfault.com/questions/638260/\n\n  re.src_domain_root =\n\n    // Allow letters & digits (http://test1)\n    '(?:' +\n      re.src_xn +\n      '|' +\n      re.src_pseudo_letter + '{1,63}' +\n    ')';\n\n  re.src_domain =\n\n    '(?:' +\n      re.src_xn +\n      '|' +\n      '(?:' + re.src_pseudo_letter + ')' +\n      '|' +\n      '(?:' + re.src_pseudo_letter + '(?:-|' + re.src_pseudo_letter + '){0,61}' + re.src_pseudo_letter + ')' +\n    ')';\n\n  re.src_host =\n\n    '(?:' +\n    // Don't need IP check, because digits are already allowed in normal domain names\n    //   src_ip4 +\n    // '|' +\n      '(?:(?:(?:' + re.src_domain + ')\\\\.)*' + re.src_domain/*_root*/ + ')' +\n    ')';\n\n  re.tpl_host_fuzzy =\n\n    '(?:' +\n      re.src_ip4 +\n    '|' +\n      '(?:(?:(?:' + re.src_domain + ')\\\\.)+(?:%TLDS%))' +\n    ')';\n\n  re.tpl_host_no_ip_fuzzy =\n\n    '(?:(?:(?:' + re.src_domain + ')\\\\.)+(?:%TLDS%))';\n\n  re.src_host_strict =\n\n    re.src_host + re.src_host_terminator;\n\n  re.tpl_host_fuzzy_strict =\n\n    re.tpl_host_fuzzy + re.src_host_terminator;\n\n  re.src_host_port_strict =\n\n    re.src_host + re.src_port + re.src_host_terminator;\n\n  re.tpl_host_port_fuzzy_strict =\n\n    re.tpl_host_fuzzy + re.src_port + re.src_host_terminator;\n\n  re.tpl_host_port_no_ip_fuzzy_strict =\n\n    re.tpl_host_no_ip_fuzzy + re.src_port + re.src_host_terminator;\n\n\n  ////////////////////////////////////////////////////////////////////////////////\n  // Main rules\n\n  // Rude test fuzzy links by host, for quick deny\n  re.tpl_host_fuzzy_test =\n\n    'localhost|www\\\\.|\\\\.\\\\d{1,3}\\\\.|(?:\\\\.(?:%TLDS%)(?:' + re.src_ZPCc + '|>|$))';\n\n  re.tpl_email_fuzzy =\n\n      '(^|' + text_separators + '|\\\\(|' + re.src_ZCc + ')(' + re.src_email_name + '@' + re.tpl_host_fuzzy_strict + ')';\n\n  re.tpl_link_fuzzy =\n      // Fuzzy link can't be prepended with .:/\\- and non punctuation.\n      // but can start with > (markdown blockquote)\n      '(^|(?![.:/\\\\-_@])(?:[$+<=>^`|\\uff5c]|' + re.src_ZPCc + '))' +\n      '((?![$+<=>^`|\\uff5c])' + re.tpl_host_port_fuzzy_strict + re.src_path + ')';\n\n  re.tpl_link_no_ip_fuzzy =\n      // Fuzzy link can't be prepended with .:/\\- and non punctuation.\n      // but can start with > (markdown blockquote)\n      '(^|(?![.:/\\\\-_@])(?:[$+<=>^`|\\uff5c]|' + re.src_ZPCc + '))' +\n      '((?![$+<=>^`|\\uff5c])' + re.tpl_host_port_no_ip_fuzzy_strict + re.src_path + ')';\n\n  return re;\n};\n","/*! https://mths.be/punycode v1.4.1 by @mathias */\n;(function(root) {\n\n\t/** Detect free variables */\n\tvar freeExports = typeof exports == 'object' && exports &&\n\t\t!exports.nodeType && exports;\n\tvar freeModule = typeof module == 'object' && module &&\n\t\t!module.nodeType && module;\n\tvar freeGlobal = typeof global == 'object' && global;\n\tif (\n\t\tfreeGlobal.global === freeGlobal ||\n\t\tfreeGlobal.window === freeGlobal ||\n\t\tfreeGlobal.self === freeGlobal\n\t) {\n\t\troot = freeGlobal;\n\t}\n\n\t/**\n\t * The `punycode` object.\n\t * @name punycode\n\t * @type Object\n\t */\n\tvar punycode,\n\n\t/** Highest positive signed 32-bit float value */\n\tmaxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1\n\n\t/** Bootstring parameters */\n\tbase = 36,\n\ttMin = 1,\n\ttMax = 26,\n\tskew = 38,\n\tdamp = 700,\n\tinitialBias = 72,\n\tinitialN = 128, // 0x80\n\tdelimiter = '-', // '\\x2D'\n\n\t/** Regular expressions */\n\tregexPunycode = /^xn--/,\n\tregexNonASCII = /[^\\x20-\\x7E]/, // unprintable ASCII chars + non-ASCII chars\n\tregexSeparators = /[\\x2E\\u3002\\uFF0E\\uFF61]/g, // RFC 3490 separators\n\n\t/** Error messages */\n\terrors = {\n\t\t'overflow': 'Overflow: input needs wider integers to process',\n\t\t'not-basic': 'Illegal input >= 0x80 (not a basic code point)',\n\t\t'invalid-input': 'Invalid input'\n\t},\n\n\t/** Convenience shortcuts */\n\tbaseMinusTMin = base - tMin,\n\tfloor = Math.floor,\n\tstringFromCharCode = String.fromCharCode,\n\n\t/** Temporary variable */\n\tkey;\n\n\t/*--------------------------------------------------------------------------*/\n\n\t/**\n\t * A generic error utility function.\n\t * @private\n\t * @param {String} type The error type.\n\t * @returns {Error} Throws a `RangeError` with the applicable error message.\n\t */\n\tfunction error(type) {\n\t\tthrow new RangeError(errors[type]);\n\t}\n\n\t/**\n\t * A generic `Array#map` utility function.\n\t * @private\n\t * @param {Array} array The array to iterate over.\n\t * @param {Function} callback The function that gets called for every array\n\t * item.\n\t * @returns {Array} A new array of values returned by the callback function.\n\t */\n\tfunction map(array, fn) {\n\t\tvar length = array.length;\n\t\tvar result = [];\n\t\twhile (length--) {\n\t\t\tresult[length] = fn(array[length]);\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**\n\t * A simple `Array#map`-like wrapper to work with domain name strings or email\n\t * addresses.\n\t * @private\n\t * @param {String} domain The domain name or email address.\n\t * @param {Function} callback The function that gets called for every\n\t * character.\n\t * @returns {Array} A new string of characters returned by the callback\n\t * function.\n\t */\n\tfunction mapDomain(string, fn) {\n\t\tvar parts = string.split('@');\n\t\tvar result = '';\n\t\tif (parts.length > 1) {\n\t\t\t// In email addresses, only the domain name should be punycoded. Leave\n\t\t\t// the local part (i.e. everything up to `@`) intact.\n\t\t\tresult = parts[0] + '@';\n\t\t\tstring = parts[1];\n\t\t}\n\t\t// Avoid `split(regex)` for IE8 compatibility. See #17.\n\t\tstring = string.replace(regexSeparators, '\\x2E');\n\t\tvar labels = string.split('.');\n\t\tvar encoded = map(labels, fn).join('.');\n\t\treturn result + encoded;\n\t}\n\n\t/**\n\t * Creates an array containing the numeric code points of each Unicode\n\t * character in the string. While JavaScript uses UCS-2 internally,\n\t * this function will convert a pair of surrogate halves (each of which\n\t * UCS-2 exposes as separate characters) into a single code point,\n\t * matching UTF-16.\n\t * @see `punycode.ucs2.encode`\n\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t * @memberOf punycode.ucs2\n\t * @name decode\n\t * @param {String} string The Unicode input string (UCS-2).\n\t * @returns {Array} The new array of code points.\n\t */\n\tfunction ucs2decode(string) {\n\t\tvar output = [],\n\t\t    counter = 0,\n\t\t    length = string.length,\n\t\t    value,\n\t\t    extra;\n\t\twhile (counter < length) {\n\t\t\tvalue = string.charCodeAt(counter++);\n\t\t\tif (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n\t\t\t\t// high surrogate, and there is a next character\n\t\t\t\textra = string.charCodeAt(counter++);\n\t\t\t\tif ((extra & 0xFC00) == 0xDC00) { // low surrogate\n\t\t\t\t\toutput.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n\t\t\t\t} else {\n\t\t\t\t\t// unmatched surrogate; only append this code unit, in case the next\n\t\t\t\t\t// code unit is the high surrogate of a surrogate pair\n\t\t\t\t\toutput.push(value);\n\t\t\t\t\tcounter--;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\toutput.push(value);\n\t\t\t}\n\t\t}\n\t\treturn output;\n\t}\n\n\t/**\n\t * Creates a string based on an array of numeric code points.\n\t * @see `punycode.ucs2.decode`\n\t * @memberOf punycode.ucs2\n\t * @name encode\n\t * @param {Array} codePoints The array of numeric code points.\n\t * @returns {String} The new Unicode string (UCS-2).\n\t */\n\tfunction ucs2encode(array) {\n\t\treturn map(array, function(value) {\n\t\t\tvar output = '';\n\t\t\tif (value > 0xFFFF) {\n\t\t\t\tvalue -= 0x10000;\n\t\t\t\toutput += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);\n\t\t\t\tvalue = 0xDC00 | value & 0x3FF;\n\t\t\t}\n\t\t\toutput += stringFromCharCode(value);\n\t\t\treturn output;\n\t\t}).join('');\n\t}\n\n\t/**\n\t * Converts a basic code point into a digit/integer.\n\t * @see `digitToBasic()`\n\t * @private\n\t * @param {Number} codePoint The basic numeric code point value.\n\t * @returns {Number} The numeric value of a basic code point (for use in\n\t * representing integers) in the range `0` to `base - 1`, or `base` if\n\t * the code point does not represent a value.\n\t */\n\tfunction basicToDigit(codePoint) {\n\t\tif (codePoint - 48 < 10) {\n\t\t\treturn codePoint - 22;\n\t\t}\n\t\tif (codePoint - 65 < 26) {\n\t\t\treturn codePoint - 65;\n\t\t}\n\t\tif (codePoint - 97 < 26) {\n\t\t\treturn codePoint - 97;\n\t\t}\n\t\treturn base;\n\t}\n\n\t/**\n\t * Converts a digit/integer into a basic code point.\n\t * @see `basicToDigit()`\n\t * @private\n\t * @param {Number} digit The numeric value of a basic code point.\n\t * @returns {Number} The basic code point whose value (when used for\n\t * representing integers) is `digit`, which needs to be in the range\n\t * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\n\t * used; else, the lowercase form is used. The behavior is undefined\n\t * if `flag` is non-zero and `digit` has no uppercase form.\n\t */\n\tfunction digitToBasic(digit, flag) {\n\t\t//  0..25 map to ASCII a..z or A..Z\n\t\t// 26..35 map to ASCII 0..9\n\t\treturn digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\n\t}\n\n\t/**\n\t * Bias adaptation function as per section 3.4 of RFC 3492.\n\t * https://tools.ietf.org/html/rfc3492#section-3.4\n\t * @private\n\t */\n\tfunction adapt(delta, numPoints, firstTime) {\n\t\tvar k = 0;\n\t\tdelta = firstTime ? floor(delta / damp) : delta >> 1;\n\t\tdelta += floor(delta / numPoints);\n\t\tfor (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {\n\t\t\tdelta = floor(delta / baseMinusTMin);\n\t\t}\n\t\treturn floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\n\t}\n\n\t/**\n\t * Converts a Punycode string of ASCII-only symbols to a string of Unicode\n\t * symbols.\n\t * @memberOf punycode\n\t * @param {String} input The Punycode string of ASCII-only symbols.\n\t * @returns {String} The resulting string of Unicode symbols.\n\t */\n\tfunction decode(input) {\n\t\t// Don't use UCS-2\n\t\tvar output = [],\n\t\t    inputLength = input.length,\n\t\t    out,\n\t\t    i = 0,\n\t\t    n = initialN,\n\t\t    bias = initialBias,\n\t\t    basic,\n\t\t    j,\n\t\t    index,\n\t\t    oldi,\n\t\t    w,\n\t\t    k,\n\t\t    digit,\n\t\t    t,\n\t\t    /** Cached calculation results */\n\t\t    baseMinusT;\n\n\t\t// Handle the basic code points: let `basic` be the number of input code\n\t\t// points before the last delimiter, or `0` if there is none, then copy\n\t\t// the first basic code points to the output.\n\n\t\tbasic = input.lastIndexOf(delimiter);\n\t\tif (basic < 0) {\n\t\t\tbasic = 0;\n\t\t}\n\n\t\tfor (j = 0; j < basic; ++j) {\n\t\t\t// if it's not a basic code point\n\t\t\tif (input.charCodeAt(j) >= 0x80) {\n\t\t\t\terror('not-basic');\n\t\t\t}\n\t\t\toutput.push(input.charCodeAt(j));\n\t\t}\n\n\t\t// Main decoding loop: start just after the last delimiter if any basic code\n\t\t// points were copied; start at the beginning otherwise.\n\n\t\tfor (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {\n\n\t\t\t// `index` is the index of the next character to be consumed.\n\t\t\t// Decode a generalized variable-length integer into `delta`,\n\t\t\t// which gets added to `i`. The overflow checking is easier\n\t\t\t// if we increase `i` as we go, then subtract off its starting\n\t\t\t// value at the end to obtain `delta`.\n\t\t\tfor (oldi = i, w = 1, k = base; /* no condition */; k += base) {\n\n\t\t\t\tif (index >= inputLength) {\n\t\t\t\t\terror('invalid-input');\n\t\t\t\t}\n\n\t\t\t\tdigit = basicToDigit(input.charCodeAt(index++));\n\n\t\t\t\tif (digit >= base || digit > floor((maxInt - i) / w)) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\ti += digit * w;\n\t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\n\t\t\t\tif (digit < t) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tbaseMinusT = base - t;\n\t\t\t\tif (w > floor(maxInt / baseMinusT)) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\tw *= baseMinusT;\n\n\t\t\t}\n\n\t\t\tout = output.length + 1;\n\t\t\tbias = adapt(i - oldi, out, oldi == 0);\n\n\t\t\t// `i` was supposed to wrap around from `out` to `0`,\n\t\t\t// incrementing `n` each time, so we'll fix that now:\n\t\t\tif (floor(i / out) > maxInt - n) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tn += floor(i / out);\n\t\t\ti %= out;\n\n\t\t\t// Insert `n` at position `i` of the output\n\t\t\toutput.splice(i++, 0, n);\n\n\t\t}\n\n\t\treturn ucs2encode(output);\n\t}\n\n\t/**\n\t * Converts a string of Unicode symbols (e.g. a domain name label) to a\n\t * Punycode string of ASCII-only symbols.\n\t * @memberOf punycode\n\t * @param {String} input The string of Unicode symbols.\n\t * @returns {String} The resulting Punycode string of ASCII-only symbols.\n\t */\n\tfunction encode(input) {\n\t\tvar n,\n\t\t    delta,\n\t\t    handledCPCount,\n\t\t    basicLength,\n\t\t    bias,\n\t\t    j,\n\t\t    m,\n\t\t    q,\n\t\t    k,\n\t\t    t,\n\t\t    currentValue,\n\t\t    output = [],\n\t\t    /** `inputLength` will hold the number of code points in `input`. */\n\t\t    inputLength,\n\t\t    /** Cached calculation results */\n\t\t    handledCPCountPlusOne,\n\t\t    baseMinusT,\n\t\t    qMinusT;\n\n\t\t// Convert the input in UCS-2 to Unicode\n\t\tinput = ucs2decode(input);\n\n\t\t// Cache the length\n\t\tinputLength = input.length;\n\n\t\t// Initialize the state\n\t\tn = initialN;\n\t\tdelta = 0;\n\t\tbias = initialBias;\n\n\t\t// Handle the basic code points\n\t\tfor (j = 0; j < inputLength; ++j) {\n\t\t\tcurrentValue = input[j];\n\t\t\tif (currentValue < 0x80) {\n\t\t\t\toutput.push(stringFromCharCode(currentValue));\n\t\t\t}\n\t\t}\n\n\t\thandledCPCount = basicLength = output.length;\n\n\t\t// `handledCPCount` is the number of code points that have been handled;\n\t\t// `basicLength` is the number of basic code points.\n\n\t\t// Finish the basic string - if it is not empty - with a delimiter\n\t\tif (basicLength) {\n\t\t\toutput.push(delimiter);\n\t\t}\n\n\t\t// Main encoding loop:\n\t\twhile (handledCPCount < inputLength) {\n\n\t\t\t// All non-basic code points < n have been handled already. Find the next\n\t\t\t// larger one:\n\t\t\tfor (m = maxInt, j = 0; j < inputLength; ++j) {\n\t\t\t\tcurrentValue = input[j];\n\t\t\t\tif (currentValue >= n && currentValue < m) {\n\t\t\t\t\tm = currentValue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,\n\t\t\t// but guard against overflow\n\t\t\thandledCPCountPlusOne = handledCPCount + 1;\n\t\t\tif (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tdelta += (m - n) * handledCPCountPlusOne;\n\t\t\tn = m;\n\n\t\t\tfor (j = 0; j < inputLength; ++j) {\n\t\t\t\tcurrentValue = input[j];\n\n\t\t\t\tif (currentValue < n && ++delta > maxInt) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\tif (currentValue == n) {\n\t\t\t\t\t// Represent delta as a generalized variable-length integer\n\t\t\t\t\tfor (q = delta, k = base; /* no condition */; k += base) {\n\t\t\t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\t\t\t\t\t\tif (q < t) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tqMinusT = q - t;\n\t\t\t\t\t\tbaseMinusT = base - t;\n\t\t\t\t\t\toutput.push(\n\t\t\t\t\t\t\tstringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))\n\t\t\t\t\t\t);\n\t\t\t\t\t\tq = floor(qMinusT / baseMinusT);\n\t\t\t\t\t}\n\n\t\t\t\t\toutput.push(stringFromCharCode(digitToBasic(q, 0)));\n\t\t\t\t\tbias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);\n\t\t\t\t\tdelta = 0;\n\t\t\t\t\t++handledCPCount;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t++delta;\n\t\t\t++n;\n\n\t\t}\n\t\treturn output.join('');\n\t}\n\n\t/**\n\t * Converts a Punycode string representing a domain name or an email address\n\t * to Unicode. Only the Punycoded parts of the input will be converted, i.e.\n\t * it doesn't matter if you call it on a string that has already been\n\t * converted to Unicode.\n\t * @memberOf punycode\n\t * @param {String} input The Punycoded domain name or email address to\n\t * convert to Unicode.\n\t * @returns {String} The Unicode representation of the given Punycode\n\t * string.\n\t */\n\tfunction toUnicode(input) {\n\t\treturn mapDomain(input, function(string) {\n\t\t\treturn regexPunycode.test(string)\n\t\t\t\t? decode(string.slice(4).toLowerCase())\n\t\t\t\t: string;\n\t\t});\n\t}\n\n\t/**\n\t * Converts a Unicode string representing a domain name or an email address to\n\t * Punycode. Only the non-ASCII parts of the domain name will be converted,\n\t * i.e. it doesn't matter if you call it with a domain that's already in\n\t * ASCII.\n\t * @memberOf punycode\n\t * @param {String} input The domain name or email address to convert, as a\n\t * Unicode string.\n\t * @returns {String} The Punycode representation of the given domain name or\n\t * email address.\n\t */\n\tfunction toASCII(input) {\n\t\treturn mapDomain(input, function(string) {\n\t\t\treturn regexNonASCII.test(string)\n\t\t\t\t? 'xn--' + encode(string)\n\t\t\t\t: string;\n\t\t});\n\t}\n\n\t/*--------------------------------------------------------------------------*/\n\n\t/** Define the public API */\n\tpunycode = {\n\t\t/**\n\t\t * A string representing the current Punycode.js version number.\n\t\t * @memberOf punycode\n\t\t * @type String\n\t\t */\n\t\t'version': '1.4.1',\n\t\t/**\n\t\t * An object of methods to convert from JavaScript's internal character\n\t\t * representation (UCS-2) to Unicode code points, and back.\n\t\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t\t * @memberOf punycode\n\t\t * @type Object\n\t\t */\n\t\t'ucs2': {\n\t\t\t'decode': ucs2decode,\n\t\t\t'encode': ucs2encode\n\t\t},\n\t\t'decode': decode,\n\t\t'encode': encode,\n\t\t'toASCII': toASCII,\n\t\t'toUnicode': toUnicode\n\t};\n\n\t/** Expose `punycode` */\n\t// Some AMD build optimizers, like r.js, check for specific condition patterns\n\t// like the following:\n\tif (\n\t\ttypeof define == 'function' &&\n\t\ttypeof define.amd == 'object' &&\n\t\tdefine.amd\n\t) {\n\t\tdefine('punycode', function() {\n\t\t\treturn punycode;\n\t\t});\n\t} else if (freeExports && freeModule) {\n\t\tif (module.exports == freeExports) {\n\t\t\t// in Node.js, io.js, or RingoJS v0.8.0+\n\t\t\tfreeModule.exports = punycode;\n\t\t} else {\n\t\t\t// in Narwhal or RingoJS v0.7.0-\n\t\t\tfor (key in punycode) {\n\t\t\t\tpunycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);\n\t\t\t}\n\t\t}\n\t} else {\n\t\t// in Rhino or a web browser\n\t\troot.punycode = punycode;\n\t}\n\n}(this));\n","module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","// markdown-it default options\n\n'use strict';\n\n\nmodule.exports = {\n  options: {\n    html:         false,        // Enable HTML tags in source\n    xhtmlOut:     false,        // Use '/' to close single tags (<br />)\n    breaks:       false,        // Convert '\\n' in paragraphs into <br>\n    langPrefix:   'language-',  // CSS language prefix for fenced blocks\n    linkify:      false,        // autoconvert URL-like texts to links\n\n    // Enable some language-neutral replacements + quotes beautification\n    typographer:  false,\n\n    // Double + single quotes replacement pairs, when typographer enabled,\n    // and smartquotes on. Could be either a String or an Array.\n    //\n    // For example, you can use '«»„“' for Russian, '„“‚‘' for German,\n    // and ['«\\xA0', '\\xA0»', '‹\\xA0', '\\xA0›'] for French (including nbsp).\n    quotes: '\\u201c\\u201d\\u2018\\u2019', /* “”‘’ */\n\n    // Highlighter function. Should return escaped HTML,\n    // or '' if the source string is not changed and should be escaped externaly.\n    // If result starts with <pre... internal wrapper is skipped.\n    //\n    // function (/*str, lang*/) { return ''; }\n    //\n    highlight: null,\n\n    maxNesting:   100            // Internal protection, recursion limit\n  },\n\n  components: {\n\n    core: {},\n    block: {},\n    inline: {}\n  }\n};\n","// \"Zero\" preset, with nothing enabled. Useful for manual configuring of simple\n// modes. For example, to parse bold/italic only.\n\n'use strict';\n\n\nmodule.exports = {\n  options: {\n    html:         false,        // Enable HTML tags in source\n    xhtmlOut:     false,        // Use '/' to close single tags (<br />)\n    breaks:       false,        // Convert '\\n' in paragraphs into <br>\n    langPrefix:   'language-',  // CSS language prefix for fenced blocks\n    linkify:      false,        // autoconvert URL-like texts to links\n\n    // Enable some language-neutral replacements + quotes beautification\n    typographer:  false,\n\n    // Double + single quotes replacement pairs, when typographer enabled,\n    // and smartquotes on. Could be either a String or an Array.\n    //\n    // For example, you can use '«»„“' for Russian, '„“‚‘' for German,\n    // and ['«\\xA0', '\\xA0»', '‹\\xA0', '\\xA0›'] for French (including nbsp).\n    quotes: '\\u201c\\u201d\\u2018\\u2019', /* “”‘’ */\n\n    // Highlighter function. Should return escaped HTML,\n    // or '' if the source string is not changed and should be escaped externaly.\n    // If result starts with <pre... internal wrapper is skipped.\n    //\n    // function (/*str, lang*/) { return ''; }\n    //\n    highlight: null,\n\n    maxNesting:   20            // Internal protection, recursion limit\n  },\n\n  components: {\n\n    core: {\n      rules: [\n        'normalize',\n        'block',\n        'inline'\n      ]\n    },\n\n    block: {\n      rules: [\n        'paragraph'\n      ]\n    },\n\n    inline: {\n      rules: [\n        'text'\n      ],\n      rules2: [\n        'balance_pairs',\n        'text_collapse'\n      ]\n    }\n  }\n};\n","// Commonmark default options\n\n'use strict';\n\n\nmodule.exports = {\n  options: {\n    html:         true,         // Enable HTML tags in source\n    xhtmlOut:     true,         // Use '/' to close single tags (<br />)\n    breaks:       false,        // Convert '\\n' in paragraphs into <br>\n    langPrefix:   'language-',  // CSS language prefix for fenced blocks\n    linkify:      false,        // autoconvert URL-like texts to links\n\n    // Enable some language-neutral replacements + quotes beautification\n    typographer:  false,\n\n    // Double + single quotes replacement pairs, when typographer enabled,\n    // and smartquotes on. Could be either a String or an Array.\n    //\n    // For example, you can use '«»„“' for Russian, '„“‚‘' for German,\n    // and ['«\\xA0', '\\xA0»', '‹\\xA0', '\\xA0›'] for French (including nbsp).\n    quotes: '\\u201c\\u201d\\u2018\\u2019', /* “”‘’ */\n\n    // Highlighter function. Should return escaped HTML,\n    // or '' if the source string is not changed and should be escaped externaly.\n    // If result starts with <pre... internal wrapper is skipped.\n    //\n    // function (/*str, lang*/) { return ''; }\n    //\n    highlight: null,\n\n    maxNesting:   20            // Internal protection, recursion limit\n  },\n\n  components: {\n\n    core: {\n      rules: [\n        'normalize',\n        'block',\n        'inline'\n      ]\n    },\n\n    block: {\n      rules: [\n        'blockquote',\n        'code',\n        'fence',\n        'heading',\n        'hr',\n        'html_block',\n        'lheading',\n        'list',\n        'reference',\n        'paragraph'\n      ]\n    },\n\n    inline: {\n      rules: [\n        'autolink',\n        'backticks',\n        'emphasis',\n        'entity',\n        'escape',\n        'html_inline',\n        'image',\n        'link',\n        'newline',\n        'text'\n      ],\n      rules2: [\n        'balance_pairs',\n        'emphasis',\n        'text_collapse'\n      ]\n    }\n  }\n};\n"],"sourceRoot":""}